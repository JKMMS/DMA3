
DMA3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e74  080001c4  080001c4  000101c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08004038  08004038  00014038  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004058  08004058  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004058  08004058  00014058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004060  08004060  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004060  08004060  00014060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004064  08004064  00014064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004068  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  20000018  0800407c  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  0800407c  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e03d  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002183  00000000  00000000  0002e081  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00030208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c18  00000000  00000000  00030f08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000217f7  00000000  00000000  00031b20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f621  00000000  00000000  00053317  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cc6a6  00000000  00000000  00062938  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0012efde  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000357c  00000000  00000000  0012f034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	; (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000018 	.word	0x20000018
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08004020 	.word	0x08004020

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	; (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	; (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	; (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	2000001c 	.word	0x2000001c
 8000200:	08004020 	.word	0x08004020

08000204 <__aeabi_uldivmod>:
 8000204:	b953      	cbnz	r3, 800021c <__aeabi_uldivmod+0x18>
 8000206:	b94a      	cbnz	r2, 800021c <__aeabi_uldivmod+0x18>
 8000208:	2900      	cmp	r1, #0
 800020a:	bf08      	it	eq
 800020c:	2800      	cmpeq	r0, #0
 800020e:	bf1c      	itt	ne
 8000210:	f04f 31ff 	movne.w	r1, #4294967295
 8000214:	f04f 30ff 	movne.w	r0, #4294967295
 8000218:	f000 b96e 	b.w	80004f8 <__aeabi_idiv0>
 800021c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000220:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000224:	f000 f806 	bl	8000234 <__udivmoddi4>
 8000228:	f8dd e004 	ldr.w	lr, [sp, #4]
 800022c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000230:	b004      	add	sp, #16
 8000232:	4770      	bx	lr

08000234 <__udivmoddi4>:
 8000234:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000238:	9d08      	ldr	r5, [sp, #32]
 800023a:	4604      	mov	r4, r0
 800023c:	468c      	mov	ip, r1
 800023e:	2b00      	cmp	r3, #0
 8000240:	f040 8083 	bne.w	800034a <__udivmoddi4+0x116>
 8000244:	428a      	cmp	r2, r1
 8000246:	4617      	mov	r7, r2
 8000248:	d947      	bls.n	80002da <__udivmoddi4+0xa6>
 800024a:	fab2 f282 	clz	r2, r2
 800024e:	b142      	cbz	r2, 8000262 <__udivmoddi4+0x2e>
 8000250:	f1c2 0020 	rsb	r0, r2, #32
 8000254:	fa24 f000 	lsr.w	r0, r4, r0
 8000258:	4091      	lsls	r1, r2
 800025a:	4097      	lsls	r7, r2
 800025c:	ea40 0c01 	orr.w	ip, r0, r1
 8000260:	4094      	lsls	r4, r2
 8000262:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000266:	0c23      	lsrs	r3, r4, #16
 8000268:	fbbc f6f8 	udiv	r6, ip, r8
 800026c:	fa1f fe87 	uxth.w	lr, r7
 8000270:	fb08 c116 	mls	r1, r8, r6, ip
 8000274:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000278:	fb06 f10e 	mul.w	r1, r6, lr
 800027c:	4299      	cmp	r1, r3
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x60>
 8000280:	18fb      	adds	r3, r7, r3
 8000282:	f106 30ff 	add.w	r0, r6, #4294967295
 8000286:	f080 8119 	bcs.w	80004bc <__udivmoddi4+0x288>
 800028a:	4299      	cmp	r1, r3
 800028c:	f240 8116 	bls.w	80004bc <__udivmoddi4+0x288>
 8000290:	3e02      	subs	r6, #2
 8000292:	443b      	add	r3, r7
 8000294:	1a5b      	subs	r3, r3, r1
 8000296:	b2a4      	uxth	r4, r4
 8000298:	fbb3 f0f8 	udiv	r0, r3, r8
 800029c:	fb08 3310 	mls	r3, r8, r0, r3
 80002a0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a4:	fb00 fe0e 	mul.w	lr, r0, lr
 80002a8:	45a6      	cmp	lr, r4
 80002aa:	d909      	bls.n	80002c0 <__udivmoddi4+0x8c>
 80002ac:	193c      	adds	r4, r7, r4
 80002ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b2:	f080 8105 	bcs.w	80004c0 <__udivmoddi4+0x28c>
 80002b6:	45a6      	cmp	lr, r4
 80002b8:	f240 8102 	bls.w	80004c0 <__udivmoddi4+0x28c>
 80002bc:	3802      	subs	r0, #2
 80002be:	443c      	add	r4, r7
 80002c0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c4:	eba4 040e 	sub.w	r4, r4, lr
 80002c8:	2600      	movs	r6, #0
 80002ca:	b11d      	cbz	r5, 80002d4 <__udivmoddi4+0xa0>
 80002cc:	40d4      	lsrs	r4, r2
 80002ce:	2300      	movs	r3, #0
 80002d0:	e9c5 4300 	strd	r4, r3, [r5]
 80002d4:	4631      	mov	r1, r6
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	b902      	cbnz	r2, 80002de <__udivmoddi4+0xaa>
 80002dc:	deff      	udf	#255	; 0xff
 80002de:	fab2 f282 	clz	r2, r2
 80002e2:	2a00      	cmp	r2, #0
 80002e4:	d150      	bne.n	8000388 <__udivmoddi4+0x154>
 80002e6:	1bcb      	subs	r3, r1, r7
 80002e8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002ec:	fa1f f887 	uxth.w	r8, r7
 80002f0:	2601      	movs	r6, #1
 80002f2:	fbb3 fcfe 	udiv	ip, r3, lr
 80002f6:	0c21      	lsrs	r1, r4, #16
 80002f8:	fb0e 331c 	mls	r3, lr, ip, r3
 80002fc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000300:	fb08 f30c 	mul.w	r3, r8, ip
 8000304:	428b      	cmp	r3, r1
 8000306:	d907      	bls.n	8000318 <__udivmoddi4+0xe4>
 8000308:	1879      	adds	r1, r7, r1
 800030a:	f10c 30ff 	add.w	r0, ip, #4294967295
 800030e:	d202      	bcs.n	8000316 <__udivmoddi4+0xe2>
 8000310:	428b      	cmp	r3, r1
 8000312:	f200 80e9 	bhi.w	80004e8 <__udivmoddi4+0x2b4>
 8000316:	4684      	mov	ip, r0
 8000318:	1ac9      	subs	r1, r1, r3
 800031a:	b2a3      	uxth	r3, r4
 800031c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000320:	fb0e 1110 	mls	r1, lr, r0, r1
 8000324:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000328:	fb08 f800 	mul.w	r8, r8, r0
 800032c:	45a0      	cmp	r8, r4
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x10c>
 8000330:	193c      	adds	r4, r7, r4
 8000332:	f100 33ff 	add.w	r3, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x10a>
 8000338:	45a0      	cmp	r8, r4
 800033a:	f200 80d9 	bhi.w	80004f0 <__udivmoddi4+0x2bc>
 800033e:	4618      	mov	r0, r3
 8000340:	eba4 0408 	sub.w	r4, r4, r8
 8000344:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000348:	e7bf      	b.n	80002ca <__udivmoddi4+0x96>
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0x12e>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80b1 	beq.w	80004b6 <__udivmoddi4+0x282>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x1cc>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0x140>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80b8 	bhi.w	80004e4 <__udivmoddi4+0x2b0>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0103 	sbc.w	r1, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	468c      	mov	ip, r1
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0a8      	beq.n	80002d4 <__udivmoddi4+0xa0>
 8000382:	e9c5 4c00 	strd	r4, ip, [r5]
 8000386:	e7a5      	b.n	80002d4 <__udivmoddi4+0xa0>
 8000388:	f1c2 0320 	rsb	r3, r2, #32
 800038c:	fa20 f603 	lsr.w	r6, r0, r3
 8000390:	4097      	lsls	r7, r2
 8000392:	fa01 f002 	lsl.w	r0, r1, r2
 8000396:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039a:	40d9      	lsrs	r1, r3
 800039c:	4330      	orrs	r0, r6
 800039e:	0c03      	lsrs	r3, r0, #16
 80003a0:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a4:	fa1f f887 	uxth.w	r8, r7
 80003a8:	fb0e 1116 	mls	r1, lr, r6, r1
 80003ac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b0:	fb06 f108 	mul.w	r1, r6, r8
 80003b4:	4299      	cmp	r1, r3
 80003b6:	fa04 f402 	lsl.w	r4, r4, r2
 80003ba:	d909      	bls.n	80003d0 <__udivmoddi4+0x19c>
 80003bc:	18fb      	adds	r3, r7, r3
 80003be:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c2:	f080 808d 	bcs.w	80004e0 <__udivmoddi4+0x2ac>
 80003c6:	4299      	cmp	r1, r3
 80003c8:	f240 808a 	bls.w	80004e0 <__udivmoddi4+0x2ac>
 80003cc:	3e02      	subs	r6, #2
 80003ce:	443b      	add	r3, r7
 80003d0:	1a5b      	subs	r3, r3, r1
 80003d2:	b281      	uxth	r1, r0
 80003d4:	fbb3 f0fe 	udiv	r0, r3, lr
 80003d8:	fb0e 3310 	mls	r3, lr, r0, r3
 80003dc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e0:	fb00 f308 	mul.w	r3, r0, r8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d907      	bls.n	80003f8 <__udivmoddi4+0x1c4>
 80003e8:	1879      	adds	r1, r7, r1
 80003ea:	f100 3cff 	add.w	ip, r0, #4294967295
 80003ee:	d273      	bcs.n	80004d8 <__udivmoddi4+0x2a4>
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d971      	bls.n	80004d8 <__udivmoddi4+0x2a4>
 80003f4:	3802      	subs	r0, #2
 80003f6:	4439      	add	r1, r7
 80003f8:	1acb      	subs	r3, r1, r3
 80003fa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003fe:	e778      	b.n	80002f2 <__udivmoddi4+0xbe>
 8000400:	f1c6 0c20 	rsb	ip, r6, #32
 8000404:	fa03 f406 	lsl.w	r4, r3, r6
 8000408:	fa22 f30c 	lsr.w	r3, r2, ip
 800040c:	431c      	orrs	r4, r3
 800040e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041a:	fa21 f10c 	lsr.w	r1, r1, ip
 800041e:	431f      	orrs	r7, r3
 8000420:	0c3b      	lsrs	r3, r7, #16
 8000422:	fbb1 f9fe 	udiv	r9, r1, lr
 8000426:	fa1f f884 	uxth.w	r8, r4
 800042a:	fb0e 1119 	mls	r1, lr, r9, r1
 800042e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000432:	fb09 fa08 	mul.w	sl, r9, r8
 8000436:	458a      	cmp	sl, r1
 8000438:	fa02 f206 	lsl.w	r2, r2, r6
 800043c:	fa00 f306 	lsl.w	r3, r0, r6
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x220>
 8000442:	1861      	adds	r1, r4, r1
 8000444:	f109 30ff 	add.w	r0, r9, #4294967295
 8000448:	d248      	bcs.n	80004dc <__udivmoddi4+0x2a8>
 800044a:	458a      	cmp	sl, r1
 800044c:	d946      	bls.n	80004dc <__udivmoddi4+0x2a8>
 800044e:	f1a9 0902 	sub.w	r9, r9, #2
 8000452:	4421      	add	r1, r4
 8000454:	eba1 010a 	sub.w	r1, r1, sl
 8000458:	b2bf      	uxth	r7, r7
 800045a:	fbb1 f0fe 	udiv	r0, r1, lr
 800045e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000462:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000466:	fb00 f808 	mul.w	r8, r0, r8
 800046a:	45b8      	cmp	r8, r7
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x24a>
 800046e:	19e7      	adds	r7, r4, r7
 8000470:	f100 31ff 	add.w	r1, r0, #4294967295
 8000474:	d22e      	bcs.n	80004d4 <__udivmoddi4+0x2a0>
 8000476:	45b8      	cmp	r8, r7
 8000478:	d92c      	bls.n	80004d4 <__udivmoddi4+0x2a0>
 800047a:	3802      	subs	r0, #2
 800047c:	4427      	add	r7, r4
 800047e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000482:	eba7 0708 	sub.w	r7, r7, r8
 8000486:	fba0 8902 	umull	r8, r9, r0, r2
 800048a:	454f      	cmp	r7, r9
 800048c:	46c6      	mov	lr, r8
 800048e:	4649      	mov	r1, r9
 8000490:	d31a      	bcc.n	80004c8 <__udivmoddi4+0x294>
 8000492:	d017      	beq.n	80004c4 <__udivmoddi4+0x290>
 8000494:	b15d      	cbz	r5, 80004ae <__udivmoddi4+0x27a>
 8000496:	ebb3 020e 	subs.w	r2, r3, lr
 800049a:	eb67 0701 	sbc.w	r7, r7, r1
 800049e:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a2:	40f2      	lsrs	r2, r6
 80004a4:	ea4c 0202 	orr.w	r2, ip, r2
 80004a8:	40f7      	lsrs	r7, r6
 80004aa:	e9c5 2700 	strd	r2, r7, [r5]
 80004ae:	2600      	movs	r6, #0
 80004b0:	4631      	mov	r1, r6
 80004b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004b6:	462e      	mov	r6, r5
 80004b8:	4628      	mov	r0, r5
 80004ba:	e70b      	b.n	80002d4 <__udivmoddi4+0xa0>
 80004bc:	4606      	mov	r6, r0
 80004be:	e6e9      	b.n	8000294 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fd      	b.n	80002c0 <__udivmoddi4+0x8c>
 80004c4:	4543      	cmp	r3, r8
 80004c6:	d2e5      	bcs.n	8000494 <__udivmoddi4+0x260>
 80004c8:	ebb8 0e02 	subs.w	lr, r8, r2
 80004cc:	eb69 0104 	sbc.w	r1, r9, r4
 80004d0:	3801      	subs	r0, #1
 80004d2:	e7df      	b.n	8000494 <__udivmoddi4+0x260>
 80004d4:	4608      	mov	r0, r1
 80004d6:	e7d2      	b.n	800047e <__udivmoddi4+0x24a>
 80004d8:	4660      	mov	r0, ip
 80004da:	e78d      	b.n	80003f8 <__udivmoddi4+0x1c4>
 80004dc:	4681      	mov	r9, r0
 80004de:	e7b9      	b.n	8000454 <__udivmoddi4+0x220>
 80004e0:	4666      	mov	r6, ip
 80004e2:	e775      	b.n	80003d0 <__udivmoddi4+0x19c>
 80004e4:	4630      	mov	r0, r6
 80004e6:	e74a      	b.n	800037e <__udivmoddi4+0x14a>
 80004e8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004ec:	4439      	add	r1, r7
 80004ee:	e713      	b.n	8000318 <__udivmoddi4+0xe4>
 80004f0:	3802      	subs	r0, #2
 80004f2:	443c      	add	r4, r7
 80004f4:	e724      	b.n	8000340 <__udivmoddi4+0x10c>
 80004f6:	bf00      	nop

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000502:	2300      	movs	r3, #0
 8000504:	607b      	str	r3, [r7, #4]
 8000506:	4b10      	ldr	r3, [pc, #64]	; (8000548 <MX_DMA_Init+0x4c>)
 8000508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800050a:	4a0f      	ldr	r2, [pc, #60]	; (8000548 <MX_DMA_Init+0x4c>)
 800050c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000510:	6313      	str	r3, [r2, #48]	; 0x30
 8000512:	4b0d      	ldr	r3, [pc, #52]	; (8000548 <MX_DMA_Init+0x4c>)
 8000514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000516:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800051a:	607b      	str	r3, [r7, #4]
 800051c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800051e:	2200      	movs	r2, #0
 8000520:	2100      	movs	r1, #0
 8000522:	2010      	movs	r0, #16
 8000524:	f000 fd8d 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000528:	2010      	movs	r0, #16
 800052a:	f000 fda6 	bl	800107a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800052e:	2200      	movs	r2, #0
 8000530:	2100      	movs	r1, #0
 8000532:	2011      	movs	r0, #17
 8000534:	f000 fd85 	bl	8001042 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000538:	2011      	movs	r0, #17
 800053a:	f000 fd9e 	bl	800107a <HAL_NVIC_EnableIRQ>

}
 800053e:	bf00      	nop
 8000540:	3708      	adds	r7, #8
 8000542:	46bd      	mov	sp, r7
 8000544:	bd80      	pop	{r7, pc}
 8000546:	bf00      	nop
 8000548:	40023800 	.word	0x40023800

0800054c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b08a      	sub	sp, #40	; 0x28
 8000550:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000552:	f107 0314 	add.w	r3, r7, #20
 8000556:	2200      	movs	r2, #0
 8000558:	601a      	str	r2, [r3, #0]
 800055a:	605a      	str	r2, [r3, #4]
 800055c:	609a      	str	r2, [r3, #8]
 800055e:	60da      	str	r2, [r3, #12]
 8000560:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000562:	2300      	movs	r3, #0
 8000564:	613b      	str	r3, [r7, #16]
 8000566:	4b2d      	ldr	r3, [pc, #180]	; (800061c <MX_GPIO_Init+0xd0>)
 8000568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800056a:	4a2c      	ldr	r2, [pc, #176]	; (800061c <MX_GPIO_Init+0xd0>)
 800056c:	f043 0304 	orr.w	r3, r3, #4
 8000570:	6313      	str	r3, [r2, #48]	; 0x30
 8000572:	4b2a      	ldr	r3, [pc, #168]	; (800061c <MX_GPIO_Init+0xd0>)
 8000574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000576:	f003 0304 	and.w	r3, r3, #4
 800057a:	613b      	str	r3, [r7, #16]
 800057c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800057e:	2300      	movs	r3, #0
 8000580:	60fb      	str	r3, [r7, #12]
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <MX_GPIO_Init+0xd0>)
 8000584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000586:	4a25      	ldr	r2, [pc, #148]	; (800061c <MX_GPIO_Init+0xd0>)
 8000588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800058c:	6313      	str	r3, [r2, #48]	; 0x30
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <MX_GPIO_Init+0xd0>)
 8000590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000592:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800059a:	2300      	movs	r3, #0
 800059c:	60bb      	str	r3, [r7, #8]
 800059e:	4b1f      	ldr	r3, [pc, #124]	; (800061c <MX_GPIO_Init+0xd0>)
 80005a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005a2:	4a1e      	ldr	r2, [pc, #120]	; (800061c <MX_GPIO_Init+0xd0>)
 80005a4:	f043 0301 	orr.w	r3, r3, #1
 80005a8:	6313      	str	r3, [r2, #48]	; 0x30
 80005aa:	4b1c      	ldr	r3, [pc, #112]	; (800061c <MX_GPIO_Init+0xd0>)
 80005ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ae:	f003 0301 	and.w	r3, r3, #1
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005b6:	2300      	movs	r3, #0
 80005b8:	607b      	str	r3, [r7, #4]
 80005ba:	4b18      	ldr	r3, [pc, #96]	; (800061c <MX_GPIO_Init+0xd0>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <MX_GPIO_Init+0xd0>)
 80005c0:	f043 0302 	orr.w	r3, r3, #2
 80005c4:	6313      	str	r3, [r2, #48]	; 0x30
 80005c6:	4b15      	ldr	r3, [pc, #84]	; (800061c <MX_GPIO_Init+0xd0>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ca:	f003 0302 	and.w	r3, r3, #2
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2120      	movs	r1, #32
 80005d6:	4812      	ldr	r0, [pc, #72]	; (8000620 <MX_GPIO_Init+0xd4>)
 80005d8:	f001 fa7a 	bl	8001ad0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80005dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80005e2:	4b10      	ldr	r3, [pc, #64]	; (8000624 <MX_GPIO_Init+0xd8>)
 80005e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80005ea:	f107 0314 	add.w	r3, r7, #20
 80005ee:	4619      	mov	r1, r3
 80005f0:	480d      	ldr	r0, [pc, #52]	; (8000628 <MX_GPIO_Init+0xdc>)
 80005f2:	f001 f8d9 	bl	80017a8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80005f6:	2320      	movs	r3, #32
 80005f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 0314 	add.w	r3, r7, #20
 800060a:	4619      	mov	r1, r3
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_GPIO_Init+0xd4>)
 800060e:	f001 f8cb 	bl	80017a8 <HAL_GPIO_Init>

}
 8000612:	bf00      	nop
 8000614:	3728      	adds	r7, #40	; 0x28
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40023800 	.word	0x40023800
 8000620:	40020000 	.word	0x40020000
 8000624:	10210000 	.word	0x10210000
 8000628:	40020800 	.word	0x40020800

0800062c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000630:	f000 fbba 	bl	8000da8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000634:	f000 f812 	bl	800065c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000638:	f7ff ff88 	bl	800054c <MX_GPIO_Init>
  MX_DMA_Init();
 800063c:	f7ff ff5e 	bl	80004fc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000640:	f000 fadc 	bl	8000bfc <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000644:	f000 f9e8 	bl	8000a18 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2); ///habilita o timer 2
 8000648:	4803      	ldr	r0, [pc, #12]	; (8000658 <main+0x2c>)
 800064a:	f002 f815 	bl	8002678 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); ///Habilita o Input Capture com Interrupção do Timer2 → PA0 → canal 1
 800064e:	2100      	movs	r1, #0
 8000650:	4801      	ldr	r0, [pc, #4]	; (8000658 <main+0x2c>)
 8000652:	f002 f8d3 	bl	80027fc <HAL_TIM_IC_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000656:	e7fe      	b.n	8000656 <main+0x2a>
 8000658:	200000c8 	.word	0x200000c8

0800065c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b094      	sub	sp, #80	; 0x50
 8000660:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000662:	f107 031c 	add.w	r3, r7, #28
 8000666:	2234      	movs	r2, #52	; 0x34
 8000668:	2100      	movs	r1, #0
 800066a:	4618      	mov	r0, r3
 800066c:	f003 fcd0 	bl	8004010 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000670:	f107 0308 	add.w	r3, r7, #8
 8000674:	2200      	movs	r2, #0
 8000676:	601a      	str	r2, [r3, #0]
 8000678:	605a      	str	r2, [r3, #4]
 800067a:	609a      	str	r2, [r3, #8]
 800067c:	60da      	str	r2, [r3, #12]
 800067e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000680:	2300      	movs	r3, #0
 8000682:	607b      	str	r3, [r7, #4]
 8000684:	4b2a      	ldr	r3, [pc, #168]	; (8000730 <SystemClock_Config+0xd4>)
 8000686:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000688:	4a29      	ldr	r2, [pc, #164]	; (8000730 <SystemClock_Config+0xd4>)
 800068a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800068e:	6413      	str	r3, [r2, #64]	; 0x40
 8000690:	4b27      	ldr	r3, [pc, #156]	; (8000730 <SystemClock_Config+0xd4>)
 8000692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800069c:	2300      	movs	r3, #0
 800069e:	603b      	str	r3, [r7, #0]
 80006a0:	4b24      	ldr	r3, [pc, #144]	; (8000734 <SystemClock_Config+0xd8>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006a8:	4a22      	ldr	r2, [pc, #136]	; (8000734 <SystemClock_Config+0xd8>)
 80006aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b20      	ldr	r3, [pc, #128]	; (8000734 <SystemClock_Config+0xd8>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	603b      	str	r3, [r7, #0]
 80006ba:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d0:	2310      	movs	r3, #16
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006d8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006da:	2304      	movs	r3, #4
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006de:	2302      	movs	r3, #2
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006e2:	2302      	movs	r3, #2
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 031c 	add.w	r3, r7, #28
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fcd6 	bl	800209c <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80006f6:	f000 f8fd 	bl	80008f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000710:	f107 0308 	add.w	r3, r7, #8
 8000714:	2102      	movs	r1, #2
 8000716:	4618      	mov	r0, r3
 8000718:	f001 f9f4 	bl	8001b04 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000722:	f000 f8e7 	bl	80008f4 <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000738:	b580      	push	{r7, lr}
 800073a:	b082      	sub	sp, #8
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
	uint64_t calc(long a, long b, long c, long ARR); //Declarando a função calc

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ ///interrupção do canal 1 do timer 3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	7f1b      	ldrb	r3, [r3, #28]
 8000744:	2b01      	cmp	r3, #1
 8000746:	d162      	bne.n	800080e <HAL_TIM_IC_CaptureCallback+0xd6>
		if (initVal == -1) { ///se initVal estiver com seu valor inicial, que é -1
 8000748:	4b33      	ldr	r3, [pc, #204]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800074a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800074e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000752:	bf08      	it	eq
 8000754:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000758:	d109      	bne.n	800076e <HAL_TIM_IC_CaptureCallback+0x36>
			initVal = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1); ///com o estouro, salva o valor que estava no contador
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000760:	461a      	mov	r2, r3
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	492c      	ldr	r1, [pc, #176]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000768:	e9c1 2300 	strd	r2, r3, [r1]
				valE = 0; ///valE volta ao seu valor inicial
				flag = 0;
			}
		}
	}
}
 800076c:	e04f      	b.n	800080e <HAL_TIM_IC_CaptureCallback+0xd6>
			if(flag == 0){
 800076e:	4b2b      	ldr	r3, [pc, #172]	; (800081c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000770:	781b      	ldrb	r3, [r3, #0]
 8000772:	2b00      	cmp	r3, #0
 8000774:	d11f      	bne.n	80007b6 <HAL_TIM_IC_CaptureCallback+0x7e>
				bordaM = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1); ///salva o valor que está agora
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800077c:	461a      	mov	r2, r3
 800077e:	f04f 0300 	mov.w	r3, #0
 8000782:	4927      	ldr	r1, [pc, #156]	; (8000820 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000784:	e9c1 2300 	strd	r2, r3, [r1]
				periodoI = calc(initVal, bordaM, valE, 999999); ///calcula o periodo utilizando a função criada calc
 8000788:	4b23      	ldr	r3, [pc, #140]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800078a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800078e:	4610      	mov	r0, r2
 8000790:	4b23      	ldr	r3, [pc, #140]	; (8000820 <HAL_TIM_IC_CaptureCallback+0xe8>)
 8000792:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000796:	4611      	mov	r1, r2
 8000798:	4b22      	ldr	r3, [pc, #136]	; (8000824 <HAL_TIM_IC_CaptureCallback+0xec>)
 800079a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800079e:	4b22      	ldr	r3, [pc, #136]	; (8000828 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80007a0:	f000 f84a 	bl	8000838 <calc>
 80007a4:	4602      	mov	r2, r0
 80007a6:	460b      	mov	r3, r1
 80007a8:	4920      	ldr	r1, [pc, #128]	; (800082c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80007aa:	e9c1 2300 	strd	r2, r3, [r1]
				flag = 1;
 80007ae:	4b1b      	ldr	r3, [pc, #108]	; (800081c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80007b0:	2201      	movs	r2, #1
 80007b2:	701a      	strb	r2, [r3, #0]
}
 80007b4:	e02b      	b.n	800080e <HAL_TIM_IC_CaptureCallback+0xd6>
				valI = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1); ///salva o valor que está agora
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	681b      	ldr	r3, [r3, #0]
 80007ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80007bc:	461a      	mov	r2, r3
 80007be:	f04f 0300 	mov.w	r3, #0
 80007c2:	491b      	ldr	r1, [pc, #108]	; (8000830 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80007c4:	e9c1 2300 	strd	r2, r3, [r1]
				periodo = calc(initVal, valI, valE, 999999); ///calcula o periodo utilizando a função criada calc
 80007c8:	4b13      	ldr	r3, [pc, #76]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80007ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007ce:	4610      	mov	r0, r2
 80007d0:	4b17      	ldr	r3, [pc, #92]	; (8000830 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80007d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007d6:	4611      	mov	r1, r2
 80007d8:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_TIM_IC_CaptureCallback+0xec>)
 80007da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007de:	4b12      	ldr	r3, [pc, #72]	; (8000828 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80007e0:	f000 f82a 	bl	8000838 <calc>
 80007e4:	4602      	mov	r2, r0
 80007e6:	460b      	mov	r3, r1
 80007e8:	4912      	ldr	r1, [pc, #72]	; (8000834 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80007ea:	e9c1 2300 	strd	r2, r3, [r1]
				initVal = valI; ///initVal volta ao seu valor
 80007ee:	4b10      	ldr	r3, [pc, #64]	; (8000830 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80007f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80007f4:	4908      	ldr	r1, [pc, #32]	; (8000818 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80007f6:	e9c1 2300 	strd	r2, r3, [r1]
				valE = 0; ///valE volta ao seu valor inicial
 80007fa:	490a      	ldr	r1, [pc, #40]	; (8000824 <HAL_TIM_IC_CaptureCallback+0xec>)
 80007fc:	f04f 0200 	mov.w	r2, #0
 8000800:	f04f 0300 	mov.w	r3, #0
 8000804:	e9c1 2300 	strd	r2, r3, [r1]
				flag = 0;
 8000808:	4b04      	ldr	r3, [pc, #16]	; (800081c <HAL_TIM_IC_CaptureCallback+0xe4>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]
}
 800080e:	bf00      	nop
 8000810:	3708      	adds	r7, #8
 8000812:	46bd      	mov	sp, r7
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000000 	.word	0x20000000
 800081c:	20000050 	.word	0x20000050
 8000820:	20000038 	.word	0x20000038
 8000824:	20000048 	.word	0x20000048
 8000828:	000f423f 	.word	0x000f423f
 800082c:	20000060 	.word	0x20000060
 8000830:	20000040 	.word	0x20000040
 8000834:	20000058 	.word	0x20000058

08000838 <calc>:

/**
 * @brief Função que faz o cálculo do periodo desejado
 */
uint64_t calc(long a, long b, long c, long ARR){ ///entra-se com 4 valores para fazer o cálculo, que vão ser os valores de initVal, valI, valE e ARR_CL
 8000838:	b480      	push	{r7}
 800083a:	b087      	sub	sp, #28
 800083c:	af00      	add	r7, sp, #0
 800083e:	60f8      	str	r0, [r7, #12]
 8000840:	60b9      	str	r1, [r7, #8]
 8000842:	607a      	str	r2, [r7, #4]
 8000844:	603b      	str	r3, [r7, #0]
	uint64_t period;
	if(c > 0) ///se o número de períodos medidos durante a medição for 1 ou mais
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	2b00      	cmp	r3, #0
 800084a:	dd20      	ble.n	800088e <calc+0x56>
	{
		if(c > 1) ///se o número de períodos medidos durante a medição for mais que 1
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	2b01      	cmp	r3, #1
 8000850:	dd12      	ble.n	8000878 <calc+0x40>
		{
			c--;    ///ignorando o final do primeiro periodo
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	3b01      	subs	r3, #1
 8000856:	607b      	str	r3, [r7, #4]
			period = (ARR - a + b) + (ARR) * c; /// se entre o valor inicial e o valor final (Internal) houverem periodos completos do timer3
 8000858:	683a      	ldr	r2, [r7, #0]
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	1ad2      	subs	r2, r2, r3
 800085e:	68bb      	ldr	r3, [r7, #8]
 8000860:	441a      	add	r2, r3
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	6879      	ldr	r1, [r7, #4]
 8000866:	fb01 f303 	mul.w	r3, r1, r3
 800086a:	4413      	add	r3, r2
 800086c:	461a      	mov	r2, r3
 800086e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000872:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000876:	e012      	b.n	800089e <calc+0x66>
			///ou seja, se tiver mais que um período, utiliza o mesmo cálculo só acrescenta a parte de multiplicar o valor do ARR pelo número de períodos a mais que teve
		}
		///se o número de períodos medidos durante a medição for 1
		else period = (ARR - a + b); /// se o valor inicial e o valor final (Internal) estiverem em periodos subsequentes do timer3
 8000878:	683a      	ldr	r2, [r7, #0]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	1ad2      	subs	r2, r2, r3
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	461a      	mov	r2, r3
 8000884:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8000888:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800088c:	e007      	b.n	800089e <calc+0x66>
		///ou seja, se houver passado somente um período
	}
	///se o número de períodos medidos durante a medição não completar 1 inteiro
	else period = b - a; /// se ainda estiver dentro do mesmo periodo do timer3, ou seja, não tiver passado um período completo
 800088e:	68ba      	ldr	r2, [r7, #8]
 8000890:	68fb      	ldr	r3, [r7, #12]
 8000892:	1ad3      	subs	r3, r2, r3
 8000894:	461a      	mov	r2, r3
 8000896:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800089a:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return period; /// a função retorna o valor do periodo calculado
 800089e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80008a2:	4610      	mov	r0, r2
 80008a4:	4619      	mov	r1, r3
 80008a6:	371c      	adds	r7, #28
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr

080008b0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ ///Interrupção do final do timer 10, ou seja, estouro do timer
 80008b0:	b4b0      	push	{r4, r5, r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM2) ///se a interrupção do timer 10 estourou
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80008c0:	d10f      	bne.n	80008e2 <HAL_TIM_PeriodElapsedCallback+0x32>
			if(initVal > -1) valE++; ///conta quantas vezes o timer estourou adicionando na variável valE
 80008c2:	4b0a      	ldr	r3, [pc, #40]	; (80008ec <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80008c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c8:	2a00      	cmp	r2, #0
 80008ca:	f173 0300 	sbcs.w	r3, r3, #0
 80008ce:	db08      	blt.n	80008e2 <HAL_TIM_PeriodElapsedCallback+0x32>
 80008d0:	4b07      	ldr	r3, [pc, #28]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008d6:	1c54      	adds	r4, r2, #1
 80008d8:	f143 0500 	adc.w	r5, r3, #0
 80008dc:	4b04      	ldr	r3, [pc, #16]	; (80008f0 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80008de:	e9c3 4500 	strd	r4, r5, [r3]
}
 80008e2:	bf00      	nop
 80008e4:	370c      	adds	r7, #12
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bcb0      	pop	{r4, r5, r7}
 80008ea:	4770      	bx	lr
 80008ec:	20000000 	.word	0x20000000
 80008f0:	20000048 	.word	0x20000048

080008f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008f8:	b672      	cpsid	i
}
 80008fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008fc:	e7fe      	b.n	80008fc <Error_Handler+0x8>
	...

08000900 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b10      	ldr	r3, [pc, #64]	; (800094c <HAL_MspInit+0x4c>)
 800090c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800090e:	4a0f      	ldr	r2, [pc, #60]	; (800094c <HAL_MspInit+0x4c>)
 8000910:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000914:	6453      	str	r3, [r2, #68]	; 0x44
 8000916:	4b0d      	ldr	r3, [pc, #52]	; (800094c <HAL_MspInit+0x4c>)
 8000918:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800091a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	603b      	str	r3, [r7, #0]
 8000926:	4b09      	ldr	r3, [pc, #36]	; (800094c <HAL_MspInit+0x4c>)
 8000928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800092a:	4a08      	ldr	r2, [pc, #32]	; (800094c <HAL_MspInit+0x4c>)
 800092c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000930:	6413      	str	r3, [r2, #64]	; 0x40
 8000932:	4b06      	ldr	r3, [pc, #24]	; (800094c <HAL_MspInit+0x4c>)
 8000934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000936:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800093a:	603b      	str	r3, [r7, #0]
 800093c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800093e:	2007      	movs	r0, #7
 8000940:	f000 fb74 	bl	800102c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000944:	bf00      	nop
 8000946:	3708      	adds	r7, #8
 8000948:	46bd      	mov	sp, r7
 800094a:	bd80      	pop	{r7, pc}
 800094c:	40023800 	.word	0x40023800

08000950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000950:	b480      	push	{r7}
 8000952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000954:	e7fe      	b.n	8000954 <NMI_Handler+0x4>

08000956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000956:	b480      	push	{r7}
 8000958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800095a:	e7fe      	b.n	800095a <HardFault_Handler+0x4>

0800095c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800095c:	b480      	push	{r7}
 800095e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000960:	e7fe      	b.n	8000960 <MemManage_Handler+0x4>

08000962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000962:	b480      	push	{r7}
 8000964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000966:	e7fe      	b.n	8000966 <BusFault_Handler+0x4>

08000968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800096c:	e7fe      	b.n	800096c <UsageFault_Handler+0x4>

0800096e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800096e:	b480      	push	{r7}
 8000970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000972:	bf00      	nop
 8000974:	46bd      	mov	sp, r7
 8000976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097a:	4770      	bx	lr

0800097c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000980:	bf00      	nop
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr

0800098a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800098a:	b480      	push	{r7}
 800098c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800098e:	bf00      	nop
 8000990:	46bd      	mov	sp, r7
 8000992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000996:	4770      	bx	lr

08000998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800099c:	f000 fa56 	bl	8000e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	bd80      	pop	{r7, pc}

080009a4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 80009a8:	4802      	ldr	r0, [pc, #8]	; (80009b4 <DMA1_Stream5_IRQHandler+0x10>)
 80009aa:	f000 fcc1 	bl	8001330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	bd80      	pop	{r7, pc}
 80009b2:	bf00      	nop
 80009b4:	20000068 	.word	0x20000068

080009b8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80009bc:	4802      	ldr	r0, [pc, #8]	; (80009c8 <DMA1_Stream6_IRQHandler+0x10>)
 80009be:	f000 fcb7 	bl	8001330 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	20000110 	.word	0x20000110

080009cc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80009d0:	4802      	ldr	r0, [pc, #8]	; (80009dc <TIM2_IRQHandler+0x10>)
 80009d2:	f002 f835 	bl	8002a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80009d6:	bf00      	nop
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	bf00      	nop
 80009dc:	200000c8 	.word	0x200000c8

080009e0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009e4:	4802      	ldr	r0, [pc, #8]	; (80009f0 <USART2_IRQHandler+0x10>)
 80009e6:	f002 fe11 	bl	800360c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009ea:	bf00      	nop
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	20000170 	.word	0x20000170

080009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009f4:	b480      	push	{r7}
 80009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009f8:	4b06      	ldr	r3, [pc, #24]	; (8000a14 <SystemInit+0x20>)
 80009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009fe:	4a05      	ldr	r2, [pc, #20]	; (8000a14 <SystemInit+0x20>)
 8000a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000a08:	bf00      	nop
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a10:	4770      	bx	lr
 8000a12:	bf00      	nop
 8000a14:	e000ed00 	.word	0xe000ed00

08000a18 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b08a      	sub	sp, #40	; 0x28
 8000a1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a1e:	f107 0318 	add.w	r3, r7, #24
 8000a22:	2200      	movs	r2, #0
 8000a24:	601a      	str	r2, [r3, #0]
 8000a26:	605a      	str	r2, [r3, #4]
 8000a28:	609a      	str	r2, [r3, #8]
 8000a2a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a2c:	f107 0310 	add.w	r3, r7, #16
 8000a30:	2200      	movs	r2, #0
 8000a32:	601a      	str	r2, [r3, #0]
 8000a34:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a36:	463b      	mov	r3, r7
 8000a38:	2200      	movs	r2, #0
 8000a3a:	601a      	str	r2, [r3, #0]
 8000a3c:	605a      	str	r2, [r3, #4]
 8000a3e:	609a      	str	r2, [r3, #8]
 8000a40:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a42:	4b2b      	ldr	r3, [pc, #172]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000a44:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000a48:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000a4a:	4b29      	ldr	r3, [pc, #164]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000a4c:	2253      	movs	r2, #83	; 0x53
 8000a4e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a50:	4b27      	ldr	r3, [pc, #156]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8000a56:	4b26      	ldr	r3, [pc, #152]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000a58:	4a26      	ldr	r2, [pc, #152]	; (8000af4 <MX_TIM2_Init+0xdc>)
 8000a5a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a5c:	4b24      	ldr	r3, [pc, #144]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000a5e:	2200      	movs	r2, #0
 8000a60:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a62:	4b23      	ldr	r3, [pc, #140]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000a64:	2200      	movs	r2, #0
 8000a66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000a68:	4821      	ldr	r0, [pc, #132]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000a6a:	f001 fdb5 	bl	80025d8 <HAL_TIM_Base_Init>
 8000a6e:	4603      	mov	r3, r0
 8000a70:	2b00      	cmp	r3, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8000a74:	f7ff ff3e 	bl	80008f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a7c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000a7e:	f107 0318 	add.w	r3, r7, #24
 8000a82:	4619      	mov	r1, r3
 8000a84:	481a      	ldr	r0, [pc, #104]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000a86:	f002 f977 	bl	8002d78 <HAL_TIM_ConfigClockSource>
 8000a8a:	4603      	mov	r3, r0
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	d001      	beq.n	8000a94 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000a90:	f7ff ff30 	bl	80008f4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000a94:	4816      	ldr	r0, [pc, #88]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000a96:	f001 fe57 	bl	8002748 <HAL_TIM_IC_Init>
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d001      	beq.n	8000aa4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000aa0:	f7ff ff28 	bl	80008f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000aac:	f107 0310 	add.w	r3, r7, #16
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	480f      	ldr	r0, [pc, #60]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000ab4:	f002 fccc 	bl	8003450 <HAL_TIMEx_MasterConfigSynchronization>
 8000ab8:	4603      	mov	r3, r0
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d001      	beq.n	8000ac2 <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000abe:	f7ff ff19 	bl	80008f4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000ac2:	230a      	movs	r3, #10
 8000ac4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ac6:	2301      	movs	r3, #1
 8000ac8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000ad2:	463b      	mov	r3, r7
 8000ad4:	2200      	movs	r2, #0
 8000ad6:	4619      	mov	r1, r3
 8000ad8:	4805      	ldr	r0, [pc, #20]	; (8000af0 <MX_TIM2_Init+0xd8>)
 8000ada:	f002 f8b9 	bl	8002c50 <HAL_TIM_IC_ConfigChannel>
 8000ade:	4603      	mov	r3, r0
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d001      	beq.n	8000ae8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000ae4:	f7ff ff06 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ae8:	bf00      	nop
 8000aea:	3728      	adds	r7, #40	; 0x28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	200000c8 	.word	0x200000c8
 8000af4:	000f423f 	.word	0x000f423f

08000af8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b08a      	sub	sp, #40	; 0x28
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b00:	f107 0314 	add.w	r3, r7, #20
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b18:	d163      	bne.n	8000be2 <HAL_TIM_Base_MspInit+0xea>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	4b33      	ldr	r3, [pc, #204]	; (8000bec <HAL_TIM_Base_MspInit+0xf4>)
 8000b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b22:	4a32      	ldr	r2, [pc, #200]	; (8000bec <HAL_TIM_Base_MspInit+0xf4>)
 8000b24:	f043 0301 	orr.w	r3, r3, #1
 8000b28:	6413      	str	r3, [r2, #64]	; 0x40
 8000b2a:	4b30      	ldr	r3, [pc, #192]	; (8000bec <HAL_TIM_Base_MspInit+0xf4>)
 8000b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2e:	f003 0301 	and.w	r3, r3, #1
 8000b32:	613b      	str	r3, [r7, #16]
 8000b34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	4b2c      	ldr	r3, [pc, #176]	; (8000bec <HAL_TIM_Base_MspInit+0xf4>)
 8000b3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b3e:	4a2b      	ldr	r2, [pc, #172]	; (8000bec <HAL_TIM_Base_MspInit+0xf4>)
 8000b40:	f043 0301 	orr.w	r3, r3, #1
 8000b44:	6313      	str	r3, [r2, #48]	; 0x30
 8000b46:	4b29      	ldr	r3, [pc, #164]	; (8000bec <HAL_TIM_Base_MspInit+0xf4>)
 8000b48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b4a:	f003 0301 	and.w	r3, r3, #1
 8000b4e:	60fb      	str	r3, [r7, #12]
 8000b50:	68fb      	ldr	r3, [r7, #12]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000b52:	2301      	movs	r3, #1
 8000b54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000b62:	2301      	movs	r3, #1
 8000b64:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b66:	f107 0314 	add.w	r3, r7, #20
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	4820      	ldr	r0, [pc, #128]	; (8000bf0 <HAL_TIM_Base_MspInit+0xf8>)
 8000b6e:	f000 fe1b 	bl	80017a8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000b74:	4a20      	ldr	r2, [pc, #128]	; (8000bf8 <HAL_TIM_Base_MspInit+0x100>)
 8000b76:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000b78:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000b7a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000b7e:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000b8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b92:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000b94:	4b17      	ldr	r3, [pc, #92]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000b96:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b9a:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000b9c:	4b15      	ldr	r3, [pc, #84]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000b9e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba2:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000baa:	4b12      	ldr	r3, [pc, #72]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000bb0:	4b10      	ldr	r3, [pc, #64]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000bb6:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000bb8:	f000 fa7a 	bl	80010b0 <HAL_DMA_Init>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 8000bc2:	f7ff fe97 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000bca:	625a      	str	r2, [r3, #36]	; 0x24
 8000bcc:	4a09      	ldr	r2, [pc, #36]	; (8000bf4 <HAL_TIM_Base_MspInit+0xfc>)
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	2100      	movs	r1, #0
 8000bd6:	201c      	movs	r0, #28
 8000bd8:	f000 fa33 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000bdc:	201c      	movs	r0, #28
 8000bde:	f000 fa4c 	bl	800107a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000be2:	bf00      	nop
 8000be4:	3728      	adds	r7, #40	; 0x28
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40023800 	.word	0x40023800
 8000bf0:	40020000 	.word	0x40020000
 8000bf4:	20000068 	.word	0x20000068
 8000bf8:	40026088 	.word	0x40026088

08000bfc <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000c00:	4b11      	ldr	r3, [pc, #68]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c02:	4a12      	ldr	r2, [pc, #72]	; (8000c4c <MX_USART2_UART_Init+0x50>)
 8000c04:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000c06:	4b10      	ldr	r3, [pc, #64]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000c0c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000c0e:	4b0e      	ldr	r3, [pc, #56]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000c14:	4b0c      	ldr	r3, [pc, #48]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c16:	2200      	movs	r2, #0
 8000c18:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000c1a:	4b0b      	ldr	r3, [pc, #44]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000c20:	4b09      	ldr	r3, [pc, #36]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c22:	220c      	movs	r2, #12
 8000c24:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c26:	4b08      	ldr	r3, [pc, #32]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c2c:	4b06      	ldr	r3, [pc, #24]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000c32:	4805      	ldr	r0, [pc, #20]	; (8000c48 <MX_USART2_UART_Init+0x4c>)
 8000c34:	f002 fc9c 	bl	8003570 <HAL_UART_Init>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d001      	beq.n	8000c42 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000c3e:	f7ff fe59 	bl	80008f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}
 8000c46:	bf00      	nop
 8000c48:	20000170 	.word	0x20000170
 8000c4c:	40004400 	.word	0x40004400

08000c50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b08a      	sub	sp, #40	; 0x28
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c58:	f107 0314 	add.w	r3, r7, #20
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	601a      	str	r2, [r3, #0]
 8000c60:	605a      	str	r2, [r3, #4]
 8000c62:	609a      	str	r2, [r3, #8]
 8000c64:	60da      	str	r2, [r3, #12]
 8000c66:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000c68:	687b      	ldr	r3, [r7, #4]
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	4a34      	ldr	r2, [pc, #208]	; (8000d40 <HAL_UART_MspInit+0xf0>)
 8000c6e:	4293      	cmp	r3, r2
 8000c70:	d161      	bne.n	8000d36 <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c72:	2300      	movs	r3, #0
 8000c74:	613b      	str	r3, [r7, #16]
 8000c76:	4b33      	ldr	r3, [pc, #204]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7a:	4a32      	ldr	r2, [pc, #200]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c80:	6413      	str	r3, [r2, #64]	; 0x40
 8000c82:	4b30      	ldr	r3, [pc, #192]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c8a:	613b      	str	r3, [r7, #16]
 8000c8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c8e:	2300      	movs	r3, #0
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	4a2b      	ldr	r2, [pc, #172]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000c98:	f043 0301 	orr.w	r3, r3, #1
 8000c9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <HAL_UART_MspInit+0xf4>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	f003 0301 	and.w	r3, r3, #1
 8000ca6:	60fb      	str	r3, [r7, #12]
 8000ca8:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000caa:	230c      	movs	r3, #12
 8000cac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cae:	2302      	movs	r3, #2
 8000cb0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cb2:	2300      	movs	r3, #0
 8000cb4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cb6:	2303      	movs	r3, #3
 8000cb8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000cba:	2307      	movs	r3, #7
 8000cbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cbe:	f107 0314 	add.w	r3, r7, #20
 8000cc2:	4619      	mov	r1, r3
 8000cc4:	4820      	ldr	r0, [pc, #128]	; (8000d48 <HAL_UART_MspInit+0xf8>)
 8000cc6:	f000 fd6f 	bl	80017a8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8000cca:	4b20      	ldr	r3, [pc, #128]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000ccc:	4a20      	ldr	r2, [pc, #128]	; (8000d50 <HAL_UART_MspInit+0x100>)
 8000cce:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8000cd0:	4b1e      	ldr	r3, [pc, #120]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cd2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000cd6:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000cd8:	4b1c      	ldr	r3, [pc, #112]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cda:	2240      	movs	r2, #64	; 0x40
 8000cdc:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000ce6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000cea:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000cec:	4b17      	ldr	r3, [pc, #92]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8000cf8:	4b14      	ldr	r3, [pc, #80]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000cfe:	4b13      	ldr	r3, [pc, #76]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d00:	2200      	movs	r2, #0
 8000d02:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d06:	2200      	movs	r2, #0
 8000d08:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8000d0a:	4810      	ldr	r0, [pc, #64]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d0c:	f000 f9d0 	bl	80010b0 <HAL_DMA_Init>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 8000d16:	f7ff fded 	bl	80008f4 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	4a0b      	ldr	r2, [pc, #44]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
 8000d20:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <HAL_UART_MspInit+0xfc>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000d26:	2200      	movs	r2, #0
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2026      	movs	r0, #38	; 0x26
 8000d2c:	f000 f989 	bl	8001042 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000d30:	2026      	movs	r0, #38	; 0x26
 8000d32:	f000 f9a2 	bl	800107a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000d36:	bf00      	nop
 8000d38:	3728      	adds	r7, #40	; 0x28
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	40004400 	.word	0x40004400
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	20000110 	.word	0x20000110
 8000d50:	400260a0 	.word	0x400260a0

08000d54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000d54:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d8c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000d58:	480d      	ldr	r0, [pc, #52]	; (8000d90 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000d5a:	490e      	ldr	r1, [pc, #56]	; (8000d94 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000d5c:	4a0e      	ldr	r2, [pc, #56]	; (8000d98 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d5e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d60:	e002      	b.n	8000d68 <LoopCopyDataInit>

08000d62 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d62:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d64:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d66:	3304      	adds	r3, #4

08000d68 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d68:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d6a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d6c:	d3f9      	bcc.n	8000d62 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6e:	4a0b      	ldr	r2, [pc, #44]	; (8000d9c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000d70:	4c0b      	ldr	r4, [pc, #44]	; (8000da0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000d72:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d74:	e001      	b.n	8000d7a <LoopFillZerobss>

08000d76 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d76:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d78:	3204      	adds	r2, #4

08000d7a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d7a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d7c:	d3fb      	bcc.n	8000d76 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000d7e:	f7ff fe39 	bl	80009f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d82:	f003 f921 	bl	8003fc8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d86:	f7ff fc51 	bl	800062c <main>
  bx  lr    
 8000d8a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d94:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8000d98:	08004068 	.word	0x08004068
  ldr r2, =_sbss
 8000d9c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8000da0:	200001b8 	.word	0x200001b8

08000da4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000da4:	e7fe      	b.n	8000da4 <ADC_IRQHandler>
	...

08000da8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000dac:	4b0e      	ldr	r3, [pc, #56]	; (8000de8 <HAL_Init+0x40>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	4a0d      	ldr	r2, [pc, #52]	; (8000de8 <HAL_Init+0x40>)
 8000db2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000db6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000db8:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_Init+0x40>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	4a0a      	ldr	r2, [pc, #40]	; (8000de8 <HAL_Init+0x40>)
 8000dbe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000dc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dc4:	4b08      	ldr	r3, [pc, #32]	; (8000de8 <HAL_Init+0x40>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	4a07      	ldr	r2, [pc, #28]	; (8000de8 <HAL_Init+0x40>)
 8000dca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000dce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dd0:	2003      	movs	r0, #3
 8000dd2:	f000 f92b 	bl	800102c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000dd6:	2000      	movs	r0, #0
 8000dd8:	f000 f808 	bl	8000dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ddc:	f7ff fd90 	bl	8000900 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000de0:	2300      	movs	r3, #0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	40023c00 	.word	0x40023c00

08000dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000df4:	4b12      	ldr	r3, [pc, #72]	; (8000e40 <HAL_InitTick+0x54>)
 8000df6:	681a      	ldr	r2, [r3, #0]
 8000df8:	4b12      	ldr	r3, [pc, #72]	; (8000e44 <HAL_InitTick+0x58>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	f000 f943 	bl	8001096 <HAL_SYSTICK_Config>
 8000e10:	4603      	mov	r3, r0
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d001      	beq.n	8000e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e16:	2301      	movs	r3, #1
 8000e18:	e00e      	b.n	8000e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b0f      	cmp	r3, #15
 8000e1e:	d80a      	bhi.n	8000e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e20:	2200      	movs	r2, #0
 8000e22:	6879      	ldr	r1, [r7, #4]
 8000e24:	f04f 30ff 	mov.w	r0, #4294967295
 8000e28:	f000 f90b 	bl	8001042 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e2c:	4a06      	ldr	r2, [pc, #24]	; (8000e48 <HAL_InitTick+0x5c>)
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
 8000e34:	e000      	b.n	8000e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e36:	2301      	movs	r3, #1
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	3708      	adds	r7, #8
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	20000008 	.word	0x20000008
 8000e44:	20000010 	.word	0x20000010
 8000e48:	2000000c 	.word	0x2000000c

08000e4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e50:	4b06      	ldr	r3, [pc, #24]	; (8000e6c <HAL_IncTick+0x20>)
 8000e52:	781b      	ldrb	r3, [r3, #0]
 8000e54:	461a      	mov	r2, r3
 8000e56:	4b06      	ldr	r3, [pc, #24]	; (8000e70 <HAL_IncTick+0x24>)
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4a04      	ldr	r2, [pc, #16]	; (8000e70 <HAL_IncTick+0x24>)
 8000e5e:	6013      	str	r3, [r2, #0]
}
 8000e60:	bf00      	nop
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	20000010 	.word	0x20000010
 8000e70:	200001b4 	.word	0x200001b4

08000e74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  return uwTick;
 8000e78:	4b03      	ldr	r3, [pc, #12]	; (8000e88 <HAL_GetTick+0x14>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e84:	4770      	bx	lr
 8000e86:	bf00      	nop
 8000e88:	200001b4 	.word	0x200001b4

08000e8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b085      	sub	sp, #20
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	f003 0307 	and.w	r3, r3, #7
 8000e9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e9c:	4b0c      	ldr	r3, [pc, #48]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e9e:	68db      	ldr	r3, [r3, #12]
 8000ea0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ea2:	68ba      	ldr	r2, [r7, #8]
 8000ea4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eac:	68fb      	ldr	r3, [r7, #12]
 8000eae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000eb0:	68bb      	ldr	r3, [r7, #8]
 8000eb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000eb4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000eb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ebc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ebe:	4a04      	ldr	r2, [pc, #16]	; (8000ed0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ec0:	68bb      	ldr	r3, [r7, #8]
 8000ec2:	60d3      	str	r3, [r2, #12]
}
 8000ec4:	bf00      	nop
 8000ec6:	3714      	adds	r7, #20
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ed8:	4b04      	ldr	r3, [pc, #16]	; (8000eec <__NVIC_GetPriorityGrouping+0x18>)
 8000eda:	68db      	ldr	r3, [r3, #12]
 8000edc:	0a1b      	lsrs	r3, r3, #8
 8000ede:	f003 0307 	and.w	r3, r3, #7
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000efa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	db0b      	blt.n	8000f1a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f02:	79fb      	ldrb	r3, [r7, #7]
 8000f04:	f003 021f 	and.w	r2, r3, #31
 8000f08:	4907      	ldr	r1, [pc, #28]	; (8000f28 <__NVIC_EnableIRQ+0x38>)
 8000f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0e:	095b      	lsrs	r3, r3, #5
 8000f10:	2001      	movs	r0, #1
 8000f12:	fa00 f202 	lsl.w	r2, r0, r2
 8000f16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f1a:	bf00      	nop
 8000f1c:	370c      	adds	r7, #12
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr
 8000f26:	bf00      	nop
 8000f28:	e000e100 	.word	0xe000e100

08000f2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	6039      	str	r1, [r7, #0]
 8000f36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	db0a      	blt.n	8000f56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	b2da      	uxtb	r2, r3
 8000f44:	490c      	ldr	r1, [pc, #48]	; (8000f78 <__NVIC_SetPriority+0x4c>)
 8000f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f4a:	0112      	lsls	r2, r2, #4
 8000f4c:	b2d2      	uxtb	r2, r2
 8000f4e:	440b      	add	r3, r1
 8000f50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f54:	e00a      	b.n	8000f6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	b2da      	uxtb	r2, r3
 8000f5a:	4908      	ldr	r1, [pc, #32]	; (8000f7c <__NVIC_SetPriority+0x50>)
 8000f5c:	79fb      	ldrb	r3, [r7, #7]
 8000f5e:	f003 030f 	and.w	r3, r3, #15
 8000f62:	3b04      	subs	r3, #4
 8000f64:	0112      	lsls	r2, r2, #4
 8000f66:	b2d2      	uxtb	r2, r2
 8000f68:	440b      	add	r3, r1
 8000f6a:	761a      	strb	r2, [r3, #24]
}
 8000f6c:	bf00      	nop
 8000f6e:	370c      	adds	r7, #12
 8000f70:	46bd      	mov	sp, r7
 8000f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f76:	4770      	bx	lr
 8000f78:	e000e100 	.word	0xe000e100
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f80:	b480      	push	{r7}
 8000f82:	b089      	sub	sp, #36	; 0x24
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	60f8      	str	r0, [r7, #12]
 8000f88:	60b9      	str	r1, [r7, #8]
 8000f8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	f003 0307 	and.w	r3, r3, #7
 8000f92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f94:	69fb      	ldr	r3, [r7, #28]
 8000f96:	f1c3 0307 	rsb	r3, r3, #7
 8000f9a:	2b04      	cmp	r3, #4
 8000f9c:	bf28      	it	cs
 8000f9e:	2304      	movcs	r3, #4
 8000fa0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fa2:	69fb      	ldr	r3, [r7, #28]
 8000fa4:	3304      	adds	r3, #4
 8000fa6:	2b06      	cmp	r3, #6
 8000fa8:	d902      	bls.n	8000fb0 <NVIC_EncodePriority+0x30>
 8000faa:	69fb      	ldr	r3, [r7, #28]
 8000fac:	3b03      	subs	r3, #3
 8000fae:	e000      	b.n	8000fb2 <NVIC_EncodePriority+0x32>
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fb4:	f04f 32ff 	mov.w	r2, #4294967295
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43da      	mvns	r2, r3
 8000fc0:	68bb      	ldr	r3, [r7, #8]
 8000fc2:	401a      	ands	r2, r3
 8000fc4:	697b      	ldr	r3, [r7, #20]
 8000fc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	fa01 f303 	lsl.w	r3, r1, r3
 8000fd2:	43d9      	mvns	r1, r3
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fd8:	4313      	orrs	r3, r2
         );
}
 8000fda:	4618      	mov	r0, r3
 8000fdc:	3724      	adds	r7, #36	; 0x24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ff8:	d301      	bcc.n	8000ffe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	e00f      	b.n	800101e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ffe:	4a0a      	ldr	r2, [pc, #40]	; (8001028 <SysTick_Config+0x40>)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	3b01      	subs	r3, #1
 8001004:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001006:	210f      	movs	r1, #15
 8001008:	f04f 30ff 	mov.w	r0, #4294967295
 800100c:	f7ff ff8e 	bl	8000f2c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001010:	4b05      	ldr	r3, [pc, #20]	; (8001028 <SysTick_Config+0x40>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001016:	4b04      	ldr	r3, [pc, #16]	; (8001028 <SysTick_Config+0x40>)
 8001018:	2207      	movs	r2, #7
 800101a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800101c:	2300      	movs	r3, #0
}
 800101e:	4618      	mov	r0, r3
 8001020:	3708      	adds	r7, #8
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	e000e010 	.word	0xe000e010

0800102c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	b082      	sub	sp, #8
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f7ff ff29 	bl	8000e8c <__NVIC_SetPriorityGrouping>
}
 800103a:	bf00      	nop
 800103c:	3708      	adds	r7, #8
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001042:	b580      	push	{r7, lr}
 8001044:	b086      	sub	sp, #24
 8001046:	af00      	add	r7, sp, #0
 8001048:	4603      	mov	r3, r0
 800104a:	60b9      	str	r1, [r7, #8]
 800104c:	607a      	str	r2, [r7, #4]
 800104e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001054:	f7ff ff3e 	bl	8000ed4 <__NVIC_GetPriorityGrouping>
 8001058:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800105a:	687a      	ldr	r2, [r7, #4]
 800105c:	68b9      	ldr	r1, [r7, #8]
 800105e:	6978      	ldr	r0, [r7, #20]
 8001060:	f7ff ff8e 	bl	8000f80 <NVIC_EncodePriority>
 8001064:	4602      	mov	r2, r0
 8001066:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800106a:	4611      	mov	r1, r2
 800106c:	4618      	mov	r0, r3
 800106e:	f7ff ff5d 	bl	8000f2c <__NVIC_SetPriority>
}
 8001072:	bf00      	nop
 8001074:	3718      	adds	r7, #24
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	4603      	mov	r3, r0
 8001082:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001084:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001088:	4618      	mov	r0, r3
 800108a:	f7ff ff31 	bl	8000ef0 <__NVIC_EnableIRQ>
}
 800108e:	bf00      	nop
 8001090:	3708      	adds	r7, #8
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}

08001096 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001096:	b580      	push	{r7, lr}
 8001098:	b082      	sub	sp, #8
 800109a:	af00      	add	r7, sp, #0
 800109c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800109e:	6878      	ldr	r0, [r7, #4]
 80010a0:	f7ff ffa2 	bl	8000fe8 <SysTick_Config>
 80010a4:	4603      	mov	r3, r0
}
 80010a6:	4618      	mov	r0, r3
 80010a8:	3708      	adds	r7, #8
 80010aa:	46bd      	mov	sp, r7
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b086      	sub	sp, #24
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80010b8:	2300      	movs	r3, #0
 80010ba:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80010bc:	f7ff feda 	bl	8000e74 <HAL_GetTick>
 80010c0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d101      	bne.n	80010cc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e099      	b.n	8001200 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	2200      	movs	r2, #0
 80010d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2202      	movs	r2, #2
 80010d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	681a      	ldr	r2, [r3, #0]
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f022 0201 	bic.w	r2, r2, #1
 80010ea:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80010ec:	e00f      	b.n	800110e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80010ee:	f7ff fec1 	bl	8000e74 <HAL_GetTick>
 80010f2:	4602      	mov	r2, r0
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	1ad3      	subs	r3, r2, r3
 80010f8:	2b05      	cmp	r3, #5
 80010fa:	d908      	bls.n	800110e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2220      	movs	r2, #32
 8001100:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	2203      	movs	r2, #3
 8001106:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800110a:	2303      	movs	r3, #3
 800110c:	e078      	b.n	8001200 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	f003 0301 	and.w	r3, r3, #1
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1e8      	bne.n	80010ee <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001124:	697a      	ldr	r2, [r7, #20]
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_DMA_Init+0x158>)
 8001128:	4013      	ands	r3, r2
 800112a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	685a      	ldr	r2, [r3, #4]
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800113a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	691b      	ldr	r3, [r3, #16]
 8001140:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001146:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001152:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	6a1b      	ldr	r3, [r3, #32]
 8001158:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	4313      	orrs	r3, r2
 800115e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001164:	2b04      	cmp	r3, #4
 8001166:	d107      	bne.n	8001178 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001170:	4313      	orrs	r3, r2
 8001172:	697a      	ldr	r2, [r7, #20]
 8001174:	4313      	orrs	r3, r2
 8001176:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	697a      	ldr	r2, [r7, #20]
 800117e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	695b      	ldr	r3, [r3, #20]
 8001186:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001188:	697b      	ldr	r3, [r7, #20]
 800118a:	f023 0307 	bic.w	r3, r3, #7
 800118e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001194:	697a      	ldr	r2, [r7, #20]
 8001196:	4313      	orrs	r3, r2
 8001198:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800119e:	2b04      	cmp	r3, #4
 80011a0:	d117      	bne.n	80011d2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80011a6:	697a      	ldr	r2, [r7, #20]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d00e      	beq.n	80011d2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 fa7b 	bl	80016b0 <DMA_CheckFifoParam>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d008      	beq.n	80011d2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2240      	movs	r2, #64	; 0x40
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2201      	movs	r2, #1
 80011ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80011ce:	2301      	movs	r3, #1
 80011d0:	e016      	b.n	8001200 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fa32 	bl	8001644 <DMA_CalcBaseAndBitshift>
 80011e0:	4603      	mov	r3, r0
 80011e2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011e8:	223f      	movs	r2, #63	; 0x3f
 80011ea:	409a      	lsls	r2, r3
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2200      	movs	r2, #0
 80011f4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2201      	movs	r2, #1
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80011fe:	2300      	movs	r3, #0
}
 8001200:	4618      	mov	r0, r3
 8001202:	3718      	adds	r7, #24
 8001204:	46bd      	mov	sp, r7
 8001206:	bd80      	pop	{r7, pc}
 8001208:	f010803f 	.word	0xf010803f

0800120c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001218:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800121a:	f7ff fe2b 	bl	8000e74 <HAL_GetTick>
 800121e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001226:	b2db      	uxtb	r3, r3
 8001228:	2b02      	cmp	r3, #2
 800122a:	d008      	beq.n	800123e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2280      	movs	r2, #128	; 0x80
 8001230:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e052      	b.n	80012e4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f022 0216 	bic.w	r2, r2, #22
 800124c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	695a      	ldr	r2, [r3, #20]
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800125c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001262:	2b00      	cmp	r3, #0
 8001264:	d103      	bne.n	800126e <HAL_DMA_Abort+0x62>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800126a:	2b00      	cmp	r3, #0
 800126c:	d007      	beq.n	800127e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	681a      	ldr	r2, [r3, #0]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 0208 	bic.w	r2, r2, #8
 800127c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f022 0201 	bic.w	r2, r2, #1
 800128c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800128e:	e013      	b.n	80012b8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001290:	f7ff fdf0 	bl	8000e74 <HAL_GetTick>
 8001294:	4602      	mov	r2, r0
 8001296:	68bb      	ldr	r3, [r7, #8]
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	2b05      	cmp	r3, #5
 800129c:	d90c      	bls.n	80012b8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2220      	movs	r2, #32
 80012a2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2200      	movs	r2, #0
 80012a8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	2203      	movs	r2, #3
 80012b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80012b4:	2303      	movs	r3, #3
 80012b6:	e015      	b.n	80012e4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f003 0301 	and.w	r3, r3, #1
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d1e4      	bne.n	8001290 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ca:	223f      	movs	r2, #63	; 0x3f
 80012cc:	409a      	lsls	r2, r3
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	2200      	movs	r2, #0
 80012d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	2201      	movs	r2, #1
 80012de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80012e2:	2300      	movs	r3, #0
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b083      	sub	sp, #12
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d004      	beq.n	800130a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001306:	2301      	movs	r3, #1
 8001308:	e00c      	b.n	8001324 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	2205      	movs	r2, #5
 800130e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	681a      	ldr	r2, [r3, #0]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f022 0201 	bic.w	r2, r2, #1
 8001320:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001322:	2300      	movs	r3, #0
}
 8001324:	4618      	mov	r0, r3
 8001326:	370c      	adds	r7, #12
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr

08001330 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800133c:	4b92      	ldr	r3, [pc, #584]	; (8001588 <HAL_DMA_IRQHandler+0x258>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a92      	ldr	r2, [pc, #584]	; (800158c <HAL_DMA_IRQHandler+0x25c>)
 8001342:	fba2 2303 	umull	r2, r3, r2, r3
 8001346:	0a9b      	lsrs	r3, r3, #10
 8001348:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001350:	693b      	ldr	r3, [r7, #16]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800135a:	2208      	movs	r2, #8
 800135c:	409a      	lsls	r2, r3
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	4013      	ands	r3, r2
 8001362:	2b00      	cmp	r3, #0
 8001364:	d01a      	beq.n	800139c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	f003 0304 	and.w	r3, r3, #4
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	681a      	ldr	r2, [r3, #0]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f022 0204 	bic.w	r2, r2, #4
 8001382:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001388:	2208      	movs	r2, #8
 800138a:	409a      	lsls	r2, r3
 800138c:	693b      	ldr	r3, [r7, #16]
 800138e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013a0:	2201      	movs	r2, #1
 80013a2:	409a      	lsls	r2, r3
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	4013      	ands	r3, r2
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d012      	beq.n	80013d2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	695b      	ldr	r3, [r3, #20]
 80013b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d00b      	beq.n	80013d2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013be:	2201      	movs	r2, #1
 80013c0:	409a      	lsls	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80013ca:	f043 0202 	orr.w	r2, r3, #2
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013d6:	2204      	movs	r2, #4
 80013d8:	409a      	lsls	r2, r3
 80013da:	68fb      	ldr	r3, [r7, #12]
 80013dc:	4013      	ands	r3, r2
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d012      	beq.n	8001408 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	f003 0302 	and.w	r3, r3, #2
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d00b      	beq.n	8001408 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013f4:	2204      	movs	r2, #4
 80013f6:	409a      	lsls	r2, r3
 80013f8:	693b      	ldr	r3, [r7, #16]
 80013fa:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001400:	f043 0204 	orr.w	r2, r3, #4
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800140c:	2210      	movs	r2, #16
 800140e:	409a      	lsls	r2, r3
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	4013      	ands	r3, r2
 8001414:	2b00      	cmp	r3, #0
 8001416:	d043      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	f003 0308 	and.w	r3, r3, #8
 8001422:	2b00      	cmp	r3, #0
 8001424:	d03c      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800142a:	2210      	movs	r2, #16
 800142c:	409a      	lsls	r2, r3
 800142e:	693b      	ldr	r3, [r7, #16]
 8001430:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d018      	beq.n	8001472 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800144a:	2b00      	cmp	r3, #0
 800144c:	d108      	bne.n	8001460 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001452:	2b00      	cmp	r3, #0
 8001454:	d024      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800145a:	6878      	ldr	r0, [r7, #4]
 800145c:	4798      	blx	r3
 800145e:	e01f      	b.n	80014a0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001464:	2b00      	cmp	r3, #0
 8001466:	d01b      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800146c:	6878      	ldr	r0, [r7, #4]
 800146e:	4798      	blx	r3
 8001470:	e016      	b.n	80014a0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800147c:	2b00      	cmp	r3, #0
 800147e:	d107      	bne.n	8001490 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f022 0208 	bic.w	r2, r2, #8
 800148e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014a4:	2220      	movs	r2, #32
 80014a6:	409a      	lsls	r2, r3
 80014a8:	68fb      	ldr	r3, [r7, #12]
 80014aa:	4013      	ands	r3, r2
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	f000 808e 	beq.w	80015ce <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0310 	and.w	r3, r3, #16
 80014bc:	2b00      	cmp	r3, #0
 80014be:	f000 8086 	beq.w	80015ce <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c6:	2220      	movs	r2, #32
 80014c8:	409a      	lsls	r2, r3
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80014d4:	b2db      	uxtb	r3, r3
 80014d6:	2b05      	cmp	r3, #5
 80014d8:	d136      	bne.n	8001548 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	681a      	ldr	r2, [r3, #0]
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f022 0216 	bic.w	r2, r2, #22
 80014e8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	695a      	ldr	r2, [r3, #20]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80014f8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d103      	bne.n	800150a <HAL_DMA_IRQHandler+0x1da>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001506:	2b00      	cmp	r3, #0
 8001508:	d007      	beq.n	800151a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	681a      	ldr	r2, [r3, #0]
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f022 0208 	bic.w	r2, r2, #8
 8001518:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800151e:	223f      	movs	r2, #63	; 0x3f
 8001520:	409a      	lsls	r2, r3
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	2201      	movs	r2, #1
 8001532:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800153a:	2b00      	cmp	r3, #0
 800153c:	d07d      	beq.n	800163a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	4798      	blx	r3
        }
        return;
 8001546:	e078      	b.n	800163a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001552:	2b00      	cmp	r3, #0
 8001554:	d01c      	beq.n	8001590 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001560:	2b00      	cmp	r3, #0
 8001562:	d108      	bne.n	8001576 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001568:	2b00      	cmp	r3, #0
 800156a:	d030      	beq.n	80015ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	4798      	blx	r3
 8001574:	e02b      	b.n	80015ce <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800157a:	2b00      	cmp	r3, #0
 800157c:	d027      	beq.n	80015ce <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	4798      	blx	r3
 8001586:	e022      	b.n	80015ce <HAL_DMA_IRQHandler+0x29e>
 8001588:	20000008 	.word	0x20000008
 800158c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10f      	bne.n	80015be <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	681a      	ldr	r2, [r3, #0]
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f022 0210 	bic.w	r2, r2, #16
 80015ac:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2201      	movs	r2, #1
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d032      	beq.n	800163c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015da:	f003 0301 	and.w	r3, r3, #1
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d022      	beq.n	8001628 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	2205      	movs	r2, #5
 80015e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	681a      	ldr	r2, [r3, #0]
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f022 0201 	bic.w	r2, r2, #1
 80015f8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	3301      	adds	r3, #1
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	429a      	cmp	r2, r3
 8001604:	d307      	bcc.n	8001616 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0301 	and.w	r3, r3, #1
 8001610:	2b00      	cmp	r3, #0
 8001612:	d1f2      	bne.n	80015fa <HAL_DMA_IRQHandler+0x2ca>
 8001614:	e000      	b.n	8001618 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001616:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2200      	movs	r2, #0
 800161c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	2201      	movs	r2, #1
 8001624:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800162c:	2b00      	cmp	r3, #0
 800162e:	d005      	beq.n	800163c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001634:	6878      	ldr	r0, [r7, #4]
 8001636:	4798      	blx	r3
 8001638:	e000      	b.n	800163c <HAL_DMA_IRQHandler+0x30c>
        return;
 800163a:	bf00      	nop
    }
  }
}
 800163c:	3718      	adds	r7, #24
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop

08001644 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001644:	b480      	push	{r7}
 8001646:	b085      	sub	sp, #20
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	b2db      	uxtb	r3, r3
 8001652:	3b10      	subs	r3, #16
 8001654:	4a14      	ldr	r2, [pc, #80]	; (80016a8 <DMA_CalcBaseAndBitshift+0x64>)
 8001656:	fba2 2303 	umull	r2, r3, r2, r3
 800165a:	091b      	lsrs	r3, r3, #4
 800165c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800165e:	4a13      	ldr	r2, [pc, #76]	; (80016ac <DMA_CalcBaseAndBitshift+0x68>)
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	461a      	mov	r2, r3
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2b03      	cmp	r3, #3
 8001670:	d909      	bls.n	8001686 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800167a:	f023 0303 	bic.w	r3, r3, #3
 800167e:	1d1a      	adds	r2, r3, #4
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	659a      	str	r2, [r3, #88]	; 0x58
 8001684:	e007      	b.n	8001696 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800168e:	f023 0303 	bic.w	r3, r3, #3
 8001692:	687a      	ldr	r2, [r7, #4]
 8001694:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800169a:	4618      	mov	r0, r3
 800169c:	3714      	adds	r7, #20
 800169e:	46bd      	mov	sp, r7
 80016a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a4:	4770      	bx	lr
 80016a6:	bf00      	nop
 80016a8:	aaaaaaab 	.word	0xaaaaaaab
 80016ac:	08004050 	.word	0x08004050

080016b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b085      	sub	sp, #20
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016b8:	2300      	movs	r3, #0
 80016ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	699b      	ldr	r3, [r3, #24]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d11f      	bne.n	800170a <DMA_CheckFifoParam+0x5a>
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d856      	bhi.n	800177e <DMA_CheckFifoParam+0xce>
 80016d0:	a201      	add	r2, pc, #4	; (adr r2, 80016d8 <DMA_CheckFifoParam+0x28>)
 80016d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016d6:	bf00      	nop
 80016d8:	080016e9 	.word	0x080016e9
 80016dc:	080016fb 	.word	0x080016fb
 80016e0:	080016e9 	.word	0x080016e9
 80016e4:	0800177f 	.word	0x0800177f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016ec:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d046      	beq.n	8001782 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80016f8:	e043      	b.n	8001782 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016fe:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001702:	d140      	bne.n	8001786 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001704:	2301      	movs	r3, #1
 8001706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001708:	e03d      	b.n	8001786 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	699b      	ldr	r3, [r3, #24]
 800170e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001712:	d121      	bne.n	8001758 <DMA_CheckFifoParam+0xa8>
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	2b03      	cmp	r3, #3
 8001718:	d837      	bhi.n	800178a <DMA_CheckFifoParam+0xda>
 800171a:	a201      	add	r2, pc, #4	; (adr r2, 8001720 <DMA_CheckFifoParam+0x70>)
 800171c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001720:	08001731 	.word	0x08001731
 8001724:	08001737 	.word	0x08001737
 8001728:	08001731 	.word	0x08001731
 800172c:	08001749 	.word	0x08001749
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001730:	2301      	movs	r3, #1
 8001732:	73fb      	strb	r3, [r7, #15]
      break;
 8001734:	e030      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800173a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800173e:	2b00      	cmp	r3, #0
 8001740:	d025      	beq.n	800178e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001742:	2301      	movs	r3, #1
 8001744:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001746:	e022      	b.n	800178e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800174c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001750:	d11f      	bne.n	8001792 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001752:	2301      	movs	r3, #1
 8001754:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001756:	e01c      	b.n	8001792 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	2b02      	cmp	r3, #2
 800175c:	d903      	bls.n	8001766 <DMA_CheckFifoParam+0xb6>
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2b03      	cmp	r3, #3
 8001762:	d003      	beq.n	800176c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001764:	e018      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001766:	2301      	movs	r3, #1
 8001768:	73fb      	strb	r3, [r7, #15]
      break;
 800176a:	e015      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001770:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001774:	2b00      	cmp	r3, #0
 8001776:	d00e      	beq.n	8001796 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001778:	2301      	movs	r3, #1
 800177a:	73fb      	strb	r3, [r7, #15]
      break;
 800177c:	e00b      	b.n	8001796 <DMA_CheckFifoParam+0xe6>
      break;
 800177e:	bf00      	nop
 8001780:	e00a      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 8001782:	bf00      	nop
 8001784:	e008      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 8001786:	bf00      	nop
 8001788:	e006      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 800178a:	bf00      	nop
 800178c:	e004      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 800178e:	bf00      	nop
 8001790:	e002      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;   
 8001792:	bf00      	nop
 8001794:	e000      	b.n	8001798 <DMA_CheckFifoParam+0xe8>
      break;
 8001796:	bf00      	nop
    }
  } 
  
  return status; 
 8001798:	7bfb      	ldrb	r3, [r7, #15]
}
 800179a:	4618      	mov	r0, r3
 800179c:	3714      	adds	r7, #20
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop

080017a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80017a8:	b480      	push	{r7}
 80017aa:	b089      	sub	sp, #36	; 0x24
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
 80017b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80017b2:	2300      	movs	r3, #0
 80017b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80017ba:	2300      	movs	r3, #0
 80017bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80017be:	2300      	movs	r3, #0
 80017c0:	61fb      	str	r3, [r7, #28]
 80017c2:	e165      	b.n	8001a90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80017c4:	2201      	movs	r2, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	697a      	ldr	r2, [r7, #20]
 80017d4:	4013      	ands	r3, r2
 80017d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	697b      	ldr	r3, [r7, #20]
 80017dc:	429a      	cmp	r2, r3
 80017de:	f040 8154 	bne.w	8001a8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017e2:	683b      	ldr	r3, [r7, #0]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	f003 0303 	and.w	r3, r3, #3
 80017ea:	2b01      	cmp	r3, #1
 80017ec:	d005      	beq.n	80017fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ee:	683b      	ldr	r3, [r7, #0]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d130      	bne.n	800185c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	689b      	ldr	r3, [r3, #8]
 80017fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	2203      	movs	r2, #3
 8001806:	fa02 f303 	lsl.w	r3, r2, r3
 800180a:	43db      	mvns	r3, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4013      	ands	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	68da      	ldr	r2, [r3, #12]
 8001816:	69fb      	ldr	r3, [r7, #28]
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	fa02 f303 	lsl.w	r3, r2, r3
 800181e:	69ba      	ldr	r2, [r7, #24]
 8001820:	4313      	orrs	r3, r2
 8001822:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	69ba      	ldr	r2, [r7, #24]
 8001828:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	685b      	ldr	r3, [r3, #4]
 800182e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001830:	2201      	movs	r2, #1
 8001832:	69fb      	ldr	r3, [r7, #28]
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	43db      	mvns	r3, r3
 800183a:	69ba      	ldr	r2, [r7, #24]
 800183c:	4013      	ands	r3, r2
 800183e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001840:	683b      	ldr	r3, [r7, #0]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	f003 0201 	and.w	r2, r3, #1
 800184a:	69fb      	ldr	r3, [r7, #28]
 800184c:	fa02 f303 	lsl.w	r3, r2, r3
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	4313      	orrs	r3, r2
 8001854:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	69ba      	ldr	r2, [r7, #24]
 800185a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	f003 0303 	and.w	r3, r3, #3
 8001864:	2b03      	cmp	r3, #3
 8001866:	d017      	beq.n	8001898 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	68db      	ldr	r3, [r3, #12]
 800186c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	689a      	ldr	r2, [r3, #8]
 8001884:	69fb      	ldr	r3, [r7, #28]
 8001886:	005b      	lsls	r3, r3, #1
 8001888:	fa02 f303 	lsl.w	r3, r2, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4313      	orrs	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	69ba      	ldr	r2, [r7, #24]
 8001896:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f003 0303 	and.w	r3, r3, #3
 80018a0:	2b02      	cmp	r3, #2
 80018a2:	d123      	bne.n	80018ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80018a4:	69fb      	ldr	r3, [r7, #28]
 80018a6:	08da      	lsrs	r2, r3, #3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	3208      	adds	r2, #8
 80018ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	009b      	lsls	r3, r3, #2
 80018ba:	220f      	movs	r2, #15
 80018bc:	fa02 f303 	lsl.w	r3, r2, r3
 80018c0:	43db      	mvns	r3, r3
 80018c2:	69ba      	ldr	r2, [r7, #24]
 80018c4:	4013      	ands	r3, r2
 80018c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	691a      	ldr	r2, [r3, #16]
 80018cc:	69fb      	ldr	r3, [r7, #28]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	fa02 f303 	lsl.w	r3, r2, r3
 80018d8:	69ba      	ldr	r2, [r7, #24]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	08da      	lsrs	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	3208      	adds	r2, #8
 80018e6:	69b9      	ldr	r1, [r7, #24]
 80018e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80018f2:	69fb      	ldr	r3, [r7, #28]
 80018f4:	005b      	lsls	r3, r3, #1
 80018f6:	2203      	movs	r2, #3
 80018f8:	fa02 f303 	lsl.w	r3, r2, r3
 80018fc:	43db      	mvns	r3, r3
 80018fe:	69ba      	ldr	r2, [r7, #24]
 8001900:	4013      	ands	r3, r2
 8001902:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001904:	683b      	ldr	r3, [r7, #0]
 8001906:	685b      	ldr	r3, [r3, #4]
 8001908:	f003 0203 	and.w	r2, r3, #3
 800190c:	69fb      	ldr	r3, [r7, #28]
 800190e:	005b      	lsls	r3, r3, #1
 8001910:	fa02 f303 	lsl.w	r3, r2, r3
 8001914:	69ba      	ldr	r2, [r7, #24]
 8001916:	4313      	orrs	r3, r2
 8001918:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001920:	683b      	ldr	r3, [r7, #0]
 8001922:	685b      	ldr	r3, [r3, #4]
 8001924:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001928:	2b00      	cmp	r3, #0
 800192a:	f000 80ae 	beq.w	8001a8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800192e:	2300      	movs	r3, #0
 8001930:	60fb      	str	r3, [r7, #12]
 8001932:	4b5d      	ldr	r3, [pc, #372]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	4a5c      	ldr	r2, [pc, #368]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001938:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800193c:	6453      	str	r3, [r2, #68]	; 0x44
 800193e:	4b5a      	ldr	r3, [pc, #360]	; (8001aa8 <HAL_GPIO_Init+0x300>)
 8001940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001942:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001946:	60fb      	str	r3, [r7, #12]
 8001948:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800194a:	4a58      	ldr	r2, [pc, #352]	; (8001aac <HAL_GPIO_Init+0x304>)
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	089b      	lsrs	r3, r3, #2
 8001950:	3302      	adds	r3, #2
 8001952:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001956:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001958:	69fb      	ldr	r3, [r7, #28]
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	009b      	lsls	r3, r3, #2
 8001960:	220f      	movs	r2, #15
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a4f      	ldr	r2, [pc, #316]	; (8001ab0 <HAL_GPIO_Init+0x308>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d025      	beq.n	80019c2 <HAL_GPIO_Init+0x21a>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a4e      	ldr	r2, [pc, #312]	; (8001ab4 <HAL_GPIO_Init+0x30c>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d01f      	beq.n	80019be <HAL_GPIO_Init+0x216>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a4d      	ldr	r2, [pc, #308]	; (8001ab8 <HAL_GPIO_Init+0x310>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d019      	beq.n	80019ba <HAL_GPIO_Init+0x212>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	4a4c      	ldr	r2, [pc, #304]	; (8001abc <HAL_GPIO_Init+0x314>)
 800198a:	4293      	cmp	r3, r2
 800198c:	d013      	beq.n	80019b6 <HAL_GPIO_Init+0x20e>
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	4a4b      	ldr	r2, [pc, #300]	; (8001ac0 <HAL_GPIO_Init+0x318>)
 8001992:	4293      	cmp	r3, r2
 8001994:	d00d      	beq.n	80019b2 <HAL_GPIO_Init+0x20a>
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	4a4a      	ldr	r2, [pc, #296]	; (8001ac4 <HAL_GPIO_Init+0x31c>)
 800199a:	4293      	cmp	r3, r2
 800199c:	d007      	beq.n	80019ae <HAL_GPIO_Init+0x206>
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	4a49      	ldr	r2, [pc, #292]	; (8001ac8 <HAL_GPIO_Init+0x320>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_GPIO_Init+0x202>
 80019a6:	2306      	movs	r3, #6
 80019a8:	e00c      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019aa:	2307      	movs	r3, #7
 80019ac:	e00a      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019ae:	2305      	movs	r3, #5
 80019b0:	e008      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019b2:	2304      	movs	r3, #4
 80019b4:	e006      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019b6:	2303      	movs	r3, #3
 80019b8:	e004      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019ba:	2302      	movs	r3, #2
 80019bc:	e002      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019be:	2301      	movs	r3, #1
 80019c0:	e000      	b.n	80019c4 <HAL_GPIO_Init+0x21c>
 80019c2:	2300      	movs	r3, #0
 80019c4:	69fa      	ldr	r2, [r7, #28]
 80019c6:	f002 0203 	and.w	r2, r2, #3
 80019ca:	0092      	lsls	r2, r2, #2
 80019cc:	4093      	lsls	r3, r2
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80019d4:	4935      	ldr	r1, [pc, #212]	; (8001aac <HAL_GPIO_Init+0x304>)
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	089b      	lsrs	r3, r3, #2
 80019da:	3302      	adds	r3, #2
 80019dc:	69ba      	ldr	r2, [r7, #24]
 80019de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <HAL_GPIO_Init+0x324>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	43db      	mvns	r3, r3
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	4013      	ands	r3, r2
 80019f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d003      	beq.n	8001a06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80019fe:	69ba      	ldr	r2, [r7, #24]
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001a06:	4a31      	ldr	r2, [pc, #196]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a08:	69bb      	ldr	r3, [r7, #24]
 8001a0a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001a0c:	4b2f      	ldr	r3, [pc, #188]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a12:	693b      	ldr	r3, [r7, #16]
 8001a14:	43db      	mvns	r3, r3
 8001a16:	69ba      	ldr	r2, [r7, #24]
 8001a18:	4013      	ands	r3, r2
 8001a1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d003      	beq.n	8001a30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001a28:	69ba      	ldr	r2, [r7, #24]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001a30:	4a26      	ldr	r2, [pc, #152]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a32:	69bb      	ldr	r3, [r7, #24]
 8001a34:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001a36:	4b25      	ldr	r3, [pc, #148]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a38:	689b      	ldr	r3, [r3, #8]
 8001a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a3c:	693b      	ldr	r3, [r7, #16]
 8001a3e:	43db      	mvns	r3, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4013      	ands	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	d003      	beq.n	8001a5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001a52:	69ba      	ldr	r2, [r7, #24]
 8001a54:	693b      	ldr	r3, [r7, #16]
 8001a56:	4313      	orrs	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001a5a:	4a1c      	ldr	r2, [pc, #112]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a5c:	69bb      	ldr	r3, [r7, #24]
 8001a5e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001a60:	4b1a      	ldr	r3, [pc, #104]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001a66:	693b      	ldr	r3, [r7, #16]
 8001a68:	43db      	mvns	r3, r3
 8001a6a:	69ba      	ldr	r2, [r7, #24]
 8001a6c:	4013      	ands	r3, r2
 8001a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d003      	beq.n	8001a84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	693b      	ldr	r3, [r7, #16]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001a84:	4a11      	ldr	r2, [pc, #68]	; (8001acc <HAL_GPIO_Init+0x324>)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a8a:	69fb      	ldr	r3, [r7, #28]
 8001a8c:	3301      	adds	r3, #1
 8001a8e:	61fb      	str	r3, [r7, #28]
 8001a90:	69fb      	ldr	r3, [r7, #28]
 8001a92:	2b0f      	cmp	r3, #15
 8001a94:	f67f ae96 	bls.w	80017c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a98:	bf00      	nop
 8001a9a:	bf00      	nop
 8001a9c:	3724      	adds	r7, #36	; 0x24
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40020000 	.word	0x40020000
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020800 	.word	0x40020800
 8001abc:	40020c00 	.word	0x40020c00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	40021400 	.word	0x40021400
 8001ac8:	40021800 	.word	0x40021800
 8001acc:	40013c00 	.word	0x40013c00

08001ad0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	460b      	mov	r3, r1
 8001ada:	807b      	strh	r3, [r7, #2]
 8001adc:	4613      	mov	r3, r2
 8001ade:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ae0:	787b      	ldrb	r3, [r7, #1]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d003      	beq.n	8001aee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ae6:	887a      	ldrh	r2, [r7, #2]
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001aec:	e003      	b.n	8001af6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001aee:	887b      	ldrh	r3, [r7, #2]
 8001af0:	041a      	lsls	r2, r3, #16
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	619a      	str	r2, [r3, #24]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
	...

08001b04 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b084      	sub	sp, #16
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0cc      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b18:	4b68      	ldr	r3, [pc, #416]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 030f 	and.w	r3, r3, #15
 8001b20:	683a      	ldr	r2, [r7, #0]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d90c      	bls.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b26:	4b65      	ldr	r3, [pc, #404]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b28:	683a      	ldr	r2, [r7, #0]
 8001b2a:	b2d2      	uxtb	r2, r2
 8001b2c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b2e:	4b63      	ldr	r3, [pc, #396]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 030f 	and.w	r3, r3, #15
 8001b36:	683a      	ldr	r2, [r7, #0]
 8001b38:	429a      	cmp	r2, r3
 8001b3a:	d001      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e0b8      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0302 	and.w	r3, r3, #2
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d020      	beq.n	8001b8e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f003 0304 	and.w	r3, r3, #4
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d005      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b58:	4b59      	ldr	r3, [pc, #356]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	4a58      	ldr	r2, [pc, #352]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b5e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001b62:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0308 	and.w	r3, r3, #8
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d005      	beq.n	8001b7c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b70:	4b53      	ldr	r3, [pc, #332]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	4a52      	ldr	r2, [pc, #328]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b76:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001b7a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b7c:	4b50      	ldr	r3, [pc, #320]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	689b      	ldr	r3, [r3, #8]
 8001b88:	494d      	ldr	r1, [pc, #308]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d044      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	2b01      	cmp	r3, #1
 8001ba0:	d107      	bne.n	8001bb2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ba2:	4b47      	ldr	r3, [pc, #284]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d119      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e07f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	2b02      	cmp	r3, #2
 8001bb8:	d003      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001bbe:	2b03      	cmp	r3, #3
 8001bc0:	d107      	bne.n	8001bd2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bc2:	4b3f      	ldr	r3, [pc, #252]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e06f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	f003 0302 	and.w	r3, r3, #2
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e067      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001be2:	4b37      	ldr	r3, [pc, #220]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001be4:	689b      	ldr	r3, [r3, #8]
 8001be6:	f023 0203 	bic.w	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	4934      	ldr	r1, [pc, #208]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bf4:	f7ff f93e 	bl	8000e74 <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bfc:	f7ff f93a 	bl	8000e74 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e04f      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c12:	4b2b      	ldr	r3, [pc, #172]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	f003 020c 	and.w	r2, r3, #12
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d1eb      	bne.n	8001bfc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 030f 	and.w	r3, r3, #15
 8001c2c:	683a      	ldr	r2, [r7, #0]
 8001c2e:	429a      	cmp	r2, r3
 8001c30:	d20c      	bcs.n	8001c4c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c32:	4b22      	ldr	r3, [pc, #136]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c34:	683a      	ldr	r2, [r7, #0]
 8001c36:	b2d2      	uxtb	r2, r2
 8001c38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3a:	4b20      	ldr	r3, [pc, #128]	; (8001cbc <HAL_RCC_ClockConfig+0x1b8>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 030f 	and.w	r3, r3, #15
 8001c42:	683a      	ldr	r2, [r7, #0]
 8001c44:	429a      	cmp	r2, r3
 8001c46:	d001      	beq.n	8001c4c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e032      	b.n	8001cb2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f003 0304 	and.w	r3, r3, #4
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d008      	beq.n	8001c6a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c58:	4b19      	ldr	r3, [pc, #100]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5a:	689b      	ldr	r3, [r3, #8]
 8001c5c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4916      	ldr	r1, [pc, #88]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c66:	4313      	orrs	r3, r2
 8001c68:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	f003 0308 	and.w	r3, r3, #8
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d009      	beq.n	8001c8a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c76:	4b12      	ldr	r3, [pc, #72]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	691b      	ldr	r3, [r3, #16]
 8001c82:	00db      	lsls	r3, r3, #3
 8001c84:	490e      	ldr	r1, [pc, #56]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c86:	4313      	orrs	r3, r2
 8001c88:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001c8a:	f000 f855 	bl	8001d38 <HAL_RCC_GetSysClockFreq>
 8001c8e:	4602      	mov	r2, r0
 8001c90:	4b0b      	ldr	r3, [pc, #44]	; (8001cc0 <HAL_RCC_ClockConfig+0x1bc>)
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	091b      	lsrs	r3, r3, #4
 8001c96:	f003 030f 	and.w	r3, r3, #15
 8001c9a:	490a      	ldr	r1, [pc, #40]	; (8001cc4 <HAL_RCC_ClockConfig+0x1c0>)
 8001c9c:	5ccb      	ldrb	r3, [r1, r3]
 8001c9e:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca2:	4a09      	ldr	r2, [pc, #36]	; (8001cc8 <HAL_RCC_ClockConfig+0x1c4>)
 8001ca4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001ca6:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <HAL_RCC_ClockConfig+0x1c8>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff f89e 	bl	8000dec <HAL_InitTick>

  return HAL_OK;
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	40023c00 	.word	0x40023c00
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	08004038 	.word	0x08004038
 8001cc8:	20000008 	.word	0x20000008
 8001ccc:	2000000c 	.word	0x2000000c

08001cd0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
}
 8001cd8:	4618      	mov	r0, r3
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	20000008 	.word	0x20000008

08001ce8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ce8:	b580      	push	{r7, lr}
 8001cea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001cec:	f7ff fff0 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	4b05      	ldr	r3, [pc, #20]	; (8001d08 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	0a9b      	lsrs	r3, r3, #10
 8001cf8:	f003 0307 	and.w	r3, r3, #7
 8001cfc:	4903      	ldr	r1, [pc, #12]	; (8001d0c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cfe:	5ccb      	ldrb	r3, [r1, r3]
 8001d00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	bd80      	pop	{r7, pc}
 8001d08:	40023800 	.word	0x40023800
 8001d0c:	08004048 	.word	0x08004048

08001d10 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001d14:	f7ff ffdc 	bl	8001cd0 <HAL_RCC_GetHCLKFreq>
 8001d18:	4602      	mov	r2, r0
 8001d1a:	4b05      	ldr	r3, [pc, #20]	; (8001d30 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	0b5b      	lsrs	r3, r3, #13
 8001d20:	f003 0307 	and.w	r3, r3, #7
 8001d24:	4903      	ldr	r1, [pc, #12]	; (8001d34 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d26:	5ccb      	ldrb	r3, [r1, r3]
 8001d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40023800 	.word	0x40023800
 8001d34:	08004048 	.word	0x08004048

08001d38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001d3c:	b088      	sub	sp, #32
 8001d3e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001d40:	2300      	movs	r3, #0
 8001d42:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8001d44:	2300      	movs	r3, #0
 8001d46:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8001d48:	2300      	movs	r3, #0
 8001d4a:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 8001d50:	2300      	movs	r3, #0
 8001d52:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001d54:	4bce      	ldr	r3, [pc, #824]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 030c 	and.w	r3, r3, #12
 8001d5c:	2b0c      	cmp	r3, #12
 8001d5e:	f200 818d 	bhi.w	800207c <HAL_RCC_GetSysClockFreq+0x344>
 8001d62:	a201      	add	r2, pc, #4	; (adr r2, 8001d68 <HAL_RCC_GetSysClockFreq+0x30>)
 8001d64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d68:	08001d9d 	.word	0x08001d9d
 8001d6c:	0800207d 	.word	0x0800207d
 8001d70:	0800207d 	.word	0x0800207d
 8001d74:	0800207d 	.word	0x0800207d
 8001d78:	08001da3 	.word	0x08001da3
 8001d7c:	0800207d 	.word	0x0800207d
 8001d80:	0800207d 	.word	0x0800207d
 8001d84:	0800207d 	.word	0x0800207d
 8001d88:	08001da9 	.word	0x08001da9
 8001d8c:	0800207d 	.word	0x0800207d
 8001d90:	0800207d 	.word	0x0800207d
 8001d94:	0800207d 	.word	0x0800207d
 8001d98:	08001f1d 	.word	0x08001f1d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001d9c:	4bbd      	ldr	r3, [pc, #756]	; (8002094 <HAL_RCC_GetSysClockFreq+0x35c>)
 8001d9e:	61bb      	str	r3, [r7, #24]
       break;
 8001da0:	e16f      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001da2:	4bbd      	ldr	r3, [pc, #756]	; (8002098 <HAL_RCC_GetSysClockFreq+0x360>)
 8001da4:	61bb      	str	r3, [r7, #24]
      break;
 8001da6:	e16c      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001da8:	4bb9      	ldr	r3, [pc, #740]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001db0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001db2:	4bb7      	ldr	r3, [pc, #732]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d053      	beq.n	8001e66 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dbe:	4bb4      	ldr	r3, [pc, #720]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	099b      	lsrs	r3, r3, #6
 8001dc4:	461a      	mov	r2, r3
 8001dc6:	f04f 0300 	mov.w	r3, #0
 8001dca:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001dce:	f04f 0100 	mov.w	r1, #0
 8001dd2:	ea02 0400 	and.w	r4, r2, r0
 8001dd6:	603c      	str	r4, [r7, #0]
 8001dd8:	400b      	ands	r3, r1
 8001dda:	607b      	str	r3, [r7, #4]
 8001ddc:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001de0:	4620      	mov	r0, r4
 8001de2:	4629      	mov	r1, r5
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	f04f 0300 	mov.w	r3, #0
 8001dec:	014b      	lsls	r3, r1, #5
 8001dee:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001df2:	0142      	lsls	r2, r0, #5
 8001df4:	4610      	mov	r0, r2
 8001df6:	4619      	mov	r1, r3
 8001df8:	4623      	mov	r3, r4
 8001dfa:	1ac0      	subs	r0, r0, r3
 8001dfc:	462b      	mov	r3, r5
 8001dfe:	eb61 0103 	sbc.w	r1, r1, r3
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	018b      	lsls	r3, r1, #6
 8001e0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e10:	0182      	lsls	r2, r0, #6
 8001e12:	1a12      	subs	r2, r2, r0
 8001e14:	eb63 0301 	sbc.w	r3, r3, r1
 8001e18:	f04f 0000 	mov.w	r0, #0
 8001e1c:	f04f 0100 	mov.w	r1, #0
 8001e20:	00d9      	lsls	r1, r3, #3
 8001e22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e26:	00d0      	lsls	r0, r2, #3
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4621      	mov	r1, r4
 8001e2e:	1852      	adds	r2, r2, r1
 8001e30:	4629      	mov	r1, r5
 8001e32:	eb43 0101 	adc.w	r1, r3, r1
 8001e36:	460b      	mov	r3, r1
 8001e38:	f04f 0000 	mov.w	r0, #0
 8001e3c:	f04f 0100 	mov.w	r1, #0
 8001e40:	0259      	lsls	r1, r3, #9
 8001e42:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e46:	0250      	lsls	r0, r2, #9
 8001e48:	4602      	mov	r2, r0
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	4610      	mov	r0, r2
 8001e4e:	4619      	mov	r1, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	461a      	mov	r2, r3
 8001e54:	f04f 0300 	mov.w	r3, #0
 8001e58:	f7fe f9d4 	bl	8000204 <__aeabi_uldivmod>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	460b      	mov	r3, r1
 8001e60:	4613      	mov	r3, r2
 8001e62:	61fb      	str	r3, [r7, #28]
 8001e64:	e04c      	b.n	8001f00 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e66:	4b8a      	ldr	r3, [pc, #552]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001e68:	685b      	ldr	r3, [r3, #4]
 8001e6a:	099b      	lsrs	r3, r3, #6
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f04f 0300 	mov.w	r3, #0
 8001e72:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e76:	f04f 0100 	mov.w	r1, #0
 8001e7a:	ea02 0a00 	and.w	sl, r2, r0
 8001e7e:	ea03 0b01 	and.w	fp, r3, r1
 8001e82:	4650      	mov	r0, sl
 8001e84:	4659      	mov	r1, fp
 8001e86:	f04f 0200 	mov.w	r2, #0
 8001e8a:	f04f 0300 	mov.w	r3, #0
 8001e8e:	014b      	lsls	r3, r1, #5
 8001e90:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e94:	0142      	lsls	r2, r0, #5
 8001e96:	4610      	mov	r0, r2
 8001e98:	4619      	mov	r1, r3
 8001e9a:	ebb0 000a 	subs.w	r0, r0, sl
 8001e9e:	eb61 010b 	sbc.w	r1, r1, fp
 8001ea2:	f04f 0200 	mov.w	r2, #0
 8001ea6:	f04f 0300 	mov.w	r3, #0
 8001eaa:	018b      	lsls	r3, r1, #6
 8001eac:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001eb0:	0182      	lsls	r2, r0, #6
 8001eb2:	1a12      	subs	r2, r2, r0
 8001eb4:	eb63 0301 	sbc.w	r3, r3, r1
 8001eb8:	f04f 0000 	mov.w	r0, #0
 8001ebc:	f04f 0100 	mov.w	r1, #0
 8001ec0:	00d9      	lsls	r1, r3, #3
 8001ec2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001ec6:	00d0      	lsls	r0, r2, #3
 8001ec8:	4602      	mov	r2, r0
 8001eca:	460b      	mov	r3, r1
 8001ecc:	eb12 020a 	adds.w	r2, r2, sl
 8001ed0:	eb43 030b 	adc.w	r3, r3, fp
 8001ed4:	f04f 0000 	mov.w	r0, #0
 8001ed8:	f04f 0100 	mov.w	r1, #0
 8001edc:	0299      	lsls	r1, r3, #10
 8001ede:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ee2:	0290      	lsls	r0, r2, #10
 8001ee4:	4602      	mov	r2, r0
 8001ee6:	460b      	mov	r3, r1
 8001ee8:	4610      	mov	r0, r2
 8001eea:	4619      	mov	r1, r3
 8001eec:	697b      	ldr	r3, [r7, #20]
 8001eee:	461a      	mov	r2, r3
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	f7fe f986 	bl	8000204 <__aeabi_uldivmod>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4613      	mov	r3, r2
 8001efe:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001f00:	4b63      	ldr	r3, [pc, #396]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	0c1b      	lsrs	r3, r3, #16
 8001f06:	f003 0303 	and.w	r3, r3, #3
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8001f10:	69fa      	ldr	r2, [r7, #28]
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f18:	61bb      	str	r3, [r7, #24]
      break;
 8001f1a:	e0b2      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001f1c:	4b5c      	ldr	r3, [pc, #368]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f1e:	685b      	ldr	r3, [r3, #4]
 8001f20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001f24:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001f26:	4b5a      	ldr	r3, [pc, #360]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d04d      	beq.n	8001fce <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001f32:	4b57      	ldr	r3, [pc, #348]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001f34:	685b      	ldr	r3, [r3, #4]
 8001f36:	099b      	lsrs	r3, r3, #6
 8001f38:	461a      	mov	r2, r3
 8001f3a:	f04f 0300 	mov.w	r3, #0
 8001f3e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001f42:	f04f 0100 	mov.w	r1, #0
 8001f46:	ea02 0800 	and.w	r8, r2, r0
 8001f4a:	ea03 0901 	and.w	r9, r3, r1
 8001f4e:	4640      	mov	r0, r8
 8001f50:	4649      	mov	r1, r9
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	014b      	lsls	r3, r1, #5
 8001f5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001f60:	0142      	lsls	r2, r0, #5
 8001f62:	4610      	mov	r0, r2
 8001f64:	4619      	mov	r1, r3
 8001f66:	ebb0 0008 	subs.w	r0, r0, r8
 8001f6a:	eb61 0109 	sbc.w	r1, r1, r9
 8001f6e:	f04f 0200 	mov.w	r2, #0
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	018b      	lsls	r3, r1, #6
 8001f78:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001f7c:	0182      	lsls	r2, r0, #6
 8001f7e:	1a12      	subs	r2, r2, r0
 8001f80:	eb63 0301 	sbc.w	r3, r3, r1
 8001f84:	f04f 0000 	mov.w	r0, #0
 8001f88:	f04f 0100 	mov.w	r1, #0
 8001f8c:	00d9      	lsls	r1, r3, #3
 8001f8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001f92:	00d0      	lsls	r0, r2, #3
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	eb12 0208 	adds.w	r2, r2, r8
 8001f9c:	eb43 0309 	adc.w	r3, r3, r9
 8001fa0:	f04f 0000 	mov.w	r0, #0
 8001fa4:	f04f 0100 	mov.w	r1, #0
 8001fa8:	0259      	lsls	r1, r3, #9
 8001faa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001fae:	0250      	lsls	r0, r2, #9
 8001fb0:	4602      	mov	r2, r0
 8001fb2:	460b      	mov	r3, r1
 8001fb4:	4610      	mov	r0, r2
 8001fb6:	4619      	mov	r1, r3
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f04f 0300 	mov.w	r3, #0
 8001fc0:	f7fe f920 	bl	8000204 <__aeabi_uldivmod>
 8001fc4:	4602      	mov	r2, r0
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	4613      	mov	r3, r2
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	e04a      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fce:	4b30      	ldr	r3, [pc, #192]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	099b      	lsrs	r3, r3, #6
 8001fd4:	461a      	mov	r2, r3
 8001fd6:	f04f 0300 	mov.w	r3, #0
 8001fda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001fde:	f04f 0100 	mov.w	r1, #0
 8001fe2:	ea02 0400 	and.w	r4, r2, r0
 8001fe6:	ea03 0501 	and.w	r5, r3, r1
 8001fea:	4620      	mov	r0, r4
 8001fec:	4629      	mov	r1, r5
 8001fee:	f04f 0200 	mov.w	r2, #0
 8001ff2:	f04f 0300 	mov.w	r3, #0
 8001ff6:	014b      	lsls	r3, r1, #5
 8001ff8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001ffc:	0142      	lsls	r2, r0, #5
 8001ffe:	4610      	mov	r0, r2
 8002000:	4619      	mov	r1, r3
 8002002:	1b00      	subs	r0, r0, r4
 8002004:	eb61 0105 	sbc.w	r1, r1, r5
 8002008:	f04f 0200 	mov.w	r2, #0
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	018b      	lsls	r3, r1, #6
 8002012:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002016:	0182      	lsls	r2, r0, #6
 8002018:	1a12      	subs	r2, r2, r0
 800201a:	eb63 0301 	sbc.w	r3, r3, r1
 800201e:	f04f 0000 	mov.w	r0, #0
 8002022:	f04f 0100 	mov.w	r1, #0
 8002026:	00d9      	lsls	r1, r3, #3
 8002028:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800202c:	00d0      	lsls	r0, r2, #3
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	1912      	adds	r2, r2, r4
 8002034:	eb45 0303 	adc.w	r3, r5, r3
 8002038:	f04f 0000 	mov.w	r0, #0
 800203c:	f04f 0100 	mov.w	r1, #0
 8002040:	0299      	lsls	r1, r3, #10
 8002042:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002046:	0290      	lsls	r0, r2, #10
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	461a      	mov	r2, r3
 8002054:	f04f 0300 	mov.w	r3, #0
 8002058:	f7fe f8d4 	bl	8000204 <__aeabi_uldivmod>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4613      	mov	r3, r2
 8002062:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002064:	4b0a      	ldr	r3, [pc, #40]	; (8002090 <HAL_RCC_GetSysClockFreq+0x358>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	0f1b      	lsrs	r3, r3, #28
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8002070:	69fa      	ldr	r2, [r7, #28]
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	fbb2 f3f3 	udiv	r3, r2, r3
 8002078:	61bb      	str	r3, [r7, #24]
      break;
 800207a:	e002      	b.n	8002082 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800207c:	4b05      	ldr	r3, [pc, #20]	; (8002094 <HAL_RCC_GetSysClockFreq+0x35c>)
 800207e:	61bb      	str	r3, [r7, #24]
      break;
 8002080:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002082:	69bb      	ldr	r3, [r7, #24]
}
 8002084:	4618      	mov	r0, r3
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800208e:	bf00      	nop
 8002090:	40023800 	.word	0x40023800
 8002094:	00f42400 	.word	0x00f42400
 8002098:	007a1200 	.word	0x007a1200

0800209c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020aa:	2301      	movs	r3, #1
 80020ac:	e28d      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f003 0301 	and.w	r3, r3, #1
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	f000 8083 	beq.w	80021c2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020bc:	4b94      	ldr	r3, [pc, #592]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80020be:	689b      	ldr	r3, [r3, #8]
 80020c0:	f003 030c 	and.w	r3, r3, #12
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d019      	beq.n	80020fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020c8:	4b91      	ldr	r3, [pc, #580]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d106      	bne.n	80020e2 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020d4:	4b8e      	ldr	r3, [pc, #568]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020e0:	d00c      	beq.n	80020fc <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020e2:	4b8b      	ldr	r3, [pc, #556]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80020ea:	2b0c      	cmp	r3, #12
 80020ec:	d112      	bne.n	8002114 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80020ee:	4b88      	ldr	r3, [pc, #544]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80020f0:	685b      	ldr	r3, [r3, #4]
 80020f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80020f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80020fa:	d10b      	bne.n	8002114 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020fc:	4b84      	ldr	r3, [pc, #528]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d05b      	beq.n	80021c0 <HAL_RCC_OscConfig+0x124>
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	685b      	ldr	r3, [r3, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d157      	bne.n	80021c0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e25a      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	685b      	ldr	r3, [r3, #4]
 8002118:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800211c:	d106      	bne.n	800212c <HAL_RCC_OscConfig+0x90>
 800211e:	4b7c      	ldr	r3, [pc, #496]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a7b      	ldr	r2, [pc, #492]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002124:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002128:	6013      	str	r3, [r2, #0]
 800212a:	e01d      	b.n	8002168 <HAL_RCC_OscConfig+0xcc>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002134:	d10c      	bne.n	8002150 <HAL_RCC_OscConfig+0xb4>
 8002136:	4b76      	ldr	r3, [pc, #472]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	4a75      	ldr	r2, [pc, #468]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 800213c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002140:	6013      	str	r3, [r2, #0]
 8002142:	4b73      	ldr	r3, [pc, #460]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	4a72      	ldr	r2, [pc, #456]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214c:	6013      	str	r3, [r2, #0]
 800214e:	e00b      	b.n	8002168 <HAL_RCC_OscConfig+0xcc>
 8002150:	4b6f      	ldr	r3, [pc, #444]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a6e      	ldr	r2, [pc, #440]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b6c      	ldr	r3, [pc, #432]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a6b      	ldr	r2, [pc, #428]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7fe fe80 	bl	8000e74 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002178:	f7fe fe7c 	bl	8000e74 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	; 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e21f      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800218a:	4b61      	ldr	r3, [pc, #388]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0xdc>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7fe fe6c 	bl	8000e74 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80021a0:	f7fe fe68 	bl	8000e74 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	; 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e20b      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80021b2:	4b57      	ldr	r3, [pc, #348]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x104>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d06f      	beq.n	80022ae <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021ce:	4b50      	ldr	r3, [pc, #320]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80021d0:	689b      	ldr	r3, [r3, #8]
 80021d2:	f003 030c 	and.w	r3, r3, #12
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d017      	beq.n	800220a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021da:	4b4d      	ldr	r3, [pc, #308]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 80021e2:	2b08      	cmp	r3, #8
 80021e4:	d105      	bne.n	80021f2 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021e6:	4b4a      	ldr	r3, [pc, #296]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00b      	beq.n	800220a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021f2:	4b47      	ldr	r3, [pc, #284]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80021f4:	689b      	ldr	r3, [r3, #8]
 80021f6:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 80021fa:	2b0c      	cmp	r3, #12
 80021fc:	d11c      	bne.n	8002238 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80021fe:	4b44      	ldr	r3, [pc, #272]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d116      	bne.n	8002238 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800220a:	4b41      	ldr	r3, [pc, #260]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d005      	beq.n	8002222 <HAL_RCC_OscConfig+0x186>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	68db      	ldr	r3, [r3, #12]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d001      	beq.n	8002222 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800221e:	2301      	movs	r3, #1
 8002220:	e1d3      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002222:	4b3b      	ldr	r3, [pc, #236]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	691b      	ldr	r3, [r3, #16]
 800222e:	00db      	lsls	r3, r3, #3
 8002230:	4937      	ldr	r1, [pc, #220]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002232:	4313      	orrs	r3, r2
 8002234:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002236:	e03a      	b.n	80022ae <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	68db      	ldr	r3, [r3, #12]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d020      	beq.n	8002282 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002240:	4b34      	ldr	r3, [pc, #208]	; (8002314 <HAL_RCC_OscConfig+0x278>)
 8002242:	2201      	movs	r2, #1
 8002244:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002246:	f7fe fe15 	bl	8000e74 <HAL_GetTick>
 800224a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800224c:	e008      	b.n	8002260 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800224e:	f7fe fe11 	bl	8000e74 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	2b02      	cmp	r3, #2
 800225a:	d901      	bls.n	8002260 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800225c:	2303      	movs	r3, #3
 800225e:	e1b4      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002260:	4b2b      	ldr	r3, [pc, #172]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0302 	and.w	r3, r3, #2
 8002268:	2b00      	cmp	r3, #0
 800226a:	d0f0      	beq.n	800224e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800226c:	4b28      	ldr	r3, [pc, #160]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	00db      	lsls	r3, r3, #3
 800227a:	4925      	ldr	r1, [pc, #148]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 800227c:	4313      	orrs	r3, r2
 800227e:	600b      	str	r3, [r1, #0]
 8002280:	e015      	b.n	80022ae <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002282:	4b24      	ldr	r3, [pc, #144]	; (8002314 <HAL_RCC_OscConfig+0x278>)
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002288:	f7fe fdf4 	bl	8000e74 <HAL_GetTick>
 800228c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002290:	f7fe fdf0 	bl	8000e74 <HAL_GetTick>
 8002294:	4602      	mov	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e193      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022a2:	4b1b      	ldr	r3, [pc, #108]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0302 	and.w	r3, r3, #2
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d1f0      	bne.n	8002290 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 0308 	and.w	r3, r3, #8
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d036      	beq.n	8002328 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	695b      	ldr	r3, [r3, #20]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d016      	beq.n	80022f0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022c2:	4b15      	ldr	r3, [pc, #84]	; (8002318 <HAL_RCC_OscConfig+0x27c>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022c8:	f7fe fdd4 	bl	8000e74 <HAL_GetTick>
 80022cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022ce:	e008      	b.n	80022e2 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022d0:	f7fe fdd0 	bl	8000e74 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	693b      	ldr	r3, [r7, #16]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d901      	bls.n	80022e2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	e173      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80022e2:	4b0b      	ldr	r3, [pc, #44]	; (8002310 <HAL_RCC_OscConfig+0x274>)
 80022e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022e6:	f003 0302 	and.w	r3, r3, #2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0f0      	beq.n	80022d0 <HAL_RCC_OscConfig+0x234>
 80022ee:	e01b      	b.n	8002328 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022f0:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022f6:	f7fe fdbd 	bl	8000e74 <HAL_GetTick>
 80022fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022fc:	e00e      	b.n	800231c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80022fe:	f7fe fdb9 	bl	8000e74 <HAL_GetTick>
 8002302:	4602      	mov	r2, r0
 8002304:	693b      	ldr	r3, [r7, #16]
 8002306:	1ad3      	subs	r3, r2, r3
 8002308:	2b02      	cmp	r3, #2
 800230a:	d907      	bls.n	800231c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800230c:	2303      	movs	r3, #3
 800230e:	e15c      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
 8002310:	40023800 	.word	0x40023800
 8002314:	42470000 	.word	0x42470000
 8002318:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800231c:	4b8a      	ldr	r3, [pc, #552]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 800231e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002320:	f003 0302 	and.w	r3, r3, #2
 8002324:	2b00      	cmp	r3, #0
 8002326:	d1ea      	bne.n	80022fe <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0304 	and.w	r3, r3, #4
 8002330:	2b00      	cmp	r3, #0
 8002332:	f000 8097 	beq.w	8002464 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002336:	2300      	movs	r3, #0
 8002338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800233a:	4b83      	ldr	r3, [pc, #524]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 800233c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002342:	2b00      	cmp	r3, #0
 8002344:	d10f      	bne.n	8002366 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	4b7f      	ldr	r3, [pc, #508]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 800234c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800234e:	4a7e      	ldr	r2, [pc, #504]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 8002350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002354:	6413      	str	r3, [r2, #64]	; 0x40
 8002356:	4b7c      	ldr	r3, [pc, #496]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 8002358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800235e:	60bb      	str	r3, [r7, #8]
 8002360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002362:	2301      	movs	r3, #1
 8002364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002366:	4b79      	ldr	r3, [pc, #484]	; (800254c <HAL_RCC_OscConfig+0x4b0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800236e:	2b00      	cmp	r3, #0
 8002370:	d118      	bne.n	80023a4 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002372:	4b76      	ldr	r3, [pc, #472]	; (800254c <HAL_RCC_OscConfig+0x4b0>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	4a75      	ldr	r2, [pc, #468]	; (800254c <HAL_RCC_OscConfig+0x4b0>)
 8002378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800237c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800237e:	f7fe fd79 	bl	8000e74 <HAL_GetTick>
 8002382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002384:	e008      	b.n	8002398 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002386:	f7fe fd75 	bl	8000e74 <HAL_GetTick>
 800238a:	4602      	mov	r2, r0
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	1ad3      	subs	r3, r2, r3
 8002390:	2b02      	cmp	r3, #2
 8002392:	d901      	bls.n	8002398 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002394:	2303      	movs	r3, #3
 8002396:	e118      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002398:	4b6c      	ldr	r3, [pc, #432]	; (800254c <HAL_RCC_OscConfig+0x4b0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d0f0      	beq.n	8002386 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	689b      	ldr	r3, [r3, #8]
 80023a8:	2b01      	cmp	r3, #1
 80023aa:	d106      	bne.n	80023ba <HAL_RCC_OscConfig+0x31e>
 80023ac:	4b66      	ldr	r3, [pc, #408]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023b0:	4a65      	ldr	r2, [pc, #404]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023b2:	f043 0301 	orr.w	r3, r3, #1
 80023b6:	6713      	str	r3, [r2, #112]	; 0x70
 80023b8:	e01c      	b.n	80023f4 <HAL_RCC_OscConfig+0x358>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	2b05      	cmp	r3, #5
 80023c0:	d10c      	bne.n	80023dc <HAL_RCC_OscConfig+0x340>
 80023c2:	4b61      	ldr	r3, [pc, #388]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c6:	4a60      	ldr	r2, [pc, #384]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023c8:	f043 0304 	orr.w	r3, r3, #4
 80023cc:	6713      	str	r3, [r2, #112]	; 0x70
 80023ce:	4b5e      	ldr	r3, [pc, #376]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023d2:	4a5d      	ldr	r2, [pc, #372]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023d4:	f043 0301 	orr.w	r3, r3, #1
 80023d8:	6713      	str	r3, [r2, #112]	; 0x70
 80023da:	e00b      	b.n	80023f4 <HAL_RCC_OscConfig+0x358>
 80023dc:	4b5a      	ldr	r3, [pc, #360]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023e0:	4a59      	ldr	r2, [pc, #356]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023e2:	f023 0301 	bic.w	r3, r3, #1
 80023e6:	6713      	str	r3, [r2, #112]	; 0x70
 80023e8:	4b57      	ldr	r3, [pc, #348]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023ec:	4a56      	ldr	r2, [pc, #344]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80023ee:	f023 0304 	bic.w	r3, r3, #4
 80023f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	689b      	ldr	r3, [r3, #8]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d015      	beq.n	8002428 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023fc:	f7fe fd3a 	bl	8000e74 <HAL_GetTick>
 8002400:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002402:	e00a      	b.n	800241a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002404:	f7fe fd36 	bl	8000e74 <HAL_GetTick>
 8002408:	4602      	mov	r2, r0
 800240a:	693b      	ldr	r3, [r7, #16]
 800240c:	1ad3      	subs	r3, r2, r3
 800240e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002412:	4293      	cmp	r3, r2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e0d7      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800241a:	4b4b      	ldr	r3, [pc, #300]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 800241c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800241e:	f003 0302 	and.w	r3, r3, #2
 8002422:	2b00      	cmp	r3, #0
 8002424:	d0ee      	beq.n	8002404 <HAL_RCC_OscConfig+0x368>
 8002426:	e014      	b.n	8002452 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002428:	f7fe fd24 	bl	8000e74 <HAL_GetTick>
 800242c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800242e:	e00a      	b.n	8002446 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002430:	f7fe fd20 	bl	8000e74 <HAL_GetTick>
 8002434:	4602      	mov	r2, r0
 8002436:	693b      	ldr	r3, [r7, #16]
 8002438:	1ad3      	subs	r3, r2, r3
 800243a:	f241 3288 	movw	r2, #5000	; 0x1388
 800243e:	4293      	cmp	r3, r2
 8002440:	d901      	bls.n	8002446 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002442:	2303      	movs	r3, #3
 8002444:	e0c1      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002446:	4b40      	ldr	r3, [pc, #256]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 8002448:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800244a:	f003 0302 	and.w	r3, r3, #2
 800244e:	2b00      	cmp	r3, #0
 8002450:	d1ee      	bne.n	8002430 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002452:	7dfb      	ldrb	r3, [r7, #23]
 8002454:	2b01      	cmp	r3, #1
 8002456:	d105      	bne.n	8002464 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002458:	4b3b      	ldr	r3, [pc, #236]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 800245a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245c:	4a3a      	ldr	r2, [pc, #232]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 800245e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002462:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	699b      	ldr	r3, [r3, #24]
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80ad 	beq.w	80025c8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800246e:	4b36      	ldr	r3, [pc, #216]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
 8002476:	2b08      	cmp	r3, #8
 8002478:	d060      	beq.n	800253c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	2b02      	cmp	r3, #2
 8002480:	d145      	bne.n	800250e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002482:	4b33      	ldr	r3, [pc, #204]	; (8002550 <HAL_RCC_OscConfig+0x4b4>)
 8002484:	2200      	movs	r2, #0
 8002486:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002488:	f7fe fcf4 	bl	8000e74 <HAL_GetTick>
 800248c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800248e:	e008      	b.n	80024a2 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002490:	f7fe fcf0 	bl	8000e74 <HAL_GetTick>
 8002494:	4602      	mov	r2, r0
 8002496:	693b      	ldr	r3, [r7, #16]
 8002498:	1ad3      	subs	r3, r2, r3
 800249a:	2b02      	cmp	r3, #2
 800249c:	d901      	bls.n	80024a2 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800249e:	2303      	movs	r3, #3
 80024a0:	e093      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80024a2:	4b29      	ldr	r3, [pc, #164]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1f0      	bne.n	8002490 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69da      	ldr	r2, [r3, #28]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6a1b      	ldr	r3, [r3, #32]
 80024b6:	431a      	orrs	r2, r3
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024bc:	019b      	lsls	r3, r3, #6
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024c4:	085b      	lsrs	r3, r3, #1
 80024c6:	3b01      	subs	r3, #1
 80024c8:	041b      	lsls	r3, r3, #16
 80024ca:	431a      	orrs	r2, r3
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024d0:	061b      	lsls	r3, r3, #24
 80024d2:	431a      	orrs	r2, r3
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	071b      	lsls	r3, r3, #28
 80024da:	491b      	ldr	r1, [pc, #108]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80024e0:	4b1b      	ldr	r3, [pc, #108]	; (8002550 <HAL_RCC_OscConfig+0x4b4>)
 80024e2:	2201      	movs	r2, #1
 80024e4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024e6:	f7fe fcc5 	bl	8000e74 <HAL_GetTick>
 80024ea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024ec:	e008      	b.n	8002500 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80024ee:	f7fe fcc1 	bl	8000e74 <HAL_GetTick>
 80024f2:	4602      	mov	r2, r0
 80024f4:	693b      	ldr	r3, [r7, #16]
 80024f6:	1ad3      	subs	r3, r2, r3
 80024f8:	2b02      	cmp	r3, #2
 80024fa:	d901      	bls.n	8002500 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80024fc:	2303      	movs	r3, #3
 80024fe:	e064      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002500:	4b11      	ldr	r3, [pc, #68]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0f0      	beq.n	80024ee <HAL_RCC_OscConfig+0x452>
 800250c:	e05c      	b.n	80025c8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800250e:	4b10      	ldr	r3, [pc, #64]	; (8002550 <HAL_RCC_OscConfig+0x4b4>)
 8002510:	2200      	movs	r2, #0
 8002512:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002514:	f7fe fcae 	bl	8000e74 <HAL_GetTick>
 8002518:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800251a:	e008      	b.n	800252e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800251c:	f7fe fcaa 	bl	8000e74 <HAL_GetTick>
 8002520:	4602      	mov	r2, r0
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b02      	cmp	r3, #2
 8002528:	d901      	bls.n	800252e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	e04d      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800252e:	4b06      	ldr	r3, [pc, #24]	; (8002548 <HAL_RCC_OscConfig+0x4ac>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d1f0      	bne.n	800251c <HAL_RCC_OscConfig+0x480>
 800253a:	e045      	b.n	80025c8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	699b      	ldr	r3, [r3, #24]
 8002540:	2b01      	cmp	r3, #1
 8002542:	d107      	bne.n	8002554 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002544:	2301      	movs	r3, #1
 8002546:	e040      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
 8002548:	40023800 	.word	0x40023800
 800254c:	40007000 	.word	0x40007000
 8002550:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002554:	4b1f      	ldr	r3, [pc, #124]	; (80025d4 <HAL_RCC_OscConfig+0x538>)
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b01      	cmp	r3, #1
 8002560:	d030      	beq.n	80025c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800256c:	429a      	cmp	r2, r3
 800256e:	d129      	bne.n	80025c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800257a:	429a      	cmp	r2, r3
 800257c:	d122      	bne.n	80025c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002584:	4013      	ands	r3, r2
 8002586:	687a      	ldr	r2, [r7, #4]
 8002588:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800258a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800258c:	4293      	cmp	r3, r2
 800258e:	d119      	bne.n	80025c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800259a:	085b      	lsrs	r3, r3, #1
 800259c:	3b01      	subs	r3, #1
 800259e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80025a0:	429a      	cmp	r2, r3
 80025a2:	d10f      	bne.n	80025c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80025b0:	429a      	cmp	r2, r3
 80025b2:	d107      	bne.n	80025c4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d001      	beq.n	80025c8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 80025c4:	2301      	movs	r3, #1
 80025c6:	e000      	b.n	80025ca <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 80025c8:	2300      	movs	r3, #0
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	40023800 	.word	0x40023800

080025d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b082      	sub	sp, #8
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d101      	bne.n	80025ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80025e6:	2301      	movs	r3, #1
 80025e8:	e041      	b.n	800266e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d106      	bne.n	8002604 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025fe:	6878      	ldr	r0, [r7, #4]
 8002600:	f7fe fa7a 	bl	8000af8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2202      	movs	r2, #2
 8002608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681a      	ldr	r2, [r3, #0]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	3304      	adds	r3, #4
 8002614:	4619      	mov	r1, r3
 8002616:	4610      	mov	r0, r2
 8002618:	f000 fc90 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2201      	movs	r2, #1
 8002628:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	2201      	movs	r2, #1
 8002630:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2201      	movs	r2, #1
 8002640:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2201      	movs	r2, #1
 8002648:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2201      	movs	r2, #1
 8002650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2201      	movs	r2, #1
 8002658:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2201      	movs	r2, #1
 8002660:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2201      	movs	r2, #1
 8002668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800266c:	2300      	movs	r3, #0
}
 800266e:	4618      	mov	r0, r3
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}
	...

08002678 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002678:	b480      	push	{r7}
 800267a:	b085      	sub	sp, #20
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002686:	b2db      	uxtb	r3, r3
 8002688:	2b01      	cmp	r3, #1
 800268a:	d001      	beq.n	8002690 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800268c:	2301      	movs	r3, #1
 800268e:	e046      	b.n	800271e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2202      	movs	r2, #2
 8002694:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a23      	ldr	r2, [pc, #140]	; (800272c <HAL_TIM_Base_Start+0xb4>)
 800269e:	4293      	cmp	r3, r2
 80026a0:	d022      	beq.n	80026e8 <HAL_TIM_Base_Start+0x70>
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026aa:	d01d      	beq.n	80026e8 <HAL_TIM_Base_Start+0x70>
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	4a1f      	ldr	r2, [pc, #124]	; (8002730 <HAL_TIM_Base_Start+0xb8>)
 80026b2:	4293      	cmp	r3, r2
 80026b4:	d018      	beq.n	80026e8 <HAL_TIM_Base_Start+0x70>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	4a1e      	ldr	r2, [pc, #120]	; (8002734 <HAL_TIM_Base_Start+0xbc>)
 80026bc:	4293      	cmp	r3, r2
 80026be:	d013      	beq.n	80026e8 <HAL_TIM_Base_Start+0x70>
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a1c      	ldr	r2, [pc, #112]	; (8002738 <HAL_TIM_Base_Start+0xc0>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d00e      	beq.n	80026e8 <HAL_TIM_Base_Start+0x70>
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a1b      	ldr	r2, [pc, #108]	; (800273c <HAL_TIM_Base_Start+0xc4>)
 80026d0:	4293      	cmp	r3, r2
 80026d2:	d009      	beq.n	80026e8 <HAL_TIM_Base_Start+0x70>
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4a19      	ldr	r2, [pc, #100]	; (8002740 <HAL_TIM_Base_Start+0xc8>)
 80026da:	4293      	cmp	r3, r2
 80026dc:	d004      	beq.n	80026e8 <HAL_TIM_Base_Start+0x70>
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a18      	ldr	r2, [pc, #96]	; (8002744 <HAL_TIM_Base_Start+0xcc>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d111      	bne.n	800270c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	f003 0307 	and.w	r3, r3, #7
 80026f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	2b06      	cmp	r3, #6
 80026f8:	d010      	beq.n	800271c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	681a      	ldr	r2, [r3, #0]
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f042 0201 	orr.w	r2, r2, #1
 8002708:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800270a:	e007      	b.n	800271c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f042 0201 	orr.w	r2, r2, #1
 800271a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800271c:	2300      	movs	r3, #0
}
 800271e:	4618      	mov	r0, r3
 8002720:	3714      	adds	r7, #20
 8002722:	46bd      	mov	sp, r7
 8002724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002728:	4770      	bx	lr
 800272a:	bf00      	nop
 800272c:	40010000 	.word	0x40010000
 8002730:	40000400 	.word	0x40000400
 8002734:	40000800 	.word	0x40000800
 8002738:	40000c00 	.word	0x40000c00
 800273c:	40010400 	.word	0x40010400
 8002740:	40014000 	.word	0x40014000
 8002744:	40001800 	.word	0x40001800

08002748 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e041      	b.n	80027de <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f000 f839 	bl	80027e6 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681a      	ldr	r2, [r3, #0]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	3304      	adds	r3, #4
 8002784:	4619      	mov	r1, r3
 8002786:	4610      	mov	r0, r2
 8002788:	f000 fbd8 	bl	8002f3c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2201      	movs	r2, #1
 8002798:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2201      	movs	r2, #1
 80027a0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2201      	movs	r2, #1
 80027a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2201      	movs	r2, #1
 80027b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2201      	movs	r2, #1
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2201      	movs	r2, #1
 80027c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	2201      	movs	r2, #1
 80027d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2201      	movs	r2, #1
 80027d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027dc:	2300      	movs	r3, #0
}
 80027de:	4618      	mov	r0, r3
 80027e0:	3708      	adds	r7, #8
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002806:	683b      	ldr	r3, [r7, #0]
 8002808:	2b00      	cmp	r3, #0
 800280a:	d104      	bne.n	8002816 <HAL_TIM_IC_Start_IT+0x1a>
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002812:	b2db      	uxtb	r3, r3
 8002814:	e013      	b.n	800283e <HAL_TIM_IC_Start_IT+0x42>
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	2b04      	cmp	r3, #4
 800281a:	d104      	bne.n	8002826 <HAL_TIM_IC_Start_IT+0x2a>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002822:	b2db      	uxtb	r3, r3
 8002824:	e00b      	b.n	800283e <HAL_TIM_IC_Start_IT+0x42>
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	2b08      	cmp	r3, #8
 800282a:	d104      	bne.n	8002836 <HAL_TIM_IC_Start_IT+0x3a>
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002832:	b2db      	uxtb	r3, r3
 8002834:	e003      	b.n	800283e <HAL_TIM_IC_Start_IT+0x42>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800283c:	b2db      	uxtb	r3, r3
 800283e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d104      	bne.n	8002850 <HAL_TIM_IC_Start_IT+0x54>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800284c:	b2db      	uxtb	r3, r3
 800284e:	e013      	b.n	8002878 <HAL_TIM_IC_Start_IT+0x7c>
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	2b04      	cmp	r3, #4
 8002854:	d104      	bne.n	8002860 <HAL_TIM_IC_Start_IT+0x64>
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800285c:	b2db      	uxtb	r3, r3
 800285e:	e00b      	b.n	8002878 <HAL_TIM_IC_Start_IT+0x7c>
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	2b08      	cmp	r3, #8
 8002864:	d104      	bne.n	8002870 <HAL_TIM_IC_Start_IT+0x74>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800286c:	b2db      	uxtb	r3, r3
 800286e:	e003      	b.n	8002878 <HAL_TIM_IC_Start_IT+0x7c>
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002876:	b2db      	uxtb	r3, r3
 8002878:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800287a:	7bfb      	ldrb	r3, [r7, #15]
 800287c:	2b01      	cmp	r3, #1
 800287e:	d102      	bne.n	8002886 <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002880:	7bbb      	ldrb	r3, [r7, #14]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d001      	beq.n	800288a <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e0c7      	b.n	8002a1a <HAL_TIM_IC_Start_IT+0x21e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d104      	bne.n	800289a <HAL_TIM_IC_Start_IT+0x9e>
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2202      	movs	r2, #2
 8002894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002898:	e013      	b.n	80028c2 <HAL_TIM_IC_Start_IT+0xc6>
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b04      	cmp	r3, #4
 800289e:	d104      	bne.n	80028aa <HAL_TIM_IC_Start_IT+0xae>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2202      	movs	r2, #2
 80028a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028a8:	e00b      	b.n	80028c2 <HAL_TIM_IC_Start_IT+0xc6>
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	2b08      	cmp	r3, #8
 80028ae:	d104      	bne.n	80028ba <HAL_TIM_IC_Start_IT+0xbe>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2202      	movs	r2, #2
 80028b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028b8:	e003      	b.n	80028c2 <HAL_TIM_IC_Start_IT+0xc6>
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	2202      	movs	r2, #2
 80028be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028c2:	683b      	ldr	r3, [r7, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d104      	bne.n	80028d2 <HAL_TIM_IC_Start_IT+0xd6>
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2202      	movs	r2, #2
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d0:	e013      	b.n	80028fa <HAL_TIM_IC_Start_IT+0xfe>
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	2b04      	cmp	r3, #4
 80028d6:	d104      	bne.n	80028e2 <HAL_TIM_IC_Start_IT+0xe6>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2202      	movs	r2, #2
 80028dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80028e0:	e00b      	b.n	80028fa <HAL_TIM_IC_Start_IT+0xfe>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d104      	bne.n	80028f2 <HAL_TIM_IC_Start_IT+0xf6>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2202      	movs	r2, #2
 80028ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028f0:	e003      	b.n	80028fa <HAL_TIM_IC_Start_IT+0xfe>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b0c      	cmp	r3, #12
 80028fe:	d841      	bhi.n	8002984 <HAL_TIM_IC_Start_IT+0x188>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <HAL_TIM_IC_Start_IT+0x10c>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800293d 	.word	0x0800293d
 800290c:	08002985 	.word	0x08002985
 8002910:	08002985 	.word	0x08002985
 8002914:	08002985 	.word	0x08002985
 8002918:	0800294f 	.word	0x0800294f
 800291c:	08002985 	.word	0x08002985
 8002920:	08002985 	.word	0x08002985
 8002924:	08002985 	.word	0x08002985
 8002928:	08002961 	.word	0x08002961
 800292c:	08002985 	.word	0x08002985
 8002930:	08002985 	.word	0x08002985
 8002934:	08002985 	.word	0x08002985
 8002938:	08002973 	.word	0x08002973
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	68da      	ldr	r2, [r3, #12]
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f042 0202 	orr.w	r2, r2, #2
 800294a:	60da      	str	r2, [r3, #12]
      break;
 800294c:	e01b      	b.n	8002986 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	68da      	ldr	r2, [r3, #12]
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	f042 0204 	orr.w	r2, r2, #4
 800295c:	60da      	str	r2, [r3, #12]
      break;
 800295e:	e012      	b.n	8002986 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	68da      	ldr	r2, [r3, #12]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f042 0208 	orr.w	r2, r2, #8
 800296e:	60da      	str	r2, [r3, #12]
      break;
 8002970:	e009      	b.n	8002986 <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68da      	ldr	r2, [r3, #12]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f042 0210 	orr.w	r2, r2, #16
 8002980:	60da      	str	r2, [r3, #12]
      break;
 8002982:	e000      	b.n	8002986 <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 8002984:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	2201      	movs	r2, #1
 800298c:	6839      	ldr	r1, [r7, #0]
 800298e:	4618      	mov	r0, r3
 8002990:	f000 fd38 	bl	8003404 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a22      	ldr	r2, [pc, #136]	; (8002a24 <HAL_TIM_IC_Start_IT+0x228>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d022      	beq.n	80029e4 <HAL_TIM_IC_Start_IT+0x1e8>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029a6:	d01d      	beq.n	80029e4 <HAL_TIM_IC_Start_IT+0x1e8>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a1e      	ldr	r2, [pc, #120]	; (8002a28 <HAL_TIM_IC_Start_IT+0x22c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d018      	beq.n	80029e4 <HAL_TIM_IC_Start_IT+0x1e8>
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a1d      	ldr	r2, [pc, #116]	; (8002a2c <HAL_TIM_IC_Start_IT+0x230>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d013      	beq.n	80029e4 <HAL_TIM_IC_Start_IT+0x1e8>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a1b      	ldr	r2, [pc, #108]	; (8002a30 <HAL_TIM_IC_Start_IT+0x234>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d00e      	beq.n	80029e4 <HAL_TIM_IC_Start_IT+0x1e8>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4a1a      	ldr	r2, [pc, #104]	; (8002a34 <HAL_TIM_IC_Start_IT+0x238>)
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d009      	beq.n	80029e4 <HAL_TIM_IC_Start_IT+0x1e8>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	4a18      	ldr	r2, [pc, #96]	; (8002a38 <HAL_TIM_IC_Start_IT+0x23c>)
 80029d6:	4293      	cmp	r3, r2
 80029d8:	d004      	beq.n	80029e4 <HAL_TIM_IC_Start_IT+0x1e8>
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	4a17      	ldr	r2, [pc, #92]	; (8002a3c <HAL_TIM_IC_Start_IT+0x240>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d111      	bne.n	8002a08 <HAL_TIM_IC_Start_IT+0x20c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	689b      	ldr	r3, [r3, #8]
 80029ea:	f003 0307 	and.w	r3, r3, #7
 80029ee:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f0:	68bb      	ldr	r3, [r7, #8]
 80029f2:	2b06      	cmp	r3, #6
 80029f4:	d010      	beq.n	8002a18 <HAL_TIM_IC_Start_IT+0x21c>
    {
      __HAL_TIM_ENABLE(htim);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	681a      	ldr	r2, [r3, #0]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f042 0201 	orr.w	r2, r2, #1
 8002a04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a06:	e007      	b.n	8002a18 <HAL_TIM_IC_Start_IT+0x21c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f042 0201 	orr.w	r2, r2, #1
 8002a16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a18:	2300      	movs	r3, #0
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	40010000 	.word	0x40010000
 8002a28:	40000400 	.word	0x40000400
 8002a2c:	40000800 	.word	0x40000800
 8002a30:	40000c00 	.word	0x40000c00
 8002a34:	40010400 	.word	0x40010400
 8002a38:	40014000 	.word	0x40014000
 8002a3c:	40001800 	.word	0x40001800

08002a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	691b      	ldr	r3, [r3, #16]
 8002a4e:	f003 0302 	and.w	r3, r3, #2
 8002a52:	2b02      	cmp	r3, #2
 8002a54:	d122      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	f003 0302 	and.w	r3, r3, #2
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d11b      	bne.n	8002a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f06f 0202 	mvn.w	r2, #2
 8002a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	699b      	ldr	r3, [r3, #24]
 8002a7a:	f003 0303 	and.w	r3, r3, #3
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd fe58 	bl	8000738 <HAL_TIM_IC_CaptureCallback>
 8002a88:	e005      	b.n	8002a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 fa38 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a90:	6878      	ldr	r0, [r7, #4]
 8002a92:	f000 fa3f 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	2200      	movs	r2, #0
 8002a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	f003 0304 	and.w	r3, r3, #4
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	d122      	bne.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	2b04      	cmp	r3, #4
 8002ab6:	d11b      	bne.n	8002af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f06f 0204 	mvn.w	r2, #4
 8002ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	2202      	movs	r2, #2
 8002ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ad6:	6878      	ldr	r0, [r7, #4]
 8002ad8:	f7fd fe2e 	bl	8000738 <HAL_TIM_IC_CaptureCallback>
 8002adc:	e005      	b.n	8002aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f000 fa0e 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa15 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	2200      	movs	r2, #0
 8002aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	f003 0308 	and.w	r3, r3, #8
 8002afa:	2b08      	cmp	r3, #8
 8002afc:	d122      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	68db      	ldr	r3, [r3, #12]
 8002b04:	f003 0308 	and.w	r3, r3, #8
 8002b08:	2b08      	cmp	r3, #8
 8002b0a:	d11b      	bne.n	8002b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f06f 0208 	mvn.w	r2, #8
 8002b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	2204      	movs	r2, #4
 8002b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 0303 	and.w	r3, r3, #3
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7fd fe04 	bl	8000738 <HAL_TIM_IC_CaptureCallback>
 8002b30:	e005      	b.n	8002b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b32:	6878      	ldr	r0, [r7, #4]
 8002b34:	f000 f9e4 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f000 f9eb 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	2200      	movs	r2, #0
 8002b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	691b      	ldr	r3, [r3, #16]
 8002b4a:	f003 0310 	and.w	r3, r3, #16
 8002b4e:	2b10      	cmp	r3, #16
 8002b50:	d122      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	f003 0310 	and.w	r3, r3, #16
 8002b5c:	2b10      	cmp	r3, #16
 8002b5e:	d11b      	bne.n	8002b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f06f 0210 	mvn.w	r2, #16
 8002b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	2208      	movs	r2, #8
 8002b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	69db      	ldr	r3, [r3, #28]
 8002b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d003      	beq.n	8002b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b7e:	6878      	ldr	r0, [r7, #4]
 8002b80:	f7fd fdda 	bl	8000738 <HAL_TIM_IC_CaptureCallback>
 8002b84:	e005      	b.n	8002b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 f9ba 	bl	8002f00 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b8c:	6878      	ldr	r0, [r7, #4]
 8002b8e:	f000 f9c1 	bl	8002f14 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	691b      	ldr	r3, [r3, #16]
 8002b9e:	f003 0301 	and.w	r3, r3, #1
 8002ba2:	2b01      	cmp	r3, #1
 8002ba4:	d10e      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d107      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	f06f 0201 	mvn.w	r2, #1
 8002bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7fd fe76 	bl	80008b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bce:	2b80      	cmp	r3, #128	; 0x80
 8002bd0:	d10e      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bdc:	2b80      	cmp	r3, #128	; 0x80
 8002bde:	d107      	bne.n	8002bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fcb6 	bl	800355c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	691b      	ldr	r3, [r3, #16]
 8002bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bfa:	2b40      	cmp	r3, #64	; 0x40
 8002bfc:	d10e      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c08:	2b40      	cmp	r3, #64	; 0x40
 8002c0a:	d107      	bne.n	8002c1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f000 f986 	bl	8002f28 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	691b      	ldr	r3, [r3, #16]
 8002c22:	f003 0320 	and.w	r3, r3, #32
 8002c26:	2b20      	cmp	r3, #32
 8002c28:	d10e      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	f003 0320 	and.w	r3, r3, #32
 8002c34:	2b20      	cmp	r3, #32
 8002c36:	d107      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f06f 0220 	mvn.w	r2, #32
 8002c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c42:	6878      	ldr	r0, [r7, #4]
 8002c44:	f000 fc80 	bl	8003548 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c48:	bf00      	nop
 8002c4a:	3708      	adds	r7, #8
 8002c4c:	46bd      	mov	sp, r7
 8002c4e:	bd80      	pop	{r7, pc}

08002c50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d101      	bne.n	8002c6a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002c66:	2302      	movs	r3, #2
 8002c68:	e082      	b.n	8002d70 <HAL_TIM_IC_ConfigChannel+0x120>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d11b      	bne.n	8002cb0 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	6818      	ldr	r0, [r3, #0]
 8002c7c:	68bb      	ldr	r3, [r7, #8]
 8002c7e:	6819      	ldr	r1, [r3, #0]
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	685a      	ldr	r2, [r3, #4]
 8002c84:	68bb      	ldr	r3, [r7, #8]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f000 f9f8 	bl	800307c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	699a      	ldr	r2, [r3, #24]
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f022 020c 	bic.w	r2, r2, #12
 8002c9a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	6999      	ldr	r1, [r3, #24]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	689a      	ldr	r2, [r3, #8]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	430a      	orrs	r2, r1
 8002cac:	619a      	str	r2, [r3, #24]
 8002cae:	e05a      	b.n	8002d66 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	2b04      	cmp	r3, #4
 8002cb4:	d11c      	bne.n	8002cf0 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6818      	ldr	r0, [r3, #0]
 8002cba:	68bb      	ldr	r3, [r7, #8]
 8002cbc:	6819      	ldr	r1, [r3, #0]
 8002cbe:	68bb      	ldr	r3, [r7, #8]
 8002cc0:	685a      	ldr	r2, [r3, #4]
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	68db      	ldr	r3, [r3, #12]
 8002cc6:	f000 fa7c 	bl	80031c2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	699a      	ldr	r2, [r3, #24]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002cd8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	6999      	ldr	r1, [r3, #24]
 8002ce0:	68bb      	ldr	r3, [r7, #8]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	021a      	lsls	r2, r3, #8
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	430a      	orrs	r2, r1
 8002cec:	619a      	str	r2, [r3, #24]
 8002cee:	e03a      	b.n	8002d66 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11b      	bne.n	8002d2e <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	6818      	ldr	r0, [r3, #0]
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	6819      	ldr	r1, [r3, #0]
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	685a      	ldr	r2, [r3, #4]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	68db      	ldr	r3, [r3, #12]
 8002d06:	f000 fac9 	bl	800329c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	69da      	ldr	r2, [r3, #28]
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f022 020c 	bic.w	r2, r2, #12
 8002d18:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	69d9      	ldr	r1, [r3, #28]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	689a      	ldr	r2, [r3, #8]
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	61da      	str	r2, [r3, #28]
 8002d2c:	e01b      	b.n	8002d66 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	6818      	ldr	r0, [r3, #0]
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	6819      	ldr	r1, [r3, #0]
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	685a      	ldr	r2, [r3, #4]
 8002d3a:	68bb      	ldr	r3, [r7, #8]
 8002d3c:	68db      	ldr	r3, [r3, #12]
 8002d3e:	f000 fae9 	bl	8003314 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	69da      	ldr	r2, [r3, #28]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002d50:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	69d9      	ldr	r1, [r3, #28]
 8002d58:	68bb      	ldr	r3, [r7, #8]
 8002d5a:	689b      	ldr	r3, [r3, #8]
 8002d5c:	021a      	lsls	r2, r3, #8
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	430a      	orrs	r2, r1
 8002d64:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002d6e:	2300      	movs	r3, #0
}
 8002d70:	4618      	mov	r0, r3
 8002d72:	3710      	adds	r7, #16
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}

08002d78 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d78:	b580      	push	{r7, lr}
 8002d7a:	b084      	sub	sp, #16
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
 8002d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIM_ConfigClockSource+0x18>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e0b3      	b.n	8002ef8 <HAL_TIM_ConfigClockSource+0x180>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2202      	movs	r2, #2
 8002d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002dae:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002db6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dc8:	d03e      	beq.n	8002e48 <HAL_TIM_ConfigClockSource+0xd0>
 8002dca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002dce:	f200 8087 	bhi.w	8002ee0 <HAL_TIM_ConfigClockSource+0x168>
 8002dd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dd6:	f000 8085 	beq.w	8002ee4 <HAL_TIM_ConfigClockSource+0x16c>
 8002dda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dde:	d87f      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x168>
 8002de0:	2b70      	cmp	r3, #112	; 0x70
 8002de2:	d01a      	beq.n	8002e1a <HAL_TIM_ConfigClockSource+0xa2>
 8002de4:	2b70      	cmp	r3, #112	; 0x70
 8002de6:	d87b      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x168>
 8002de8:	2b60      	cmp	r3, #96	; 0x60
 8002dea:	d050      	beq.n	8002e8e <HAL_TIM_ConfigClockSource+0x116>
 8002dec:	2b60      	cmp	r3, #96	; 0x60
 8002dee:	d877      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x168>
 8002df0:	2b50      	cmp	r3, #80	; 0x50
 8002df2:	d03c      	beq.n	8002e6e <HAL_TIM_ConfigClockSource+0xf6>
 8002df4:	2b50      	cmp	r3, #80	; 0x50
 8002df6:	d873      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x168>
 8002df8:	2b40      	cmp	r3, #64	; 0x40
 8002dfa:	d058      	beq.n	8002eae <HAL_TIM_ConfigClockSource+0x136>
 8002dfc:	2b40      	cmp	r3, #64	; 0x40
 8002dfe:	d86f      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x168>
 8002e00:	2b30      	cmp	r3, #48	; 0x30
 8002e02:	d064      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x156>
 8002e04:	2b30      	cmp	r3, #48	; 0x30
 8002e06:	d86b      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x168>
 8002e08:	2b20      	cmp	r3, #32
 8002e0a:	d060      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x156>
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d867      	bhi.n	8002ee0 <HAL_TIM_ConfigClockSource+0x168>
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d05c      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x156>
 8002e14:	2b10      	cmp	r3, #16
 8002e16:	d05a      	beq.n	8002ece <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8002e18:	e062      	b.n	8002ee0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	6899      	ldr	r1, [r3, #8]
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	685a      	ldr	r2, [r3, #4]
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	68db      	ldr	r3, [r3, #12]
 8002e2a:	f000 facb 	bl	80033c4 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e3c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	68fa      	ldr	r2, [r7, #12]
 8002e44:	609a      	str	r2, [r3, #8]
      break;
 8002e46:	e04e      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6818      	ldr	r0, [r3, #0]
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	6899      	ldr	r1, [r3, #8]
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	683b      	ldr	r3, [r7, #0]
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	f000 fab4 	bl	80033c4 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	689a      	ldr	r2, [r3, #8]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e6a:	609a      	str	r2, [r3, #8]
      break;
 8002e6c:	e03b      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	6859      	ldr	r1, [r3, #4]
 8002e76:	683b      	ldr	r3, [r7, #0]
 8002e78:	68db      	ldr	r3, [r3, #12]
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	f000 f972 	bl	8003164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	2150      	movs	r1, #80	; 0x50
 8002e86:	4618      	mov	r0, r3
 8002e88:	f000 fa81 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002e8c:	e02b      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	6818      	ldr	r0, [r3, #0]
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	6859      	ldr	r1, [r3, #4]
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	68db      	ldr	r3, [r3, #12]
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f000 f9ce 	bl	800323c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	2160      	movs	r1, #96	; 0x60
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	f000 fa71 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002eac:	e01b      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6818      	ldr	r0, [r3, #0]
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	6859      	ldr	r1, [r3, #4]
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	68db      	ldr	r3, [r3, #12]
 8002eba:	461a      	mov	r2, r3
 8002ebc:	f000 f952 	bl	8003164 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	2140      	movs	r1, #64	; 0x40
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f000 fa61 	bl	800338e <TIM_ITRx_SetConfig>
      break;
 8002ecc:	e00b      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	4610      	mov	r0, r2
 8002eda:	f000 fa58 	bl	800338e <TIM_ITRx_SetConfig>
        break;
 8002ede:	e002      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ee0:	bf00      	nop
 8002ee2:	e000      	b.n	8002ee6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8002ee4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2201      	movs	r2, #1
 8002eea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002ef6:	2300      	movs	r3, #0
}
 8002ef8:	4618      	mov	r0, r3
 8002efa:	3710      	adds	r7, #16
 8002efc:	46bd      	mov	sp, r7
 8002efe:	bd80      	pop	{r7, pc}

08002f00 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f08:	bf00      	nop
 8002f0a:	370c      	adds	r7, #12
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f12:	4770      	bx	lr

08002f14 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f14:	b480      	push	{r7}
 8002f16:	b083      	sub	sp, #12
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr

08002f3c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002f3c:	b480      	push	{r7}
 8002f3e:	b085      	sub	sp, #20
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]
 8002f44:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	4a40      	ldr	r2, [pc, #256]	; (8003050 <TIM_Base_SetConfig+0x114>)
 8002f50:	4293      	cmp	r3, r2
 8002f52:	d013      	beq.n	8002f7c <TIM_Base_SetConfig+0x40>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5a:	d00f      	beq.n	8002f7c <TIM_Base_SetConfig+0x40>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4a3d      	ldr	r2, [pc, #244]	; (8003054 <TIM_Base_SetConfig+0x118>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d00b      	beq.n	8002f7c <TIM_Base_SetConfig+0x40>
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	4a3c      	ldr	r2, [pc, #240]	; (8003058 <TIM_Base_SetConfig+0x11c>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d007      	beq.n	8002f7c <TIM_Base_SetConfig+0x40>
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	4a3b      	ldr	r2, [pc, #236]	; (800305c <TIM_Base_SetConfig+0x120>)
 8002f70:	4293      	cmp	r3, r2
 8002f72:	d003      	beq.n	8002f7c <TIM_Base_SetConfig+0x40>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4a3a      	ldr	r2, [pc, #232]	; (8003060 <TIM_Base_SetConfig+0x124>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d108      	bne.n	8002f8e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f82:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	68fa      	ldr	r2, [r7, #12]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4a2f      	ldr	r2, [pc, #188]	; (8003050 <TIM_Base_SetConfig+0x114>)
 8002f92:	4293      	cmp	r3, r2
 8002f94:	d02b      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f9c:	d027      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	4a2c      	ldr	r2, [pc, #176]	; (8003054 <TIM_Base_SetConfig+0x118>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d023      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4a2b      	ldr	r2, [pc, #172]	; (8003058 <TIM_Base_SetConfig+0x11c>)
 8002faa:	4293      	cmp	r3, r2
 8002fac:	d01f      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	4a2a      	ldr	r2, [pc, #168]	; (800305c <TIM_Base_SetConfig+0x120>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d01b      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	4a29      	ldr	r2, [pc, #164]	; (8003060 <TIM_Base_SetConfig+0x124>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d017      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	4a28      	ldr	r2, [pc, #160]	; (8003064 <TIM_Base_SetConfig+0x128>)
 8002fc2:	4293      	cmp	r3, r2
 8002fc4:	d013      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	4a27      	ldr	r2, [pc, #156]	; (8003068 <TIM_Base_SetConfig+0x12c>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d00f      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	4a26      	ldr	r2, [pc, #152]	; (800306c <TIM_Base_SetConfig+0x130>)
 8002fd2:	4293      	cmp	r3, r2
 8002fd4:	d00b      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	4a25      	ldr	r2, [pc, #148]	; (8003070 <TIM_Base_SetConfig+0x134>)
 8002fda:	4293      	cmp	r3, r2
 8002fdc:	d007      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4a24      	ldr	r2, [pc, #144]	; (8003074 <TIM_Base_SetConfig+0x138>)
 8002fe2:	4293      	cmp	r3, r2
 8002fe4:	d003      	beq.n	8002fee <TIM_Base_SetConfig+0xb2>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	4a23      	ldr	r2, [pc, #140]	; (8003078 <TIM_Base_SetConfig+0x13c>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d108      	bne.n	8003000 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ff4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	68db      	ldr	r3, [r3, #12]
 8002ffa:	68fa      	ldr	r2, [r7, #12]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	695b      	ldr	r3, [r3, #20]
 800300a:	4313      	orrs	r3, r2
 800300c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	68fa      	ldr	r2, [r7, #12]
 8003012:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	689a      	ldr	r2, [r3, #8]
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	4a0a      	ldr	r2, [pc, #40]	; (8003050 <TIM_Base_SetConfig+0x114>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d003      	beq.n	8003034 <TIM_Base_SetConfig+0xf8>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	4a0c      	ldr	r2, [pc, #48]	; (8003060 <TIM_Base_SetConfig+0x124>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d103      	bne.n	800303c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	691a      	ldr	r2, [r3, #16]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	615a      	str	r2, [r3, #20]
}
 8003042:	bf00      	nop
 8003044:	3714      	adds	r7, #20
 8003046:	46bd      	mov	sp, r7
 8003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304c:	4770      	bx	lr
 800304e:	bf00      	nop
 8003050:	40010000 	.word	0x40010000
 8003054:	40000400 	.word	0x40000400
 8003058:	40000800 	.word	0x40000800
 800305c:	40000c00 	.word	0x40000c00
 8003060:	40010400 	.word	0x40010400
 8003064:	40014000 	.word	0x40014000
 8003068:	40014400 	.word	0x40014400
 800306c:	40014800 	.word	0x40014800
 8003070:	40001800 	.word	0x40001800
 8003074:	40001c00 	.word	0x40001c00
 8003078:	40002000 	.word	0x40002000

0800307c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	60f8      	str	r0, [r7, #12]
 8003084:	60b9      	str	r1, [r7, #8]
 8003086:	607a      	str	r2, [r7, #4]
 8003088:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	f023 0201 	bic.w	r2, r3, #1
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	699b      	ldr	r3, [r3, #24]
 800309a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	6a1b      	ldr	r3, [r3, #32]
 80030a0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	4a28      	ldr	r2, [pc, #160]	; (8003148 <TIM_TI1_SetConfig+0xcc>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d01b      	beq.n	80030e2 <TIM_TI1_SetConfig+0x66>
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030b0:	d017      	beq.n	80030e2 <TIM_TI1_SetConfig+0x66>
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	4a25      	ldr	r2, [pc, #148]	; (800314c <TIM_TI1_SetConfig+0xd0>)
 80030b6:	4293      	cmp	r3, r2
 80030b8:	d013      	beq.n	80030e2 <TIM_TI1_SetConfig+0x66>
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	4a24      	ldr	r2, [pc, #144]	; (8003150 <TIM_TI1_SetConfig+0xd4>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d00f      	beq.n	80030e2 <TIM_TI1_SetConfig+0x66>
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	4a23      	ldr	r2, [pc, #140]	; (8003154 <TIM_TI1_SetConfig+0xd8>)
 80030c6:	4293      	cmp	r3, r2
 80030c8:	d00b      	beq.n	80030e2 <TIM_TI1_SetConfig+0x66>
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	4a22      	ldr	r2, [pc, #136]	; (8003158 <TIM_TI1_SetConfig+0xdc>)
 80030ce:	4293      	cmp	r3, r2
 80030d0:	d007      	beq.n	80030e2 <TIM_TI1_SetConfig+0x66>
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4a21      	ldr	r2, [pc, #132]	; (800315c <TIM_TI1_SetConfig+0xe0>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d003      	beq.n	80030e2 <TIM_TI1_SetConfig+0x66>
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	4a20      	ldr	r2, [pc, #128]	; (8003160 <TIM_TI1_SetConfig+0xe4>)
 80030de:	4293      	cmp	r3, r2
 80030e0:	d101      	bne.n	80030e6 <TIM_TI1_SetConfig+0x6a>
 80030e2:	2301      	movs	r3, #1
 80030e4:	e000      	b.n	80030e8 <TIM_TI1_SetConfig+0x6c>
 80030e6:	2300      	movs	r3, #0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d008      	beq.n	80030fe <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	f023 0303 	bic.w	r3, r3, #3
 80030f2:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	4313      	orrs	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
 80030fc:	e003      	b.n	8003106 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80030fe:	697b      	ldr	r3, [r7, #20]
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003106:	697b      	ldr	r3, [r7, #20]
 8003108:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800310c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	011b      	lsls	r3, r3, #4
 8003112:	b2db      	uxtb	r3, r3
 8003114:	697a      	ldr	r2, [r7, #20]
 8003116:	4313      	orrs	r3, r2
 8003118:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	f023 030a 	bic.w	r3, r3, #10
 8003120:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	f003 030a 	and.w	r3, r3, #10
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	4313      	orrs	r3, r2
 800312c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	697a      	ldr	r2, [r7, #20]
 8003132:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	693a      	ldr	r2, [r7, #16]
 8003138:	621a      	str	r2, [r3, #32]
}
 800313a:	bf00      	nop
 800313c:	371c      	adds	r7, #28
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr
 8003146:	bf00      	nop
 8003148:	40010000 	.word	0x40010000
 800314c:	40000400 	.word	0x40000400
 8003150:	40000800 	.word	0x40000800
 8003154:	40000c00 	.word	0x40000c00
 8003158:	40010400 	.word	0x40010400
 800315c:	40014000 	.word	0x40014000
 8003160:	40001800 	.word	0x40001800

08003164 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003164:	b480      	push	{r7}
 8003166:	b087      	sub	sp, #28
 8003168:	af00      	add	r7, sp, #0
 800316a:	60f8      	str	r0, [r7, #12]
 800316c:	60b9      	str	r1, [r7, #8]
 800316e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	6a1b      	ldr	r3, [r3, #32]
 8003174:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6a1b      	ldr	r3, [r3, #32]
 800317a:	f023 0201 	bic.w	r2, r3, #1
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	699b      	ldr	r3, [r3, #24]
 8003186:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800318e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	011b      	lsls	r3, r3, #4
 8003194:	693a      	ldr	r2, [r7, #16]
 8003196:	4313      	orrs	r3, r2
 8003198:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f023 030a 	bic.w	r3, r3, #10
 80031a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80031a2:	697a      	ldr	r2, [r7, #20]
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	4313      	orrs	r3, r2
 80031a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	693a      	ldr	r2, [r7, #16]
 80031ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	697a      	ldr	r2, [r7, #20]
 80031b4:	621a      	str	r2, [r3, #32]
}
 80031b6:	bf00      	nop
 80031b8:	371c      	adds	r7, #28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c0:	4770      	bx	lr

080031c2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80031c2:	b480      	push	{r7}
 80031c4:	b087      	sub	sp, #28
 80031c6:	af00      	add	r7, sp, #0
 80031c8:	60f8      	str	r0, [r7, #12]
 80031ca:	60b9      	str	r1, [r7, #8]
 80031cc:	607a      	str	r2, [r7, #4]
 80031ce:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	6a1b      	ldr	r3, [r3, #32]
 80031d4:	f023 0210 	bic.w	r2, r3, #16
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	699b      	ldr	r3, [r3, #24]
 80031e0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6a1b      	ldr	r3, [r3, #32]
 80031e6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031e8:	697b      	ldr	r3, [r7, #20]
 80031ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ee:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	021b      	lsls	r3, r3, #8
 80031f4:	697a      	ldr	r2, [r7, #20]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003200:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003202:	683b      	ldr	r3, [r7, #0]
 8003204:	031b      	lsls	r3, r3, #12
 8003206:	b29b      	uxth	r3, r3
 8003208:	697a      	ldr	r2, [r7, #20]
 800320a:	4313      	orrs	r3, r2
 800320c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800320e:	693b      	ldr	r3, [r7, #16]
 8003210:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003214:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	011b      	lsls	r3, r3, #4
 800321a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800321e:	693a      	ldr	r2, [r7, #16]
 8003220:	4313      	orrs	r3, r2
 8003222:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	693a      	ldr	r2, [r7, #16]
 800322e:	621a      	str	r2, [r3, #32]
}
 8003230:	bf00      	nop
 8003232:	371c      	adds	r7, #28
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr

0800323c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800323c:	b480      	push	{r7}
 800323e:	b087      	sub	sp, #28
 8003240:	af00      	add	r7, sp, #0
 8003242:	60f8      	str	r0, [r7, #12]
 8003244:	60b9      	str	r1, [r7, #8]
 8003246:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6a1b      	ldr	r3, [r3, #32]
 800324c:	f023 0210 	bic.w	r2, r3, #16
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	699b      	ldr	r3, [r3, #24]
 8003258:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	6a1b      	ldr	r3, [r3, #32]
 800325e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003260:	697b      	ldr	r3, [r7, #20]
 8003262:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003266:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	031b      	lsls	r3, r3, #12
 800326c:	697a      	ldr	r2, [r7, #20]
 800326e:	4313      	orrs	r3, r2
 8003270:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003278:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	011b      	lsls	r3, r3, #4
 800327e:	693a      	ldr	r2, [r7, #16]
 8003280:	4313      	orrs	r3, r2
 8003282:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	621a      	str	r2, [r3, #32]
}
 8003290:	bf00      	nop
 8003292:	371c      	adds	r7, #28
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800329c:	b480      	push	{r7}
 800329e:	b087      	sub	sp, #28
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
 80032a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	6a1b      	ldr	r3, [r3, #32]
 80032ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	69db      	ldr	r3, [r3, #28]
 80032ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	6a1b      	ldr	r3, [r3, #32]
 80032c0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	f023 0303 	bic.w	r3, r3, #3
 80032c8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80032ca:	697a      	ldr	r2, [r7, #20]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	4313      	orrs	r3, r2
 80032d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80032d8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	011b      	lsls	r3, r3, #4
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	697a      	ldr	r2, [r7, #20]
 80032e2:	4313      	orrs	r3, r2
 80032e4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032e6:	693b      	ldr	r3, [r7, #16]
 80032e8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80032ec:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032ee:	68bb      	ldr	r3, [r7, #8]
 80032f0:	021b      	lsls	r3, r3, #8
 80032f2:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80032f6:	693a      	ldr	r2, [r7, #16]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	697a      	ldr	r2, [r7, #20]
 8003300:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	693a      	ldr	r2, [r7, #16]
 8003306:	621a      	str	r2, [r3, #32]
}
 8003308:	bf00      	nop
 800330a:	371c      	adds	r7, #28
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr

08003314 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003314:	b480      	push	{r7}
 8003316:	b087      	sub	sp, #28
 8003318:	af00      	add	r7, sp, #0
 800331a:	60f8      	str	r0, [r7, #12]
 800331c:	60b9      	str	r1, [r7, #8]
 800331e:	607a      	str	r2, [r7, #4]
 8003320:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	6a1b      	ldr	r3, [r3, #32]
 8003326:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	69db      	ldr	r3, [r3, #28]
 8003332:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800333a:	697b      	ldr	r3, [r7, #20]
 800333c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003340:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	021b      	lsls	r3, r3, #8
 8003346:	697a      	ldr	r2, [r7, #20]
 8003348:	4313      	orrs	r3, r2
 800334a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003352:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	031b      	lsls	r3, r3, #12
 8003358:	b29b      	uxth	r3, r3
 800335a:	697a      	ldr	r2, [r7, #20]
 800335c:	4313      	orrs	r3, r2
 800335e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003366:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	031b      	lsls	r3, r3, #12
 800336c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003370:	693a      	ldr	r2, [r7, #16]
 8003372:	4313      	orrs	r3, r2
 8003374:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	697a      	ldr	r2, [r7, #20]
 800337a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	621a      	str	r2, [r3, #32]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr

0800338e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800338e:	b480      	push	{r7}
 8003390:	b085      	sub	sp, #20
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
 8003396:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033a4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a6:	683a      	ldr	r2, [r7, #0]
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	4313      	orrs	r3, r2
 80033ac:	f043 0307 	orr.w	r3, r3, #7
 80033b0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	609a      	str	r2, [r3, #8]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c4:	b480      	push	{r7}
 80033c6:	b087      	sub	sp, #28
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	607a      	str	r2, [r7, #4]
 80033d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d8:	697b      	ldr	r3, [r7, #20]
 80033da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	021a      	lsls	r2, r3, #8
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	431a      	orrs	r2, r3
 80033e8:	68bb      	ldr	r3, [r7, #8]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	697a      	ldr	r2, [r7, #20]
 80033ee:	4313      	orrs	r3, r2
 80033f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	697a      	ldr	r2, [r7, #20]
 80033f6:	609a      	str	r2, [r3, #8]
}
 80033f8:	bf00      	nop
 80033fa:	371c      	adds	r7, #28
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003404:	b480      	push	{r7}
 8003406:	b087      	sub	sp, #28
 8003408:	af00      	add	r7, sp, #0
 800340a:	60f8      	str	r0, [r7, #12]
 800340c:	60b9      	str	r1, [r7, #8]
 800340e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	f003 031f 	and.w	r3, r3, #31
 8003416:	2201      	movs	r2, #1
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	6a1a      	ldr	r2, [r3, #32]
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	43db      	mvns	r3, r3
 8003426:	401a      	ands	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1a      	ldr	r2, [r3, #32]
 8003430:	68bb      	ldr	r3, [r7, #8]
 8003432:	f003 031f 	and.w	r3, r3, #31
 8003436:	6879      	ldr	r1, [r7, #4]
 8003438:	fa01 f303 	lsl.w	r3, r1, r3
 800343c:	431a      	orrs	r2, r3
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	621a      	str	r2, [r3, #32]
}
 8003442:	bf00      	nop
 8003444:	371c      	adds	r7, #28
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
	...

08003450 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	6078      	str	r0, [r7, #4]
 8003458:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003460:	2b01      	cmp	r3, #1
 8003462:	d101      	bne.n	8003468 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003464:	2302      	movs	r3, #2
 8003466:	e05a      	b.n	800351e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2202      	movs	r2, #2
 8003474:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800348e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	68fa      	ldr	r2, [r7, #12]
 8003496:	4313      	orrs	r3, r2
 8003498:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68fa      	ldr	r2, [r7, #12]
 80034a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	4a21      	ldr	r2, [pc, #132]	; (800352c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80034a8:	4293      	cmp	r3, r2
 80034aa:	d022      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034b4:	d01d      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	4a1d      	ldr	r2, [pc, #116]	; (8003530 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d018      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	4a1b      	ldr	r2, [pc, #108]	; (8003534 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80034c6:	4293      	cmp	r3, r2
 80034c8:	d013      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	4a1a      	ldr	r2, [pc, #104]	; (8003538 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80034d0:	4293      	cmp	r3, r2
 80034d2:	d00e      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d009      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d004      	beq.n	80034f2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4a15      	ldr	r2, [pc, #84]	; (8003544 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d10c      	bne.n	800350c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034f2:	68bb      	ldr	r3, [r7, #8]
 80034f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80034f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	4313      	orrs	r3, r2
 8003502:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800351c:	2300      	movs	r3, #0
}
 800351e:	4618      	mov	r0, r3
 8003520:	3714      	adds	r7, #20
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	40010000 	.word	0x40010000
 8003530:	40000400 	.word	0x40000400
 8003534:	40000800 	.word	0x40000800
 8003538:	40000c00 	.word	0x40000c00
 800353c:	40010400 	.word	0x40010400
 8003540:	40014000 	.word	0x40014000
 8003544:	40001800 	.word	0x40001800

08003548 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003548:	b480      	push	{r7}
 800354a:	b083      	sub	sp, #12
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003550:	bf00      	nop
 8003552:	370c      	adds	r7, #12
 8003554:	46bd      	mov	sp, r7
 8003556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800355a:	4770      	bx	lr

0800355c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800355c:	b480      	push	{r7}
 800355e:	b083      	sub	sp, #12
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003564:	bf00      	nop
 8003566:	370c      	adds	r7, #12
 8003568:	46bd      	mov	sp, r7
 800356a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356e:	4770      	bx	lr

08003570 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2b00      	cmp	r3, #0
 800357c:	d101      	bne.n	8003582 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e03f      	b.n	8003602 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003588:	b2db      	uxtb	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d106      	bne.n	800359c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003596:	6878      	ldr	r0, [r7, #4]
 8003598:	f7fd fb5a 	bl	8000c50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2224      	movs	r2, #36	; 0x24
 80035a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	68da      	ldr	r2, [r3, #12]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80035b2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 fb3f 	bl	8003c38 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	691a      	ldr	r2, [r3, #16]
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80035c8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	695a      	ldr	r2, [r3, #20]
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80035d8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	68da      	ldr	r2, [r3, #12]
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80035e8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2200      	movs	r2, #0
 80035ee:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2220      	movs	r2, #32
 80035fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}
	...

0800360c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800360c:	b580      	push	{r7, lr}
 800360e:	b08a      	sub	sp, #40	; 0x28
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	68db      	ldr	r3, [r3, #12]
 8003622:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800362c:	2300      	movs	r3, #0
 800362e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8003630:	2300      	movs	r3, #0
 8003632:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	f003 030f 	and.w	r3, r3, #15
 800363a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800363c:	69bb      	ldr	r3, [r7, #24]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d10d      	bne.n	800365e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	f003 0320 	and.w	r3, r3, #32
 8003648:	2b00      	cmp	r3, #0
 800364a:	d008      	beq.n	800365e <HAL_UART_IRQHandler+0x52>
 800364c:	6a3b      	ldr	r3, [r7, #32]
 800364e:	f003 0320 	and.w	r3, r3, #32
 8003652:	2b00      	cmp	r3, #0
 8003654:	d003      	beq.n	800365e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8003656:	6878      	ldr	r0, [r7, #4]
 8003658:	f000 fa57 	bl	8003b0a <UART_Receive_IT>
      return;
 800365c:	e17c      	b.n	8003958 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800365e:	69bb      	ldr	r3, [r7, #24]
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 80b1 	beq.w	80037c8 <HAL_UART_IRQHandler+0x1bc>
 8003666:	69fb      	ldr	r3, [r7, #28]
 8003668:	f003 0301 	and.w	r3, r3, #1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d105      	bne.n	800367c <HAL_UART_IRQHandler+0x70>
 8003670:	6a3b      	ldr	r3, [r7, #32]
 8003672:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8003676:	2b00      	cmp	r3, #0
 8003678:	f000 80a6 	beq.w	80037c8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800367c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00a      	beq.n	800369c <HAL_UART_IRQHandler+0x90>
 8003686:	6a3b      	ldr	r3, [r7, #32]
 8003688:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800368c:	2b00      	cmp	r3, #0
 800368e:	d005      	beq.n	800369c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003694:	f043 0201 	orr.w	r2, r3, #1
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800369c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800369e:	f003 0304 	and.w	r3, r3, #4
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d00a      	beq.n	80036bc <HAL_UART_IRQHandler+0xb0>
 80036a6:	69fb      	ldr	r3, [r7, #28]
 80036a8:	f003 0301 	and.w	r3, r3, #1
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d005      	beq.n	80036bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b4:	f043 0202 	orr.w	r2, r3, #2
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80036bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036be:	f003 0302 	and.w	r3, r3, #2
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d00a      	beq.n	80036dc <HAL_UART_IRQHandler+0xd0>
 80036c6:	69fb      	ldr	r3, [r7, #28]
 80036c8:	f003 0301 	and.w	r3, r3, #1
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d005      	beq.n	80036dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d4:	f043 0204 	orr.w	r2, r3, #4
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80036dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00f      	beq.n	8003706 <HAL_UART_IRQHandler+0xfa>
 80036e6:	6a3b      	ldr	r3, [r7, #32]
 80036e8:	f003 0320 	and.w	r3, r3, #32
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d104      	bne.n	80036fa <HAL_UART_IRQHandler+0xee>
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	f003 0301 	and.w	r3, r3, #1
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d005      	beq.n	8003706 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fe:	f043 0208 	orr.w	r2, r3, #8
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370a:	2b00      	cmp	r3, #0
 800370c:	f000 811f 	beq.w	800394e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003712:	f003 0320 	and.w	r3, r3, #32
 8003716:	2b00      	cmp	r3, #0
 8003718:	d007      	beq.n	800372a <HAL_UART_IRQHandler+0x11e>
 800371a:	6a3b      	ldr	r3, [r7, #32]
 800371c:	f003 0320 	and.w	r3, r3, #32
 8003720:	2b00      	cmp	r3, #0
 8003722:	d002      	beq.n	800372a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8003724:	6878      	ldr	r0, [r7, #4]
 8003726:	f000 f9f0 	bl	8003b0a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	695b      	ldr	r3, [r3, #20]
 8003730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003734:	2b40      	cmp	r3, #64	; 0x40
 8003736:	bf0c      	ite	eq
 8003738:	2301      	moveq	r3, #1
 800373a:	2300      	movne	r3, #0
 800373c:	b2db      	uxtb	r3, r3
 800373e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003744:	f003 0308 	and.w	r3, r3, #8
 8003748:	2b00      	cmp	r3, #0
 800374a:	d102      	bne.n	8003752 <HAL_UART_IRQHandler+0x146>
 800374c:	697b      	ldr	r3, [r7, #20]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d031      	beq.n	80037b6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003752:	6878      	ldr	r0, [r7, #4]
 8003754:	f000 f930 	bl	80039b8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	695b      	ldr	r3, [r3, #20]
 800375e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003762:	2b40      	cmp	r3, #64	; 0x40
 8003764:	d123      	bne.n	80037ae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	695a      	ldr	r2, [r3, #20]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003774:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800377a:	2b00      	cmp	r3, #0
 800377c:	d013      	beq.n	80037a6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003782:	4a77      	ldr	r2, [pc, #476]	; (8003960 <HAL_UART_IRQHandler+0x354>)
 8003784:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800378a:	4618      	mov	r0, r3
 800378c:	f7fd fdae 	bl	80012ec <HAL_DMA_Abort_IT>
 8003790:	4603      	mov	r3, r0
 8003792:	2b00      	cmp	r3, #0
 8003794:	d016      	beq.n	80037c4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80037a0:	4610      	mov	r0, r2
 80037a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037a4:	e00e      	b.n	80037c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80037a6:	6878      	ldr	r0, [r7, #4]
 80037a8:	f000 f8f0 	bl	800398c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ac:	e00a      	b.n	80037c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 f8ec 	bl	800398c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037b4:	e006      	b.n	80037c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80037b6:	6878      	ldr	r0, [r7, #4]
 80037b8:	f000 f8e8 	bl	800398c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80037c2:	e0c4      	b.n	800394e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037c4:	bf00      	nop
    return;
 80037c6:	e0c2      	b.n	800394e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	f040 80a2 	bne.w	8003916 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	f003 0310 	and.w	r3, r3, #16
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 809c 	beq.w	8003916 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80037de:	6a3b      	ldr	r3, [r7, #32]
 80037e0:	f003 0310 	and.w	r3, r3, #16
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	f000 8096 	beq.w	8003916 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80037ea:	2300      	movs	r3, #0
 80037ec:	60fb      	str	r3, [r7, #12]
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	60fb      	str	r3, [r7, #12]
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	685b      	ldr	r3, [r3, #4]
 80037fc:	60fb      	str	r3, [r7, #12]
 80037fe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	695b      	ldr	r3, [r3, #20]
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b40      	cmp	r3, #64	; 0x40
 800380c:	d14f      	bne.n	80038ae <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8003818:	8a3b      	ldrh	r3, [r7, #16]
 800381a:	2b00      	cmp	r3, #0
 800381c:	f000 8099 	beq.w	8003952 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003824:	8a3a      	ldrh	r2, [r7, #16]
 8003826:	429a      	cmp	r2, r3
 8003828:	f080 8093 	bcs.w	8003952 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	8a3a      	ldrh	r2, [r7, #16]
 8003830:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003836:	69db      	ldr	r3, [r3, #28]
 8003838:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800383c:	d02b      	beq.n	8003896 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68da      	ldr	r2, [r3, #12]
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800384c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	695a      	ldr	r2, [r3, #20]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0201 	bic.w	r2, r2, #1
 800385c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	695a      	ldr	r2, [r3, #20]
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800386c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2220      	movs	r2, #32
 8003872:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	2200      	movs	r2, #0
 800387a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	68da      	ldr	r2, [r3, #12]
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f022 0210 	bic.w	r2, r2, #16
 800388a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003890:	4618      	mov	r0, r3
 8003892:	f7fd fcbb 	bl	800120c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800389e:	b29b      	uxth	r3, r3
 80038a0:	1ad3      	subs	r3, r2, r3
 80038a2:	b29b      	uxth	r3, r3
 80038a4:	4619      	mov	r1, r3
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f000 f87a 	bl	80039a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80038ac:	e051      	b.n	8003952 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d047      	beq.n	8003956 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80038c6:	8a7b      	ldrh	r3, [r7, #18]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d044      	beq.n	8003956 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	68da      	ldr	r2, [r3, #12]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80038da:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	695a      	ldr	r2, [r3, #20]
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f022 0201 	bic.w	r2, r2, #1
 80038ea:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2220      	movs	r2, #32
 80038f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	2200      	movs	r2, #0
 80038f8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	68da      	ldr	r2, [r3, #12]
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f022 0210 	bic.w	r2, r2, #16
 8003908:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800390a:	8a7b      	ldrh	r3, [r7, #18]
 800390c:	4619      	mov	r1, r3
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f846 	bl	80039a0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8003914:	e01f      	b.n	8003956 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <HAL_UART_IRQHandler+0x326>
 8003920:	6a3b      	ldr	r3, [r7, #32]
 8003922:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003926:	2b00      	cmp	r3, #0
 8003928:	d003      	beq.n	8003932 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800392a:	6878      	ldr	r0, [r7, #4]
 800392c:	f000 f885 	bl	8003a3a <UART_Transmit_IT>
    return;
 8003930:	e012      	b.n	8003958 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003932:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003938:	2b00      	cmp	r3, #0
 800393a:	d00d      	beq.n	8003958 <HAL_UART_IRQHandler+0x34c>
 800393c:	6a3b      	ldr	r3, [r7, #32]
 800393e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f000 f8c7 	bl	8003ada <UART_EndTransmit_IT>
    return;
 800394c:	e004      	b.n	8003958 <HAL_UART_IRQHandler+0x34c>
    return;
 800394e:	bf00      	nop
 8003950:	e002      	b.n	8003958 <HAL_UART_IRQHandler+0x34c>
      return;
 8003952:	bf00      	nop
 8003954:	e000      	b.n	8003958 <HAL_UART_IRQHandler+0x34c>
      return;
 8003956:	bf00      	nop
  }
}
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	08003a13 	.word	0x08003a13

08003964 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003964:	b480      	push	{r7}
 8003966:	b083      	sub	sp, #12
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800396c:	bf00      	nop
 800396e:	370c      	adds	r7, #12
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8003978:	b480      	push	{r7}
 800397a:	b083      	sub	sp, #12
 800397c:	af00      	add	r7, sp, #0
 800397e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003980:	bf00      	nop
 8003982:	370c      	adds	r7, #12
 8003984:	46bd      	mov	sp, r7
 8003986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398a:	4770      	bx	lr

0800398c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800398c:	b480      	push	{r7}
 800398e:	b083      	sub	sp, #12
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr

080039a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	460b      	mov	r3, r1
 80039aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80039ac:	bf00      	nop
 80039ae:	370c      	adds	r7, #12
 80039b0:	46bd      	mov	sp, r7
 80039b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b6:	4770      	bx	lr

080039b8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039b8:	b480      	push	{r7}
 80039ba:	b083      	sub	sp, #12
 80039bc:	af00      	add	r7, sp, #0
 80039be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	68da      	ldr	r2, [r3, #12]
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	695a      	ldr	r2, [r3, #20]
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f022 0201 	bic.w	r2, r2, #1
 80039de:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	d107      	bne.n	80039f8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f022 0210 	bic.w	r2, r2, #16
 80039f6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	2220      	movs	r2, #32
 80039fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a06:	bf00      	nop
 8003a08:	370c      	adds	r7, #12
 8003a0a:	46bd      	mov	sp, r7
 8003a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a10:	4770      	bx	lr

08003a12 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a1e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2200      	movs	r2, #0
 8003a24:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f7ff ffad 	bl	800398c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a32:	bf00      	nop
 8003a34:	3710      	adds	r7, #16
 8003a36:	46bd      	mov	sp, r7
 8003a38:	bd80      	pop	{r7, pc}

08003a3a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b085      	sub	sp, #20
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b21      	cmp	r3, #33	; 0x21
 8003a4c:	d13e      	bne.n	8003acc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003a56:	d114      	bne.n	8003a82 <UART_Transmit_IT+0x48>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	691b      	ldr	r3, [r3, #16]
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d110      	bne.n	8003a82 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	881b      	ldrh	r3, [r3, #0]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a74:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	1c9a      	adds	r2, r3, #2
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	621a      	str	r2, [r3, #32]
 8003a80:	e008      	b.n	8003a94 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6a1b      	ldr	r3, [r3, #32]
 8003a86:	1c59      	adds	r1, r3, #1
 8003a88:	687a      	ldr	r2, [r7, #4]
 8003a8a:	6211      	str	r1, [r2, #32]
 8003a8c:	781a      	ldrb	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003a98:	b29b      	uxth	r3, r3
 8003a9a:	3b01      	subs	r3, #1
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	687a      	ldr	r2, [r7, #4]
 8003aa0:	4619      	mov	r1, r3
 8003aa2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10f      	bne.n	8003ac8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68da      	ldr	r2, [r3, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003ab6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	68da      	ldr	r2, [r3, #12]
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003ac6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	e000      	b.n	8003ace <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003acc:	2302      	movs	r3, #2
  }
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3714      	adds	r7, #20
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b082      	sub	sp, #8
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	68da      	ldr	r2, [r3, #12]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003af0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2220      	movs	r2, #32
 8003af6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff ff32 	bl	8003964 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003b00:	2300      	movs	r3, #0
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3708      	adds	r7, #8
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}

08003b0a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003b0a:	b580      	push	{r7, lr}
 8003b0c:	b084      	sub	sp, #16
 8003b0e:	af00      	add	r7, sp, #0
 8003b10:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b22      	cmp	r3, #34	; 0x22
 8003b1c:	f040 8087 	bne.w	8003c2e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	689b      	ldr	r3, [r3, #8]
 8003b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b28:	d117      	bne.n	8003b5a <UART_Receive_IT+0x50>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	691b      	ldr	r3, [r3, #16]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d113      	bne.n	8003b5a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b32:	2300      	movs	r3, #0
 8003b34:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b3a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	b29b      	uxth	r3, r3
 8003b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b48:	b29a      	uxth	r2, r3
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b52:	1c9a      	adds	r2, r3, #2
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
 8003b58:	e026      	b.n	8003ba8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8003b60:	2300      	movs	r3, #0
 8003b62:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003b6c:	d007      	beq.n	8003b7e <UART_Receive_IT+0x74>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d10a      	bne.n	8003b8c <UART_Receive_IT+0x82>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	691b      	ldr	r3, [r3, #16]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d106      	bne.n	8003b8c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	685b      	ldr	r3, [r3, #4]
 8003b84:	b2da      	uxtb	r2, r3
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	701a      	strb	r2, [r3, #0]
 8003b8a:	e008      	b.n	8003b9e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003b98:	b2da      	uxtb	r2, r3
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29b      	uxth	r3, r3
 8003bb2:	687a      	ldr	r2, [r7, #4]
 8003bb4:	4619      	mov	r1, r3
 8003bb6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d136      	bne.n	8003c2a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	68da      	ldr	r2, [r3, #12]
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f022 0220 	bic.w	r2, r2, #32
 8003bca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695a      	ldr	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f022 0201 	bic.w	r2, r2, #1
 8003bea:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2220      	movs	r2, #32
 8003bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	d10e      	bne.n	8003c1a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	68da      	ldr	r2, [r3, #12]
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f022 0210 	bic.w	r2, r2, #16
 8003c0a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c10:	4619      	mov	r1, r3
 8003c12:	6878      	ldr	r0, [r7, #4]
 8003c14:	f7ff fec4 	bl	80039a0 <HAL_UARTEx_RxEventCallback>
 8003c18:	e002      	b.n	8003c20 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7ff feac 	bl	8003978 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e002      	b.n	8003c30 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
 8003c2c:	e000      	b.n	8003c30 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8003c2e:	2302      	movs	r3, #2
  }
}
 8003c30:	4618      	mov	r0, r3
 8003c32:	3710      	adds	r7, #16
 8003c34:	46bd      	mov	sp, r7
 8003c36:	bd80      	pop	{r7, pc}

08003c38 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003c3c:	b09f      	sub	sp, #124	; 0x7c
 8003c3e:	af00      	add	r7, sp, #0
 8003c40:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	691b      	ldr	r3, [r3, #16]
 8003c48:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c4e:	68d9      	ldr	r1, [r3, #12]
 8003c50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	ea40 0301 	orr.w	r3, r0, r1
 8003c58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c5c:	689a      	ldr	r2, [r3, #8]
 8003c5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c66:	695b      	ldr	r3, [r3, #20]
 8003c68:	431a      	orrs	r2, r3
 8003c6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c6c:	69db      	ldr	r3, [r3, #28]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	68db      	ldr	r3, [r3, #12]
 8003c78:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003c7c:	f021 010c 	bic.w	r1, r1, #12
 8003c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003c86:	430b      	orrs	r3, r1
 8003c88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	695b      	ldr	r3, [r3, #20]
 8003c90:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c96:	6999      	ldr	r1, [r3, #24]
 8003c98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	ea40 0301 	orr.w	r3, r0, r1
 8003ca0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	4bc5      	ldr	r3, [pc, #788]	; (8003fbc <UART_SetConfig+0x384>)
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d004      	beq.n	8003cb6 <UART_SetConfig+0x7e>
 8003cac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	4bc3      	ldr	r3, [pc, #780]	; (8003fc0 <UART_SetConfig+0x388>)
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d103      	bne.n	8003cbe <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cb6:	f7fe f82b 	bl	8001d10 <HAL_RCC_GetPCLK2Freq>
 8003cba:	6778      	str	r0, [r7, #116]	; 0x74
 8003cbc:	e002      	b.n	8003cc4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003cbe:	f7fe f813 	bl	8001ce8 <HAL_RCC_GetPCLK1Freq>
 8003cc2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003cc6:	69db      	ldr	r3, [r3, #28]
 8003cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ccc:	f040 80b6 	bne.w	8003e3c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003cd0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cd2:	461c      	mov	r4, r3
 8003cd4:	f04f 0500 	mov.w	r5, #0
 8003cd8:	4622      	mov	r2, r4
 8003cda:	462b      	mov	r3, r5
 8003cdc:	1891      	adds	r1, r2, r2
 8003cde:	6439      	str	r1, [r7, #64]	; 0x40
 8003ce0:	415b      	adcs	r3, r3
 8003ce2:	647b      	str	r3, [r7, #68]	; 0x44
 8003ce4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003ce8:	1912      	adds	r2, r2, r4
 8003cea:	eb45 0303 	adc.w	r3, r5, r3
 8003cee:	f04f 0000 	mov.w	r0, #0
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	00d9      	lsls	r1, r3, #3
 8003cf8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003cfc:	00d0      	lsls	r0, r2, #3
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	1911      	adds	r1, r2, r4
 8003d04:	6639      	str	r1, [r7, #96]	; 0x60
 8003d06:	416b      	adcs	r3, r5
 8003d08:	667b      	str	r3, [r7, #100]	; 0x64
 8003d0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	461a      	mov	r2, r3
 8003d10:	f04f 0300 	mov.w	r3, #0
 8003d14:	1891      	adds	r1, r2, r2
 8003d16:	63b9      	str	r1, [r7, #56]	; 0x38
 8003d18:	415b      	adcs	r3, r3
 8003d1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d1c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003d20:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003d24:	f7fc fa6e 	bl	8000204 <__aeabi_uldivmod>
 8003d28:	4602      	mov	r2, r0
 8003d2a:	460b      	mov	r3, r1
 8003d2c:	4ba5      	ldr	r3, [pc, #660]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003d2e:	fba3 2302 	umull	r2, r3, r3, r2
 8003d32:	095b      	lsrs	r3, r3, #5
 8003d34:	011e      	lsls	r6, r3, #4
 8003d36:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d38:	461c      	mov	r4, r3
 8003d3a:	f04f 0500 	mov.w	r5, #0
 8003d3e:	4622      	mov	r2, r4
 8003d40:	462b      	mov	r3, r5
 8003d42:	1891      	adds	r1, r2, r2
 8003d44:	6339      	str	r1, [r7, #48]	; 0x30
 8003d46:	415b      	adcs	r3, r3
 8003d48:	637b      	str	r3, [r7, #52]	; 0x34
 8003d4a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003d4e:	1912      	adds	r2, r2, r4
 8003d50:	eb45 0303 	adc.w	r3, r5, r3
 8003d54:	f04f 0000 	mov.w	r0, #0
 8003d58:	f04f 0100 	mov.w	r1, #0
 8003d5c:	00d9      	lsls	r1, r3, #3
 8003d5e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003d62:	00d0      	lsls	r0, r2, #3
 8003d64:	4602      	mov	r2, r0
 8003d66:	460b      	mov	r3, r1
 8003d68:	1911      	adds	r1, r2, r4
 8003d6a:	65b9      	str	r1, [r7, #88]	; 0x58
 8003d6c:	416b      	adcs	r3, r5
 8003d6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d72:	685b      	ldr	r3, [r3, #4]
 8003d74:	461a      	mov	r2, r3
 8003d76:	f04f 0300 	mov.w	r3, #0
 8003d7a:	1891      	adds	r1, r2, r2
 8003d7c:	62b9      	str	r1, [r7, #40]	; 0x28
 8003d7e:	415b      	adcs	r3, r3
 8003d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d82:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003d86:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003d8a:	f7fc fa3b 	bl	8000204 <__aeabi_uldivmod>
 8003d8e:	4602      	mov	r2, r0
 8003d90:	460b      	mov	r3, r1
 8003d92:	4b8c      	ldr	r3, [pc, #560]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003d94:	fba3 1302 	umull	r1, r3, r3, r2
 8003d98:	095b      	lsrs	r3, r3, #5
 8003d9a:	2164      	movs	r1, #100	; 0x64
 8003d9c:	fb01 f303 	mul.w	r3, r1, r3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	00db      	lsls	r3, r3, #3
 8003da4:	3332      	adds	r3, #50	; 0x32
 8003da6:	4a87      	ldr	r2, [pc, #540]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003da8:	fba2 2303 	umull	r2, r3, r2, r3
 8003dac:	095b      	lsrs	r3, r3, #5
 8003dae:	005b      	lsls	r3, r3, #1
 8003db0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003db4:	441e      	add	r6, r3
 8003db6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003db8:	4618      	mov	r0, r3
 8003dba:	f04f 0100 	mov.w	r1, #0
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	1894      	adds	r4, r2, r2
 8003dc4:	623c      	str	r4, [r7, #32]
 8003dc6:	415b      	adcs	r3, r3
 8003dc8:	627b      	str	r3, [r7, #36]	; 0x24
 8003dca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003dce:	1812      	adds	r2, r2, r0
 8003dd0:	eb41 0303 	adc.w	r3, r1, r3
 8003dd4:	f04f 0400 	mov.w	r4, #0
 8003dd8:	f04f 0500 	mov.w	r5, #0
 8003ddc:	00dd      	lsls	r5, r3, #3
 8003dde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003de2:	00d4      	lsls	r4, r2, #3
 8003de4:	4622      	mov	r2, r4
 8003de6:	462b      	mov	r3, r5
 8003de8:	1814      	adds	r4, r2, r0
 8003dea:	653c      	str	r4, [r7, #80]	; 0x50
 8003dec:	414b      	adcs	r3, r1
 8003dee:	657b      	str	r3, [r7, #84]	; 0x54
 8003df0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003df2:	685b      	ldr	r3, [r3, #4]
 8003df4:	461a      	mov	r2, r3
 8003df6:	f04f 0300 	mov.w	r3, #0
 8003dfa:	1891      	adds	r1, r2, r2
 8003dfc:	61b9      	str	r1, [r7, #24]
 8003dfe:	415b      	adcs	r3, r3
 8003e00:	61fb      	str	r3, [r7, #28]
 8003e02:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e06:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003e0a:	f7fc f9fb 	bl	8000204 <__aeabi_uldivmod>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4b6c      	ldr	r3, [pc, #432]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003e14:	fba3 1302 	umull	r1, r3, r3, r2
 8003e18:	095b      	lsrs	r3, r3, #5
 8003e1a:	2164      	movs	r1, #100	; 0x64
 8003e1c:	fb01 f303 	mul.w	r3, r1, r3
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	3332      	adds	r3, #50	; 0x32
 8003e26:	4a67      	ldr	r2, [pc, #412]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003e28:	fba2 2303 	umull	r2, r3, r2, r3
 8003e2c:	095b      	lsrs	r3, r3, #5
 8003e2e:	f003 0207 	and.w	r2, r3, #7
 8003e32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	4432      	add	r2, r6
 8003e38:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003e3a:	e0b9      	b.n	8003fb0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e3e:	461c      	mov	r4, r3
 8003e40:	f04f 0500 	mov.w	r5, #0
 8003e44:	4622      	mov	r2, r4
 8003e46:	462b      	mov	r3, r5
 8003e48:	1891      	adds	r1, r2, r2
 8003e4a:	6139      	str	r1, [r7, #16]
 8003e4c:	415b      	adcs	r3, r3
 8003e4e:	617b      	str	r3, [r7, #20]
 8003e50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003e54:	1912      	adds	r2, r2, r4
 8003e56:	eb45 0303 	adc.w	r3, r5, r3
 8003e5a:	f04f 0000 	mov.w	r0, #0
 8003e5e:	f04f 0100 	mov.w	r1, #0
 8003e62:	00d9      	lsls	r1, r3, #3
 8003e64:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003e68:	00d0      	lsls	r0, r2, #3
 8003e6a:	4602      	mov	r2, r0
 8003e6c:	460b      	mov	r3, r1
 8003e6e:	eb12 0804 	adds.w	r8, r2, r4
 8003e72:	eb43 0905 	adc.w	r9, r3, r5
 8003e76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e78:	685b      	ldr	r3, [r3, #4]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f04f 0100 	mov.w	r1, #0
 8003e80:	f04f 0200 	mov.w	r2, #0
 8003e84:	f04f 0300 	mov.w	r3, #0
 8003e88:	008b      	lsls	r3, r1, #2
 8003e8a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e8e:	0082      	lsls	r2, r0, #2
 8003e90:	4640      	mov	r0, r8
 8003e92:	4649      	mov	r1, r9
 8003e94:	f7fc f9b6 	bl	8000204 <__aeabi_uldivmod>
 8003e98:	4602      	mov	r2, r0
 8003e9a:	460b      	mov	r3, r1
 8003e9c:	4b49      	ldr	r3, [pc, #292]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003e9e:	fba3 2302 	umull	r2, r3, r3, r2
 8003ea2:	095b      	lsrs	r3, r3, #5
 8003ea4:	011e      	lsls	r6, r3, #4
 8003ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f04f 0100 	mov.w	r1, #0
 8003eae:	4602      	mov	r2, r0
 8003eb0:	460b      	mov	r3, r1
 8003eb2:	1894      	adds	r4, r2, r2
 8003eb4:	60bc      	str	r4, [r7, #8]
 8003eb6:	415b      	adcs	r3, r3
 8003eb8:	60fb      	str	r3, [r7, #12]
 8003eba:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003ebe:	1812      	adds	r2, r2, r0
 8003ec0:	eb41 0303 	adc.w	r3, r1, r3
 8003ec4:	f04f 0400 	mov.w	r4, #0
 8003ec8:	f04f 0500 	mov.w	r5, #0
 8003ecc:	00dd      	lsls	r5, r3, #3
 8003ece:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003ed2:	00d4      	lsls	r4, r2, #3
 8003ed4:	4622      	mov	r2, r4
 8003ed6:	462b      	mov	r3, r5
 8003ed8:	1814      	adds	r4, r2, r0
 8003eda:	64bc      	str	r4, [r7, #72]	; 0x48
 8003edc:	414b      	adcs	r3, r1
 8003ede:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	685b      	ldr	r3, [r3, #4]
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f04f 0100 	mov.w	r1, #0
 8003eea:	f04f 0200 	mov.w	r2, #0
 8003eee:	f04f 0300 	mov.w	r3, #0
 8003ef2:	008b      	lsls	r3, r1, #2
 8003ef4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003ef8:	0082      	lsls	r2, r0, #2
 8003efa:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003efe:	f7fc f981 	bl	8000204 <__aeabi_uldivmod>
 8003f02:	4602      	mov	r2, r0
 8003f04:	460b      	mov	r3, r1
 8003f06:	4b2f      	ldr	r3, [pc, #188]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003f08:	fba3 1302 	umull	r1, r3, r3, r2
 8003f0c:	095b      	lsrs	r3, r3, #5
 8003f0e:	2164      	movs	r1, #100	; 0x64
 8003f10:	fb01 f303 	mul.w	r3, r1, r3
 8003f14:	1ad3      	subs	r3, r2, r3
 8003f16:	011b      	lsls	r3, r3, #4
 8003f18:	3332      	adds	r3, #50	; 0x32
 8003f1a:	4a2a      	ldr	r2, [pc, #168]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003f1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f20:	095b      	lsrs	r3, r3, #5
 8003f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003f26:	441e      	add	r6, r3
 8003f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f04f 0100 	mov.w	r1, #0
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	1894      	adds	r4, r2, r2
 8003f36:	603c      	str	r4, [r7, #0]
 8003f38:	415b      	adcs	r3, r3
 8003f3a:	607b      	str	r3, [r7, #4]
 8003f3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003f40:	1812      	adds	r2, r2, r0
 8003f42:	eb41 0303 	adc.w	r3, r1, r3
 8003f46:	f04f 0400 	mov.w	r4, #0
 8003f4a:	f04f 0500 	mov.w	r5, #0
 8003f4e:	00dd      	lsls	r5, r3, #3
 8003f50:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003f54:	00d4      	lsls	r4, r2, #3
 8003f56:	4622      	mov	r2, r4
 8003f58:	462b      	mov	r3, r5
 8003f5a:	eb12 0a00 	adds.w	sl, r2, r0
 8003f5e:	eb43 0b01 	adc.w	fp, r3, r1
 8003f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	4618      	mov	r0, r3
 8003f68:	f04f 0100 	mov.w	r1, #0
 8003f6c:	f04f 0200 	mov.w	r2, #0
 8003f70:	f04f 0300 	mov.w	r3, #0
 8003f74:	008b      	lsls	r3, r1, #2
 8003f76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003f7a:	0082      	lsls	r2, r0, #2
 8003f7c:	4650      	mov	r0, sl
 8003f7e:	4659      	mov	r1, fp
 8003f80:	f7fc f940 	bl	8000204 <__aeabi_uldivmod>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4b0e      	ldr	r3, [pc, #56]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003f8a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	2164      	movs	r1, #100	; 0x64
 8003f92:	fb01 f303 	mul.w	r3, r1, r3
 8003f96:	1ad3      	subs	r3, r2, r3
 8003f98:	011b      	lsls	r3, r3, #4
 8003f9a:	3332      	adds	r3, #50	; 0x32
 8003f9c:	4a09      	ldr	r2, [pc, #36]	; (8003fc4 <UART_SetConfig+0x38c>)
 8003f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8003fa2:	095b      	lsrs	r3, r3, #5
 8003fa4:	f003 020f 	and.w	r2, r3, #15
 8003fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	4432      	add	r2, r6
 8003fae:	609a      	str	r2, [r3, #8]
}
 8003fb0:	bf00      	nop
 8003fb2:	377c      	adds	r7, #124	; 0x7c
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003fba:	bf00      	nop
 8003fbc:	40011000 	.word	0x40011000
 8003fc0:	40011400 	.word	0x40011400
 8003fc4:	51eb851f 	.word	0x51eb851f

08003fc8 <__libc_init_array>:
 8003fc8:	b570      	push	{r4, r5, r6, lr}
 8003fca:	4d0d      	ldr	r5, [pc, #52]	; (8004000 <__libc_init_array+0x38>)
 8003fcc:	4c0d      	ldr	r4, [pc, #52]	; (8004004 <__libc_init_array+0x3c>)
 8003fce:	1b64      	subs	r4, r4, r5
 8003fd0:	10a4      	asrs	r4, r4, #2
 8003fd2:	2600      	movs	r6, #0
 8003fd4:	42a6      	cmp	r6, r4
 8003fd6:	d109      	bne.n	8003fec <__libc_init_array+0x24>
 8003fd8:	4d0b      	ldr	r5, [pc, #44]	; (8004008 <__libc_init_array+0x40>)
 8003fda:	4c0c      	ldr	r4, [pc, #48]	; (800400c <__libc_init_array+0x44>)
 8003fdc:	f000 f820 	bl	8004020 <_init>
 8003fe0:	1b64      	subs	r4, r4, r5
 8003fe2:	10a4      	asrs	r4, r4, #2
 8003fe4:	2600      	movs	r6, #0
 8003fe6:	42a6      	cmp	r6, r4
 8003fe8:	d105      	bne.n	8003ff6 <__libc_init_array+0x2e>
 8003fea:	bd70      	pop	{r4, r5, r6, pc}
 8003fec:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ff0:	4798      	blx	r3
 8003ff2:	3601      	adds	r6, #1
 8003ff4:	e7ee      	b.n	8003fd4 <__libc_init_array+0xc>
 8003ff6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003ffa:	4798      	blx	r3
 8003ffc:	3601      	adds	r6, #1
 8003ffe:	e7f2      	b.n	8003fe6 <__libc_init_array+0x1e>
 8004000:	08004060 	.word	0x08004060
 8004004:	08004060 	.word	0x08004060
 8004008:	08004060 	.word	0x08004060
 800400c:	08004064 	.word	0x08004064

08004010 <memset>:
 8004010:	4402      	add	r2, r0
 8004012:	4603      	mov	r3, r0
 8004014:	4293      	cmp	r3, r2
 8004016:	d100      	bne.n	800401a <memset+0xa>
 8004018:	4770      	bx	lr
 800401a:	f803 1b01 	strb.w	r1, [r3], #1
 800401e:	e7f9      	b.n	8004014 <memset+0x4>

08004020 <_init>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	bf00      	nop
 8004024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004026:	bc08      	pop	{r3}
 8004028:	469e      	mov	lr, r3
 800402a:	4770      	bx	lr

0800402c <_fini>:
 800402c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800402e:	bf00      	nop
 8004030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004032:	bc08      	pop	{r3}
 8004034:	469e      	mov	lr, r3
 8004036:	4770      	bx	lr
