
DMA3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006e5c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b4  0800702c  0800702c  0001702c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080070e0  080070e0  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  080070e0  080070e0  000170e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080070e8  080070e8  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080070e8  080070e8  000170e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080070ec  080070ec  000170ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  080070f0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  20000078  08007168  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000438  08007168  00020438  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   000114d4  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028af  00000000  00000000  0003157c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000eb0  00000000  00000000  00033e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d98  00000000  00000000  00034ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023faf  00000000  00000000  00035a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001204c  00000000  00000000  00059a27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd7a5  00000000  00000000  0006ba73  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00149218  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041a8  00000000  00000000  0014926c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007014 	.word	0x08007014

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08007014 	.word	0x08007014

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__gedf2>:
 800088c:	f04f 3cff 	mov.w	ip, #4294967295
 8000890:	e006      	b.n	80008a0 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__ledf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	e002      	b.n	80008a0 <__cmpdf2+0x4>
 800089a:	bf00      	nop

0800089c <__cmpdf2>:
 800089c:	f04f 0c01 	mov.w	ip, #1
 80008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b0:	bf18      	it	ne
 80008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008b6:	d01b      	beq.n	80008f0 <__cmpdf2+0x54>
 80008b8:	b001      	add	sp, #4
 80008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008be:	bf0c      	ite	eq
 80008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008c4:	ea91 0f03 	teqne	r1, r3
 80008c8:	bf02      	ittt	eq
 80008ca:	ea90 0f02 	teqeq	r0, r2
 80008ce:	2000      	moveq	r0, #0
 80008d0:	4770      	bxeq	lr
 80008d2:	f110 0f00 	cmn.w	r0, #0
 80008d6:	ea91 0f03 	teq	r1, r3
 80008da:	bf58      	it	pl
 80008dc:	4299      	cmppl	r1, r3
 80008de:	bf08      	it	eq
 80008e0:	4290      	cmpeq	r0, r2
 80008e2:	bf2c      	ite	cs
 80008e4:	17d8      	asrcs	r0, r3, #31
 80008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ea:	f040 0001 	orr.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d102      	bne.n	8000900 <__cmpdf2+0x64>
 80008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008fe:	d107      	bne.n	8000910 <__cmpdf2+0x74>
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d1d6      	bne.n	80008b8 <__cmpdf2+0x1c>
 800090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800090e:	d0d3      	beq.n	80008b8 <__cmpdf2+0x1c>
 8000910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_cdrcmple>:
 8000918:	4684      	mov	ip, r0
 800091a:	4610      	mov	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	468c      	mov	ip, r1
 8000920:	4619      	mov	r1, r3
 8000922:	4663      	mov	r3, ip
 8000924:	e000      	b.n	8000928 <__aeabi_cdcmpeq>
 8000926:	bf00      	nop

08000928 <__aeabi_cdcmpeq>:
 8000928:	b501      	push	{r0, lr}
 800092a:	f7ff ffb7 	bl	800089c <__cmpdf2>
 800092e:	2800      	cmp	r0, #0
 8000930:	bf48      	it	mi
 8000932:	f110 0f00 	cmnmi.w	r0, #0
 8000936:	bd01      	pop	{r0, pc}

08000938 <__aeabi_dcmpeq>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff fff4 	bl	8000928 <__aeabi_cdcmpeq>
 8000940:	bf0c      	ite	eq
 8000942:	2001      	moveq	r0, #1
 8000944:	2000      	movne	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmplt>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffea 	bl	8000928 <__aeabi_cdcmpeq>
 8000954:	bf34      	ite	cc
 8000956:	2001      	movcc	r0, #1
 8000958:	2000      	movcs	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmple>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffe0 	bl	8000928 <__aeabi_cdcmpeq>
 8000968:	bf94      	ite	ls
 800096a:	2001      	movls	r0, #1
 800096c:	2000      	movhi	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_dcmpge>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff ffce 	bl	8000918 <__aeabi_cdrcmple>
 800097c:	bf94      	ite	ls
 800097e:	2001      	movls	r0, #1
 8000980:	2000      	movhi	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_dcmpgt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffc4 	bl	8000918 <__aeabi_cdrcmple>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_uldivmod>:
 800099c:	b953      	cbnz	r3, 80009b4 <__aeabi_uldivmod+0x18>
 800099e:	b94a      	cbnz	r2, 80009b4 <__aeabi_uldivmod+0x18>
 80009a0:	2900      	cmp	r1, #0
 80009a2:	bf08      	it	eq
 80009a4:	2800      	cmpeq	r0, #0
 80009a6:	bf1c      	itt	ne
 80009a8:	f04f 31ff 	movne.w	r1, #4294967295
 80009ac:	f04f 30ff 	movne.w	r0, #4294967295
 80009b0:	f000 b96e 	b.w	8000c90 <__aeabi_idiv0>
 80009b4:	f1ad 0c08 	sub.w	ip, sp, #8
 80009b8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80009bc:	f000 f806 	bl	80009cc <__udivmoddi4>
 80009c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80009c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80009c8:	b004      	add	sp, #16
 80009ca:	4770      	bx	lr

080009cc <__udivmoddi4>:
 80009cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009d0:	9d08      	ldr	r5, [sp, #32]
 80009d2:	4604      	mov	r4, r0
 80009d4:	468c      	mov	ip, r1
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	f040 8083 	bne.w	8000ae2 <__udivmoddi4+0x116>
 80009dc:	428a      	cmp	r2, r1
 80009de:	4617      	mov	r7, r2
 80009e0:	d947      	bls.n	8000a72 <__udivmoddi4+0xa6>
 80009e2:	fab2 f282 	clz	r2, r2
 80009e6:	b142      	cbz	r2, 80009fa <__udivmoddi4+0x2e>
 80009e8:	f1c2 0020 	rsb	r0, r2, #32
 80009ec:	fa24 f000 	lsr.w	r0, r4, r0
 80009f0:	4091      	lsls	r1, r2
 80009f2:	4097      	lsls	r7, r2
 80009f4:	ea40 0c01 	orr.w	ip, r0, r1
 80009f8:	4094      	lsls	r4, r2
 80009fa:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80009fe:	0c23      	lsrs	r3, r4, #16
 8000a00:	fbbc f6f8 	udiv	r6, ip, r8
 8000a04:	fa1f fe87 	uxth.w	lr, r7
 8000a08:	fb08 c116 	mls	r1, r8, r6, ip
 8000a0c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a10:	fb06 f10e 	mul.w	r1, r6, lr
 8000a14:	4299      	cmp	r1, r3
 8000a16:	d909      	bls.n	8000a2c <__udivmoddi4+0x60>
 8000a18:	18fb      	adds	r3, r7, r3
 8000a1a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a1e:	f080 8119 	bcs.w	8000c54 <__udivmoddi4+0x288>
 8000a22:	4299      	cmp	r1, r3
 8000a24:	f240 8116 	bls.w	8000c54 <__udivmoddi4+0x288>
 8000a28:	3e02      	subs	r6, #2
 8000a2a:	443b      	add	r3, r7
 8000a2c:	1a5b      	subs	r3, r3, r1
 8000a2e:	b2a4      	uxth	r4, r4
 8000a30:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a34:	fb08 3310 	mls	r3, r8, r0, r3
 8000a38:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000a3c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000a40:	45a6      	cmp	lr, r4
 8000a42:	d909      	bls.n	8000a58 <__udivmoddi4+0x8c>
 8000a44:	193c      	adds	r4, r7, r4
 8000a46:	f100 33ff 	add.w	r3, r0, #4294967295
 8000a4a:	f080 8105 	bcs.w	8000c58 <__udivmoddi4+0x28c>
 8000a4e:	45a6      	cmp	lr, r4
 8000a50:	f240 8102 	bls.w	8000c58 <__udivmoddi4+0x28c>
 8000a54:	3802      	subs	r0, #2
 8000a56:	443c      	add	r4, r7
 8000a58:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a5c:	eba4 040e 	sub.w	r4, r4, lr
 8000a60:	2600      	movs	r6, #0
 8000a62:	b11d      	cbz	r5, 8000a6c <__udivmoddi4+0xa0>
 8000a64:	40d4      	lsrs	r4, r2
 8000a66:	2300      	movs	r3, #0
 8000a68:	e9c5 4300 	strd	r4, r3, [r5]
 8000a6c:	4631      	mov	r1, r6
 8000a6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a72:	b902      	cbnz	r2, 8000a76 <__udivmoddi4+0xaa>
 8000a74:	deff      	udf	#255	; 0xff
 8000a76:	fab2 f282 	clz	r2, r2
 8000a7a:	2a00      	cmp	r2, #0
 8000a7c:	d150      	bne.n	8000b20 <__udivmoddi4+0x154>
 8000a7e:	1bcb      	subs	r3, r1, r7
 8000a80:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000a84:	fa1f f887 	uxth.w	r8, r7
 8000a88:	2601      	movs	r6, #1
 8000a8a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000a8e:	0c21      	lsrs	r1, r4, #16
 8000a90:	fb0e 331c 	mls	r3, lr, ip, r3
 8000a94:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a98:	fb08 f30c 	mul.w	r3, r8, ip
 8000a9c:	428b      	cmp	r3, r1
 8000a9e:	d907      	bls.n	8000ab0 <__udivmoddi4+0xe4>
 8000aa0:	1879      	adds	r1, r7, r1
 8000aa2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000aa6:	d202      	bcs.n	8000aae <__udivmoddi4+0xe2>
 8000aa8:	428b      	cmp	r3, r1
 8000aaa:	f200 80e9 	bhi.w	8000c80 <__udivmoddi4+0x2b4>
 8000aae:	4684      	mov	ip, r0
 8000ab0:	1ac9      	subs	r1, r1, r3
 8000ab2:	b2a3      	uxth	r3, r4
 8000ab4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000ab8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000abc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000ac0:	fb08 f800 	mul.w	r8, r8, r0
 8000ac4:	45a0      	cmp	r8, r4
 8000ac6:	d907      	bls.n	8000ad8 <__udivmoddi4+0x10c>
 8000ac8:	193c      	adds	r4, r7, r4
 8000aca:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ace:	d202      	bcs.n	8000ad6 <__udivmoddi4+0x10a>
 8000ad0:	45a0      	cmp	r8, r4
 8000ad2:	f200 80d9 	bhi.w	8000c88 <__udivmoddi4+0x2bc>
 8000ad6:	4618      	mov	r0, r3
 8000ad8:	eba4 0408 	sub.w	r4, r4, r8
 8000adc:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ae0:	e7bf      	b.n	8000a62 <__udivmoddi4+0x96>
 8000ae2:	428b      	cmp	r3, r1
 8000ae4:	d909      	bls.n	8000afa <__udivmoddi4+0x12e>
 8000ae6:	2d00      	cmp	r5, #0
 8000ae8:	f000 80b1 	beq.w	8000c4e <__udivmoddi4+0x282>
 8000aec:	2600      	movs	r6, #0
 8000aee:	e9c5 0100 	strd	r0, r1, [r5]
 8000af2:	4630      	mov	r0, r6
 8000af4:	4631      	mov	r1, r6
 8000af6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000afa:	fab3 f683 	clz	r6, r3
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d14a      	bne.n	8000b98 <__udivmoddi4+0x1cc>
 8000b02:	428b      	cmp	r3, r1
 8000b04:	d302      	bcc.n	8000b0c <__udivmoddi4+0x140>
 8000b06:	4282      	cmp	r2, r0
 8000b08:	f200 80b8 	bhi.w	8000c7c <__udivmoddi4+0x2b0>
 8000b0c:	1a84      	subs	r4, r0, r2
 8000b0e:	eb61 0103 	sbc.w	r1, r1, r3
 8000b12:	2001      	movs	r0, #1
 8000b14:	468c      	mov	ip, r1
 8000b16:	2d00      	cmp	r5, #0
 8000b18:	d0a8      	beq.n	8000a6c <__udivmoddi4+0xa0>
 8000b1a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b1e:	e7a5      	b.n	8000a6c <__udivmoddi4+0xa0>
 8000b20:	f1c2 0320 	rsb	r3, r2, #32
 8000b24:	fa20 f603 	lsr.w	r6, r0, r3
 8000b28:	4097      	lsls	r7, r2
 8000b2a:	fa01 f002 	lsl.w	r0, r1, r2
 8000b2e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b32:	40d9      	lsrs	r1, r3
 8000b34:	4330      	orrs	r0, r6
 8000b36:	0c03      	lsrs	r3, r0, #16
 8000b38:	fbb1 f6fe 	udiv	r6, r1, lr
 8000b3c:	fa1f f887 	uxth.w	r8, r7
 8000b40:	fb0e 1116 	mls	r1, lr, r6, r1
 8000b44:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b48:	fb06 f108 	mul.w	r1, r6, r8
 8000b4c:	4299      	cmp	r1, r3
 8000b4e:	fa04 f402 	lsl.w	r4, r4, r2
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x19c>
 8000b54:	18fb      	adds	r3, r7, r3
 8000b56:	f106 3cff 	add.w	ip, r6, #4294967295
 8000b5a:	f080 808d 	bcs.w	8000c78 <__udivmoddi4+0x2ac>
 8000b5e:	4299      	cmp	r1, r3
 8000b60:	f240 808a 	bls.w	8000c78 <__udivmoddi4+0x2ac>
 8000b64:	3e02      	subs	r6, #2
 8000b66:	443b      	add	r3, r7
 8000b68:	1a5b      	subs	r3, r3, r1
 8000b6a:	b281      	uxth	r1, r0
 8000b6c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b70:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b74:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b78:	fb00 f308 	mul.w	r3, r0, r8
 8000b7c:	428b      	cmp	r3, r1
 8000b7e:	d907      	bls.n	8000b90 <__udivmoddi4+0x1c4>
 8000b80:	1879      	adds	r1, r7, r1
 8000b82:	f100 3cff 	add.w	ip, r0, #4294967295
 8000b86:	d273      	bcs.n	8000c70 <__udivmoddi4+0x2a4>
 8000b88:	428b      	cmp	r3, r1
 8000b8a:	d971      	bls.n	8000c70 <__udivmoddi4+0x2a4>
 8000b8c:	3802      	subs	r0, #2
 8000b8e:	4439      	add	r1, r7
 8000b90:	1acb      	subs	r3, r1, r3
 8000b92:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000b96:	e778      	b.n	8000a8a <__udivmoddi4+0xbe>
 8000b98:	f1c6 0c20 	rsb	ip, r6, #32
 8000b9c:	fa03 f406 	lsl.w	r4, r3, r6
 8000ba0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000ba4:	431c      	orrs	r4, r3
 8000ba6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000baa:	fa01 f306 	lsl.w	r3, r1, r6
 8000bae:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000bb2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000bb6:	431f      	orrs	r7, r3
 8000bb8:	0c3b      	lsrs	r3, r7, #16
 8000bba:	fbb1 f9fe 	udiv	r9, r1, lr
 8000bbe:	fa1f f884 	uxth.w	r8, r4
 8000bc2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000bc6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000bca:	fb09 fa08 	mul.w	sl, r9, r8
 8000bce:	458a      	cmp	sl, r1
 8000bd0:	fa02 f206 	lsl.w	r2, r2, r6
 8000bd4:	fa00 f306 	lsl.w	r3, r0, r6
 8000bd8:	d908      	bls.n	8000bec <__udivmoddi4+0x220>
 8000bda:	1861      	adds	r1, r4, r1
 8000bdc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000be0:	d248      	bcs.n	8000c74 <__udivmoddi4+0x2a8>
 8000be2:	458a      	cmp	sl, r1
 8000be4:	d946      	bls.n	8000c74 <__udivmoddi4+0x2a8>
 8000be6:	f1a9 0902 	sub.w	r9, r9, #2
 8000bea:	4421      	add	r1, r4
 8000bec:	eba1 010a 	sub.w	r1, r1, sl
 8000bf0:	b2bf      	uxth	r7, r7
 8000bf2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bf6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bfa:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000bfe:	fb00 f808 	mul.w	r8, r0, r8
 8000c02:	45b8      	cmp	r8, r7
 8000c04:	d907      	bls.n	8000c16 <__udivmoddi4+0x24a>
 8000c06:	19e7      	adds	r7, r4, r7
 8000c08:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c0c:	d22e      	bcs.n	8000c6c <__udivmoddi4+0x2a0>
 8000c0e:	45b8      	cmp	r8, r7
 8000c10:	d92c      	bls.n	8000c6c <__udivmoddi4+0x2a0>
 8000c12:	3802      	subs	r0, #2
 8000c14:	4427      	add	r7, r4
 8000c16:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c1a:	eba7 0708 	sub.w	r7, r7, r8
 8000c1e:	fba0 8902 	umull	r8, r9, r0, r2
 8000c22:	454f      	cmp	r7, r9
 8000c24:	46c6      	mov	lr, r8
 8000c26:	4649      	mov	r1, r9
 8000c28:	d31a      	bcc.n	8000c60 <__udivmoddi4+0x294>
 8000c2a:	d017      	beq.n	8000c5c <__udivmoddi4+0x290>
 8000c2c:	b15d      	cbz	r5, 8000c46 <__udivmoddi4+0x27a>
 8000c2e:	ebb3 020e 	subs.w	r2, r3, lr
 8000c32:	eb67 0701 	sbc.w	r7, r7, r1
 8000c36:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000c3a:	40f2      	lsrs	r2, r6
 8000c3c:	ea4c 0202 	orr.w	r2, ip, r2
 8000c40:	40f7      	lsrs	r7, r6
 8000c42:	e9c5 2700 	strd	r2, r7, [r5]
 8000c46:	2600      	movs	r6, #0
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	462e      	mov	r6, r5
 8000c50:	4628      	mov	r0, r5
 8000c52:	e70b      	b.n	8000a6c <__udivmoddi4+0xa0>
 8000c54:	4606      	mov	r6, r0
 8000c56:	e6e9      	b.n	8000a2c <__udivmoddi4+0x60>
 8000c58:	4618      	mov	r0, r3
 8000c5a:	e6fd      	b.n	8000a58 <__udivmoddi4+0x8c>
 8000c5c:	4543      	cmp	r3, r8
 8000c5e:	d2e5      	bcs.n	8000c2c <__udivmoddi4+0x260>
 8000c60:	ebb8 0e02 	subs.w	lr, r8, r2
 8000c64:	eb69 0104 	sbc.w	r1, r9, r4
 8000c68:	3801      	subs	r0, #1
 8000c6a:	e7df      	b.n	8000c2c <__udivmoddi4+0x260>
 8000c6c:	4608      	mov	r0, r1
 8000c6e:	e7d2      	b.n	8000c16 <__udivmoddi4+0x24a>
 8000c70:	4660      	mov	r0, ip
 8000c72:	e78d      	b.n	8000b90 <__udivmoddi4+0x1c4>
 8000c74:	4681      	mov	r9, r0
 8000c76:	e7b9      	b.n	8000bec <__udivmoddi4+0x220>
 8000c78:	4666      	mov	r6, ip
 8000c7a:	e775      	b.n	8000b68 <__udivmoddi4+0x19c>
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	e74a      	b.n	8000b16 <__udivmoddi4+0x14a>
 8000c80:	f1ac 0c02 	sub.w	ip, ip, #2
 8000c84:	4439      	add	r1, r7
 8000c86:	e713      	b.n	8000ab0 <__udivmoddi4+0xe4>
 8000c88:	3802      	subs	r0, #2
 8000c8a:	443c      	add	r4, r7
 8000c8c:	e724      	b.n	8000ad8 <__udivmoddi4+0x10c>
 8000c8e:	bf00      	nop

08000c90 <__aeabi_idiv0>:
 8000c90:	4770      	bx	lr
 8000c92:	bf00      	nop

08000c94 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c9a:	463b      	mov	r3, r7
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	601a      	str	r2, [r3, #0]
 8000ca0:	605a      	str	r2, [r3, #4]
 8000ca2:	609a      	str	r2, [r3, #8]
 8000ca4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ca6:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000ca8:	4a29      	ldr	r2, [pc, #164]	; (8000d50 <MX_ADC1_Init+0xbc>)
 8000caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000cac:	4b27      	ldr	r3, [pc, #156]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000cb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000cb4:	4b25      	ldr	r3, [pc, #148]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000cba:	4b24      	ldr	r3, [pc, #144]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cbc:	2201      	movs	r2, #1
 8000cbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000cce:	4b1f      	ldr	r3, [pc, #124]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8000cd6:	4b1d      	ldr	r3, [pc, #116]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cd8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8000cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000cde:	4b1b      	ldr	r3, [pc, #108]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000ce4:	4b19      	ldr	r3, [pc, #100]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000ce6:	2202      	movs	r2, #2
 8000ce8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000cea:	4b18      	ldr	r3, [pc, #96]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cec:	2201      	movs	r2, #1
 8000cee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000cf2:	4b16      	ldr	r3, [pc, #88]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cf4:	2201      	movs	r2, #1
 8000cf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cf8:	4814      	ldr	r0, [pc, #80]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000cfa:	f001 f9d1 	bl	80020a0 <HAL_ADC_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_ADC1_Init+0x74>
  {
    Error_Handler();
 8000d04:	f000 fca8 	bl	8001658 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000d08:	2300      	movs	r3, #0
 8000d0a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000d0c:	2301      	movs	r3, #1
 8000d0e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d10:	2300      	movs	r3, #0
 8000d12:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d14:	463b      	mov	r3, r7
 8000d16:	4619      	mov	r1, r3
 8000d18:	480c      	ldr	r0, [pc, #48]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000d1a:	f001 fb29 	bl	8002370 <HAL_ADC_ConfigChannel>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d001      	beq.n	8000d28 <MX_ADC1_Init+0x94>
  {
    Error_Handler();
 8000d24:	f000 fc98 	bl	8001658 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000d28:	2301      	movs	r3, #1
 8000d2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d30:	463b      	mov	r3, r7
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_ADC1_Init+0xb8>)
 8000d36:	f001 fb1b 	bl	8002370 <HAL_ADC_ConfigChannel>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d001      	beq.n	8000d44 <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8000d40:	f000 fc8a 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d44:	bf00      	nop
 8000d46:	3710      	adds	r7, #16
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	200000c4 	.word	0x200000c4
 8000d50:	40012000 	.word	0x40012000

08000d54 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b08a      	sub	sp, #40	; 0x28
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d5c:	f107 0314 	add.w	r3, r7, #20
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
 8000d64:	605a      	str	r2, [r3, #4]
 8000d66:	609a      	str	r2, [r3, #8]
 8000d68:	60da      	str	r2, [r3, #12]
 8000d6a:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	681b      	ldr	r3, [r3, #0]
 8000d70:	4a2e      	ldr	r2, [pc, #184]	; (8000e2c <HAL_ADC_MspInit+0xd8>)
 8000d72:	4293      	cmp	r3, r2
 8000d74:	d156      	bne.n	8000e24 <HAL_ADC_MspInit+0xd0>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d76:	2300      	movs	r3, #0
 8000d78:	613b      	str	r3, [r7, #16]
 8000d7a:	4b2d      	ldr	r3, [pc, #180]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000d7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d7e:	4a2c      	ldr	r2, [pc, #176]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000d80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d84:	6453      	str	r3, [r2, #68]	; 0x44
 8000d86:	4b2a      	ldr	r3, [pc, #168]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000d8e:	613b      	str	r3, [r7, #16]
 8000d90:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d92:	2300      	movs	r3, #0
 8000d94:	60fb      	str	r3, [r7, #12]
 8000d96:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9a:	4a25      	ldr	r2, [pc, #148]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000d9c:	f043 0301 	orr.w	r3, r3, #1
 8000da0:	6313      	str	r3, [r2, #48]	; 0x30
 8000da2:	4b23      	ldr	r3, [pc, #140]	; (8000e30 <HAL_ADC_MspInit+0xdc>)
 8000da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da6:	f003 0301 	and.w	r3, r3, #1
 8000daa:	60fb      	str	r3, [r7, #12]
 8000dac:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000dae:	2303      	movs	r3, #3
 8000db0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000db2:	2303      	movs	r3, #3
 8000db4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db6:	2300      	movs	r3, #0
 8000db8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dba:	f107 0314 	add.w	r3, r7, #20
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	481c      	ldr	r0, [pc, #112]	; (8000e34 <HAL_ADC_MspInit+0xe0>)
 8000dc2:	f002 fa99 	bl	80032f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000dc8:	4a1c      	ldr	r2, [pc, #112]	; (8000e3c <HAL_ADC_MspInit+0xe8>)
 8000dca:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dd2:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd8:	4b17      	ldr	r3, [pc, #92]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dde:	4b16      	ldr	r3, [pc, #88]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000de0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000de4:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000de6:	4b14      	ldr	r3, [pc, #80]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000de8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dec:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000dee:	4b12      	ldr	r3, [pc, #72]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000df0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000df4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000df6:	4b10      	ldr	r3, [pc, #64]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000dfc:	4b0e      	ldr	r3, [pc, #56]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e02:	4b0d      	ldr	r3, [pc, #52]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e08:	480b      	ldr	r0, [pc, #44]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000e0a:	f001 fe73 	bl	8002af4 <HAL_DMA_Init>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_ADC_MspInit+0xc4>
    {
      Error_Handler();
 8000e14:	f000 fc20 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	4a07      	ldr	r2, [pc, #28]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000e1c:	639a      	str	r2, [r3, #56]	; 0x38
 8000e1e:	4a06      	ldr	r2, [pc, #24]	; (8000e38 <HAL_ADC_MspInit+0xe4>)
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e24:	bf00      	nop
 8000e26:	3728      	adds	r7, #40	; 0x28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	40012000 	.word	0x40012000
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40020000 	.word	0x40020000
 8000e38:	2000010c 	.word	0x2000010c
 8000e3c:	40026410 	.word	0x40026410

08000e40 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <MX_DMA_Init+0x78>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4e:	4a1a      	ldr	r2, [pc, #104]	; (8000eb8 <MX_DMA_Init+0x78>)
 8000e50:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000e54:	6313      	str	r3, [r2, #48]	; 0x30
 8000e56:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <MX_DMA_Init+0x78>)
 8000e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e5e:	607b      	str	r3, [r7, #4]
 8000e60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000e62:	2300      	movs	r3, #0
 8000e64:	603b      	str	r3, [r7, #0]
 8000e66:	4b14      	ldr	r3, [pc, #80]	; (8000eb8 <MX_DMA_Init+0x78>)
 8000e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6a:	4a13      	ldr	r2, [pc, #76]	; (8000eb8 <MX_DMA_Init+0x78>)
 8000e6c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000e70:	6313      	str	r3, [r2, #48]	; 0x30
 8000e72:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <MX_DMA_Init+0x78>)
 8000e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000e7a:	603b      	str	r3, [r7, #0]
 8000e7c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8000e7e:	2200      	movs	r2, #0
 8000e80:	2100      	movs	r1, #0
 8000e82:	2010      	movs	r0, #16
 8000e84:	f001 fdff 	bl	8002a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000e88:	2010      	movs	r0, #16
 8000e8a:	f001 fe18 	bl	8002abe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2100      	movs	r1, #0
 8000e92:	2011      	movs	r0, #17
 8000e94:	f001 fdf7 	bl	8002a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000e98:	2011      	movs	r0, #17
 8000e9a:	f001 fe10 	bl	8002abe <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	2100      	movs	r1, #0
 8000ea2:	2038      	movs	r0, #56	; 0x38
 8000ea4:	f001 fdef 	bl	8002a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ea8:	2038      	movs	r0, #56	; 0x38
 8000eaa:	f001 fe08 	bl	8002abe <HAL_NVIC_EnableIRQ>

}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	40023800 	.word	0x40023800

08000ebc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec2:	f107 0314 	add.w	r3, r7, #20
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
 8000ecc:	609a      	str	r2, [r3, #8]
 8000ece:	60da      	str	r2, [r3, #12]
 8000ed0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ed2:	2300      	movs	r3, #0
 8000ed4:	613b      	str	r3, [r7, #16]
 8000ed6:	4b31      	ldr	r3, [pc, #196]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eda:	4a30      	ldr	r2, [pc, #192]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000edc:	f043 0304 	orr.w	r3, r3, #4
 8000ee0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ee2:	4b2e      	ldr	r3, [pc, #184]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000ee4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ee6:	f003 0304 	and.w	r3, r3, #4
 8000eea:	613b      	str	r3, [r7, #16]
 8000eec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000eee:	2300      	movs	r3, #0
 8000ef0:	60fb      	str	r3, [r7, #12]
 8000ef2:	4b2a      	ldr	r3, [pc, #168]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ef6:	4a29      	ldr	r2, [pc, #164]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000ef8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000efc:	6313      	str	r3, [r2, #48]	; 0x30
 8000efe:	4b27      	ldr	r3, [pc, #156]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f06:	60fb      	str	r3, [r7, #12]
 8000f08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0a:	2300      	movs	r3, #0
 8000f0c:	60bb      	str	r3, [r7, #8]
 8000f0e:	4b23      	ldr	r3, [pc, #140]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f12:	4a22      	ldr	r2, [pc, #136]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f14:	f043 0301 	orr.w	r3, r3, #1
 8000f18:	6313      	str	r3, [r2, #48]	; 0x30
 8000f1a:	4b20      	ldr	r3, [pc, #128]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1e:	f003 0301 	and.w	r3, r3, #1
 8000f22:	60bb      	str	r3, [r7, #8]
 8000f24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f26:	2300      	movs	r3, #0
 8000f28:	607b      	str	r3, [r7, #4]
 8000f2a:	4b1c      	ldr	r3, [pc, #112]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f2e:	4a1b      	ldr	r2, [pc, #108]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f30:	f043 0302 	orr.w	r3, r3, #2
 8000f34:	6313      	str	r3, [r2, #48]	; 0x30
 8000f36:	4b19      	ldr	r3, [pc, #100]	; (8000f9c <MX_GPIO_Init+0xe0>)
 8000f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	607b      	str	r3, [r7, #4]
 8000f40:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000f42:	2200      	movs	r2, #0
 8000f44:	2120      	movs	r1, #32
 8000f46:	4816      	ldr	r0, [pc, #88]	; (8000fa0 <MX_GPIO_Init+0xe4>)
 8000f48:	f002 fb6a 	bl	8003620 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000f52:	4b14      	ldr	r3, [pc, #80]	; (8000fa4 <MX_GPIO_Init+0xe8>)
 8000f54:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	2300      	movs	r3, #0
 8000f58:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000f5a:	f107 0314 	add.w	r3, r7, #20
 8000f5e:	4619      	mov	r1, r3
 8000f60:	4811      	ldr	r0, [pc, #68]	; (8000fa8 <MX_GPIO_Init+0xec>)
 8000f62:	f002 f9c9 	bl	80032f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000f66:	2320      	movs	r3, #32
 8000f68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f72:	2300      	movs	r3, #0
 8000f74:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000f76:	f107 0314 	add.w	r3, r7, #20
 8000f7a:	4619      	mov	r1, r3
 8000f7c:	4808      	ldr	r0, [pc, #32]	; (8000fa0 <MX_GPIO_Init+0xe4>)
 8000f7e:	f002 f9bb 	bl	80032f8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
 8000f84:	2100      	movs	r1, #0
 8000f86:	2028      	movs	r0, #40	; 0x28
 8000f88:	f001 fd7d 	bl	8002a86 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000f8c:	2028      	movs	r0, #40	; 0x28
 8000f8e:	f001 fd96 	bl	8002abe <HAL_NVIC_EnableIRQ>

}
 8000f92:	bf00      	nop
 8000f94:	3728      	adds	r7, #40	; 0x28
 8000f96:	46bd      	mov	sp, r7
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023800 	.word	0x40023800
 8000fa0:	40020000 	.word	0x40020000
 8000fa4:	10210000 	.word	0x10210000
 8000fa8:	40020800 	.word	0x40020800

08000fac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8000fb0:	b088      	sub	sp, #32
 8000fb2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fb4:	f001 f802 	bl	8001fbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fb8:	f000 f918 	bl	80011ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fbc:	f7ff ff7e 	bl	8000ebc <MX_GPIO_Init>
  MX_DMA_Init();
 8000fc0:	f7ff ff3e 	bl	8000e40 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000fc4:	f000 ff24 	bl	8001e10 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000fc8:	f000 fc5c 	bl	8001884 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000fcc:	f000 fcca 	bl	8001964 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000fd0:	f000 fd90 	bl	8001af4 <MX_TIM10_Init>
  MX_TIM11_Init();
 8000fd4:	f000 fdb2 	bl	8001b3c <MX_TIM11_Init>
  MX_ADC1_Init();
 8000fd8:	f7ff fe5c 	bl	8000c94 <MX_ADC1_Init>
  MX_TIM8_Init();
 8000fdc:	f000 fd3a 	bl	8001a54 <MX_TIM8_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim10); ///habilita o timer 10
 8000fe0:	4871      	ldr	r0, [pc, #452]	; (80011a8 <main+0x1fc>)
 8000fe2:	f003 f909 	bl	80041f8 <HAL_TIM_Base_Start>

  HAL_TIM_Base_Start_IT(&htim11); ///habilita o timer 11
 8000fe6:	4871      	ldr	r0, [pc, #452]	; (80011ac <main+0x200>)
 8000fe8:	f003 f96e 	bl	80042c8 <HAL_TIM_Base_Start_IT>

  ///foi usado o timer 2 pois ele possui um valor maior que pode ser usado no ARR para dar o valor do periodo direto em micro segundos
  ///E colocar ambas as bordas na corfiguracao para fazer o que o exercicio pede
  HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, &value, 1); ///Habilita o Input Capture com DMA do Timer2 → PA15 → canal 1
 8000fec:	2301      	movs	r3, #1
 8000fee:	4a70      	ldr	r2, [pc, #448]	; (80011b0 <main+0x204>)
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	4870      	ldr	r0, [pc, #448]	; (80011b4 <main+0x208>)
 8000ff4:	f003 fb9a 	bl	800472c <HAL_TIM_IC_Start_DMA>

  HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1); ///PWM usado para gerar um sinal que sera usado para medir se o programa esta funcioando → marcar a opçao para ele começar desligado
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	486f      	ldr	r0, [pc, #444]	; (80011b8 <main+0x20c>)
 8000ffc:	f003 fa2e 	bl	800445c <HAL_TIM_PWM_Start_IT>
  ///sempre desliga no estouro do timer → colocando a frequencia do timer vai ser a frequencia do sinal
  ///PWM → modulação de largura de pulso

  HAL_TIM_Base_Start_IT(&htim8); ///habilita uma frequencia aleatoria de PSC = 999 e ARR = 139
 8001000:	486e      	ldr	r0, [pc, #440]	; (80011bc <main+0x210>)
 8001002:	f003 f961 	bl	80042c8 <HAL_TIM_Base_Start_IT>
  ///Trigger Output → ativar o Update Event

  ///no IOC, o ADC esta configurado para ser ativado pelo timer, para continuar a sequencia de 4 medidas, que vao ser salvas dentro de um vetor de quatro espaços
  HAL_ADC_Start_DMA(&hadc1, medidas, 4);///usando dois canais do ADC, adiciona o DMA no ADC1, mudar a prioridade dele (que vem em Low) → tem 4 medidas de ADC
 8001006:	2204      	movs	r2, #4
 8001008:	496d      	ldr	r1, [pc, #436]	; (80011c0 <main+0x214>)
 800100a:	486e      	ldr	r0, [pc, #440]	; (80011c4 <main+0x218>)
 800100c:	f001 f88c 	bl	8002128 <HAL_ADC_Start_DMA>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  { ///imprime na serial

	  if(__HAL_TIM_GET_FLAG(&htim10, TIM_FLAG_UPDATE)){ ///verifica se passou 1 segundo do Timer10 para imprimir a mensagem na tela (a mensagem é mostrada de 1 em 1 segundo para não ficar muito poluído)
 8001010:	4b65      	ldr	r3, [pc, #404]	; (80011a8 <main+0x1fc>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	691b      	ldr	r3, [r3, #16]
 8001016:	f003 0301 	and.w	r3, r3, #1
 800101a:	2b01      	cmp	r3, #1
 800101c:	d1f8      	bne.n	8001010 <main+0x64>
		  ///eh mostrado uma das três mensagens a cada segundo
		if(flagT==0 && periodo!=0){ ///flagT começa em zero, entao será o primeiro valor a ser exibido
 800101e:	4b6a      	ldr	r3, [pc, #424]	; (80011c8 <main+0x21c>)
 8001020:	781b      	ldrb	r3, [r3, #0]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d119      	bne.n	800105a <main+0xae>
 8001026:	4b69      	ldr	r3, [pc, #420]	; (80011cc <main+0x220>)
 8001028:	e9d3 2300 	ldrd	r2, r3, [r3]
 800102c:	4313      	orrs	r3, r2
 800102e:	d014      	beq.n	800105a <main+0xae>
			///periodo total do sinal
			sprintf(msg, "Periodo do Sinal: %4luus\n\r",periodo); ///imprime o valor do periodo total na serial
 8001030:	4b66      	ldr	r3, [pc, #408]	; (80011cc <main+0x220>)
 8001032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001036:	4966      	ldr	r1, [pc, #408]	; (80011d0 <main+0x224>)
 8001038:	4866      	ldr	r0, [pc, #408]	; (80011d4 <main+0x228>)
 800103a:	f005 fbbd 	bl	80067b8 <siprintf>
			flagT=1; ///altera o valor de flagT para 1 para entrar no proximo if e exibir a proxima mensagem
 800103e:	4a62      	ldr	r2, [pc, #392]	; (80011c8 <main+0x21c>)
 8001040:	2301      	movs	r3, #1
 8001042:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart2, msg, strlen(msg)); ///Usando a usart2, trasmite a mensagem
 8001044:	4863      	ldr	r0, [pc, #396]	; (80011d4 <main+0x228>)
 8001046:	f7ff f8e3 	bl	8000210 <strlen>
 800104a:	4603      	mov	r3, r0
 800104c:	b29b      	uxth	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	4960      	ldr	r1, [pc, #384]	; (80011d4 <main+0x228>)
 8001052:	4861      	ldr	r0, [pc, #388]	; (80011d8 <main+0x22c>)
 8001054:	f004 fe5b 	bl	8005d0e <HAL_UART_Transmit_IT>
 8001058:	e0a0      	b.n	800119c <main+0x1f0>
		}
		else if (flagT==1){ ///se ja imprimiu a mensagem de cima, entra nessa if
 800105a:	4b5b      	ldr	r3, [pc, #364]	; (80011c8 <main+0x21c>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	2b01      	cmp	r3, #1
 8001060:	d125      	bne.n	80010ae <main+0x102>
			///periodo de trabalho = periodo que o sinal fica em nivel logico 1, ou seja, que ele definitivamente "trabalha" → usando a variavel periodoI, que pega o "meio do sinal"
			sprintf(msg, "Periodo de Trabalho do Sinal: %4luus\n\r",flagP==0? periodoI : periodo - periodoI); ///faz o cálculo da frequência 1 dividindo o CLOCK do ARM pela multiplicação do período medido + 1 e o valor de PSC (que nesse caso é 47)
 8001062:	4b5e      	ldr	r3, [pc, #376]	; (80011dc <main+0x230>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d00a      	beq.n	8001080 <main+0xd4>
 800106a:	4b58      	ldr	r3, [pc, #352]	; (80011cc <main+0x220>)
 800106c:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001070:	4b5b      	ldr	r3, [pc, #364]	; (80011e0 <main+0x234>)
 8001072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001076:	ebb0 0a02 	subs.w	sl, r0, r2
 800107a:	eb61 0b03 	sbc.w	fp, r1, r3
 800107e:	e002      	b.n	8001086 <main+0xda>
 8001080:	4b57      	ldr	r3, [pc, #348]	; (80011e0 <main+0x234>)
 8001082:	e9d3 ab00 	ldrd	sl, fp, [r3]
 8001086:	4652      	mov	r2, sl
 8001088:	465b      	mov	r3, fp
 800108a:	4956      	ldr	r1, [pc, #344]	; (80011e4 <main+0x238>)
 800108c:	4851      	ldr	r0, [pc, #324]	; (80011d4 <main+0x228>)
 800108e:	f005 fb93 	bl	80067b8 <siprintf>
			flagT=2; ///altera o valor de flagT para 2 para entrar no proximo if e exibir a proxima mensagem
 8001092:	4a4d      	ldr	r2, [pc, #308]	; (80011c8 <main+0x21c>)
 8001094:	2302      	movs	r3, #2
 8001096:	7013      	strb	r3, [r2, #0]
			HAL_UART_Transmit_IT(&huart2, msg, strlen(msg)); ///Usando a usart2, trasmite a mensagem
 8001098:	484e      	ldr	r0, [pc, #312]	; (80011d4 <main+0x228>)
 800109a:	f7ff f8b9 	bl	8000210 <strlen>
 800109e:	4603      	mov	r3, r0
 80010a0:	b29b      	uxth	r3, r3
 80010a2:	461a      	mov	r2, r3
 80010a4:	494b      	ldr	r1, [pc, #300]	; (80011d4 <main+0x228>)
 80010a6:	484c      	ldr	r0, [pc, #304]	; (80011d8 <main+0x22c>)
 80010a8:	f004 fe31 	bl	8005d0e <HAL_UART_Transmit_IT>
 80010ac:	e076      	b.n	800119c <main+0x1f0>
		}
		else if(flagT==2){ ///se ja imprimiu a mensagem de cima, entra nessa if
 80010ae:	4b46      	ldr	r3, [pc, #280]	; (80011c8 <main+0x21c>)
 80010b0:	781b      	ldrb	r3, [r3, #0]
 80010b2:	2b02      	cmp	r3, #2
 80010b4:	d172      	bne.n	800119c <main+0x1f0>
			///calcula a porcentagem que o led fica ligado → tambem usando a variavel de periodoI
			sprintf(msg, "Representa %i%% do Sinal\n\r",flagP==0? (periodoI*100/periodo) : ((periodo - periodoI)*100/periodo));
 80010b6:	4b49      	ldr	r3, [pc, #292]	; (80011dc <main+0x230>)
 80010b8:	781b      	ldrb	r3, [r3, #0]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d126      	bne.n	800110c <main+0x160>
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <main+0x234>)
 80010c0:	e9d3 4500 	ldrd	r4, r5, [r3]
 80010c4:	4622      	mov	r2, r4
 80010c6:	462b      	mov	r3, r5
 80010c8:	1891      	adds	r1, r2, r2
 80010ca:	60b9      	str	r1, [r7, #8]
 80010cc:	415b      	adcs	r3, r3
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80010d4:	1912      	adds	r2, r2, r4
 80010d6:	eb45 0303 	adc.w	r3, r5, r3
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	f04f 0100 	mov.w	r1, #0
 80010e2:	0159      	lsls	r1, r3, #5
 80010e4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80010e8:	0150      	lsls	r0, r2, #5
 80010ea:	1812      	adds	r2, r2, r0
 80010ec:	eb41 0303 	adc.w	r3, r1, r3
 80010f0:	1911      	adds	r1, r2, r4
 80010f2:	61b9      	str	r1, [r7, #24]
 80010f4:	416b      	adcs	r3, r5
 80010f6:	61fb      	str	r3, [r7, #28]
 80010f8:	4b34      	ldr	r3, [pc, #208]	; (80011cc <main+0x220>)
 80010fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001102:	f7ff fc4b 	bl	800099c <__aeabi_uldivmod>
 8001106:	4602      	mov	r2, r0
 8001108:	460b      	mov	r3, r1
 800110a:	e02f      	b.n	800116c <main+0x1c0>
 800110c:	4b2f      	ldr	r3, [pc, #188]	; (80011cc <main+0x220>)
 800110e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001112:	4b33      	ldr	r3, [pc, #204]	; (80011e0 <main+0x234>)
 8001114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001118:	ebb0 0802 	subs.w	r8, r0, r2
 800111c:	eb61 0903 	sbc.w	r9, r1, r3
 8001120:	4642      	mov	r2, r8
 8001122:	464b      	mov	r3, r9
 8001124:	1891      	adds	r1, r2, r2
 8001126:	6039      	str	r1, [r7, #0]
 8001128:	415b      	adcs	r3, r3
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001130:	eb12 0208 	adds.w	r2, r2, r8
 8001134:	eb43 0309 	adc.w	r3, r3, r9
 8001138:	f04f 0000 	mov.w	r0, #0
 800113c:	f04f 0100 	mov.w	r1, #0
 8001140:	0159      	lsls	r1, r3, #5
 8001142:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001146:	0150      	lsls	r0, r2, #5
 8001148:	1812      	adds	r2, r2, r0
 800114a:	eb41 0303 	adc.w	r3, r1, r3
 800114e:	eb12 0108 	adds.w	r1, r2, r8
 8001152:	6139      	str	r1, [r7, #16]
 8001154:	eb43 0309 	adc.w	r3, r3, r9
 8001158:	617b      	str	r3, [r7, #20]
 800115a:	4b1c      	ldr	r3, [pc, #112]	; (80011cc <main+0x220>)
 800115c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001160:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001164:	f7ff fc1a 	bl	800099c <__aeabi_uldivmod>
 8001168:	4602      	mov	r2, r0
 800116a:	460b      	mov	r3, r1
 800116c:	491e      	ldr	r1, [pc, #120]	; (80011e8 <main+0x23c>)
 800116e:	4819      	ldr	r0, [pc, #100]	; (80011d4 <main+0x228>)
 8001170:	f005 fb22 	bl	80067b8 <siprintf>
			flagT=0; ///altera o valor de flagT de volta para zero para imprimir a primeira mensagem novamente
 8001174:	4a14      	ldr	r2, [pc, #80]	; (80011c8 <main+0x21c>)
 8001176:	2300      	movs	r3, #0
 8001178:	7013      	strb	r3, [r2, #0]
			periodo=0; ///zera o periodo para que ele possa ser calculado novamente
 800117a:	4914      	ldr	r1, [pc, #80]	; (80011cc <main+0x220>)
 800117c:	f04f 0200 	mov.w	r2, #0
 8001180:	f04f 0300 	mov.w	r3, #0
 8001184:	e9c1 2300 	strd	r2, r3, [r1]
			HAL_UART_Transmit_IT(&huart2, msg, strlen(msg)); ///Usando a usart2, trasmite a mensagem
 8001188:	4812      	ldr	r0, [pc, #72]	; (80011d4 <main+0x228>)
 800118a:	f7ff f841 	bl	8000210 <strlen>
 800118e:	4603      	mov	r3, r0
 8001190:	b29b      	uxth	r3, r3
 8001192:	461a      	mov	r2, r3
 8001194:	490f      	ldr	r1, [pc, #60]	; (80011d4 <main+0x228>)
 8001196:	4810      	ldr	r0, [pc, #64]	; (80011d8 <main+0x22c>)
 8001198:	f004 fdb9 	bl	8005d0e <HAL_UART_Transmit_IT>
		}
		__HAL_TIM_CLEAR_FLAG(&htim10, TIM_FLAG_UPDATE);
 800119c:	4b02      	ldr	r3, [pc, #8]	; (80011a8 <main+0x1fc>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f06f 0201 	mvn.w	r2, #1
 80011a4:	611a      	str	r2, [r3, #16]
	  if(__HAL_TIM_GET_FLAG(&htim10, TIM_FLAG_UPDATE)){ ///verifica se passou 1 segundo do Timer10 para imprimir a mensagem na tela (a mensagem é mostrada de 1 em 1 segundo para não ficar muito poluído)
 80011a6:	e733      	b.n	8001010 <main+0x64>
 80011a8:	20000260 	.word	0x20000260
 80011ac:	200002f0 	.word	0x200002f0
 80011b0:	200001b0 	.word	0x200001b0
 80011b4:	20000338 	.word	0x20000338
 80011b8:	200002a8 	.word	0x200002a8
 80011bc:	20000218 	.word	0x20000218
 80011c0:	200001a4 	.word	0x200001a4
 80011c4:	200000c4 	.word	0x200000c4
 80011c8:	200000a1 	.word	0x200000a1
 80011cc:	200000a8 	.word	0x200000a8
 80011d0:	0800702c 	.word	0x0800702c
 80011d4:	20000170 	.word	0x20000170
 80011d8:	200003e0 	.word	0x200003e0
 80011dc:	200000a2 	.word	0x200000a2
 80011e0:	200000b0 	.word	0x200000b0
 80011e4:	08007048 	.word	0x08007048
 80011e8:	08007070 	.word	0x08007070

080011ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b094      	sub	sp, #80	; 0x50
 80011f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f2:	f107 031c 	add.w	r3, r7, #28
 80011f6:	2234      	movs	r2, #52	; 0x34
 80011f8:	2100      	movs	r1, #0
 80011fa:	4618      	mov	r0, r3
 80011fc:	f005 fad4 	bl	80067a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001200:	f107 0308 	add.w	r3, r7, #8
 8001204:	2200      	movs	r2, #0
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	605a      	str	r2, [r3, #4]
 800120a:	609a      	str	r2, [r3, #8]
 800120c:	60da      	str	r2, [r3, #12]
 800120e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001210:	2300      	movs	r3, #0
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	4b2a      	ldr	r3, [pc, #168]	; (80012c0 <SystemClock_Config+0xd4>)
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001218:	4a29      	ldr	r2, [pc, #164]	; (80012c0 <SystemClock_Config+0xd4>)
 800121a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800121e:	6413      	str	r3, [r2, #64]	; 0x40
 8001220:	4b27      	ldr	r3, [pc, #156]	; (80012c0 <SystemClock_Config+0xd4>)
 8001222:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001228:	607b      	str	r3, [r7, #4]
 800122a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800122c:	2300      	movs	r3, #0
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	4b24      	ldr	r3, [pc, #144]	; (80012c4 <SystemClock_Config+0xd8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <SystemClock_Config+0xd8>)
 800123a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800123e:	6013      	str	r3, [r2, #0]
 8001240:	4b20      	ldr	r3, [pc, #128]	; (80012c4 <SystemClock_Config+0xd8>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800124c:	2302      	movs	r3, #2
 800124e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001250:	2301      	movs	r3, #1
 8001252:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001254:	2310      	movs	r3, #16
 8001256:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2302      	movs	r3, #2
 800125a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800125c:	2300      	movs	r3, #0
 800125e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001260:	2310      	movs	r3, #16
 8001262:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001264:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001268:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800126a:	2304      	movs	r3, #4
 800126c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800126e:	2302      	movs	r3, #2
 8001270:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001272:	2302      	movs	r3, #2
 8001274:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001276:	f107 031c 	add.w	r3, r7, #28
 800127a:	4618      	mov	r0, r3
 800127c:	f002 fcce 	bl	8003c1c <HAL_RCC_OscConfig>
 8001280:	4603      	mov	r3, r0
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8001286:	f000 f9e7 	bl	8001658 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128a:	230f      	movs	r3, #15
 800128c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800128e:	2302      	movs	r3, #2
 8001290:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001292:	2300      	movs	r3, #0
 8001294:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800129c:	2300      	movs	r3, #0
 800129e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80012a0:	f107 0308 	add.w	r3, r7, #8
 80012a4:	2102      	movs	r1, #2
 80012a6:	4618      	mov	r0, r3
 80012a8:	f002 f9ec 	bl	8003684 <HAL_RCC_ClockConfig>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <SystemClock_Config+0xca>
  {
    Error_Handler();
 80012b2:	f000 f9d1 	bl	8001658 <Error_Handler>
  }
}
 80012b6:	bf00      	nop
 80012b8:	3750      	adds	r7, #80	; 0x50
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	40023800 	.word	0x40023800
 80012c4:	40007000 	.word	0x40007000

080012c8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){ ///pino configurado para ser uma interrupção externa → nesse caso eh o PC13
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4603      	mov	r3, r0
 80012d0:	80fb      	strh	r3, [r7, #6]
	flagP=flag; ///toda vez q o de baixo der uma borda de descida, salva o valor
 80012d2:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <HAL_GPIO_EXTI_Callback+0x20>)
 80012d4:	781a      	ldrb	r2, [r3, #0]
 80012d6:	4b05      	ldr	r3, [pc, #20]	; (80012ec <HAL_GPIO_EXTI_Callback+0x24>)
 80012d8:	701a      	strb	r2, [r3, #0]
	///borda de descida = terminou o periodo ativo do sinal
	///ligar OUT e IN junto na proto (conferir os pinos) e depois liga em um led
}
 80012da:	bf00      	nop
 80012dc:	370c      	adds	r7, #12
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
 80012e6:	bf00      	nop
 80012e8:	200000a0 	.word	0x200000a0
 80012ec:	200000a2 	.word	0x200000a2

080012f0 <HAL_TIM_IC_CaptureCallback>:
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	uint64_t calc(long a, long b, long c, long ARR); ///Declarando a função calc

	///o periodo de trabalho eh o tempo do sinal em high
	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ ///interrupção do canal 1 do timer 2
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7f1b      	ldrb	r3, [r3, #28]
 80012fc:	2b01      	cmp	r3, #1
 80012fe:	d14d      	bne.n	800139c <HAL_TIM_IC_CaptureCallback+0xac>
		///eh preciso medir a borda de subida e de descida
		if (initVal == -1) { ///se initVal estiver com seu valor inicial, que é -1
 8001300:	4b2b      	ldr	r3, [pc, #172]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001306:	f1b3 3fff 	cmp.w	r3, #4294967295
 800130a:	bf08      	it	eq
 800130c:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8001310:	d106      	bne.n	8001320 <HAL_TIM_IC_CaptureCallback+0x30>
			initVal = value; ///com o estouro, salva o valor que estava no contador
 8001312:	4b28      	ldr	r3, [pc, #160]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001314:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001318:	4925      	ldr	r1, [pc, #148]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800131a:	e9c1 2300 	strd	r2, r3, [r1]
 800131e:	e03d      	b.n	800139c <HAL_TIM_IC_CaptureCallback+0xac>
		} else { ///se initVal for diferente de -1, ou seja, se já mediu alguma coisa
			if(flag == 0){ ///se ainda esta calculando o periodo "do meio" → periodoI (usado para calcular o periodo de trabalho)
 8001320:	4b25      	ldr	r3, [pc, #148]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001322:	781b      	ldrb	r3, [r3, #0]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d116      	bne.n	8001356 <HAL_TIM_IC_CaptureCallback+0x66>
				periodoI = calc(initVal, value, valE, 999999); ///calcula o periodo utilizando a função criada calc
 8001328:	4b21      	ldr	r3, [pc, #132]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 800132a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800132e:	4610      	mov	r0, r2
 8001330:	4b20      	ldr	r3, [pc, #128]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001336:	4611      	mov	r1, r2
 8001338:	4b20      	ldr	r3, [pc, #128]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xcc>)
 800133a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800133e:	4b20      	ldr	r3, [pc, #128]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 8001340:	f000 f846 	bl	80013d0 <calc>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	491e      	ldr	r1, [pc, #120]	; (80013c4 <HAL_TIM_IC_CaptureCallback+0xd4>)
 800134a:	e9c1 2300 	strd	r2, r3, [r1]
				flag = 1; ///muda o valor de flag para ser diferente de zero e entrar no else abaixo
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001350:	2201      	movs	r2, #1
 8001352:	701a      	strb	r2, [r3, #0]
 8001354:	e022      	b.n	800139c <HAL_TIM_IC_CaptureCallback+0xac>
			}else { ///se ja esta calculando o periodo total → periodo
				///calcula de novo, tudo dessa vez, porque agora esta no final, sabendo quantos estouros do timer teve
				periodo = calc(initVal, value, valE, 999999); ///calcula o periodo utilizando a função criada calc
 8001356:	4b16      	ldr	r3, [pc, #88]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800135c:	4610      	mov	r0, r2
 800135e:	4b15      	ldr	r3, [pc, #84]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	4611      	mov	r1, r2
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xcc>)
 8001368:	e9d3 2300 	ldrd	r2, r3, [r3]
 800136c:	4b14      	ldr	r3, [pc, #80]	; (80013c0 <HAL_TIM_IC_CaptureCallback+0xd0>)
 800136e:	f000 f82f 	bl	80013d0 <calc>
 8001372:	4602      	mov	r2, r0
 8001374:	460b      	mov	r3, r1
 8001376:	4914      	ldr	r1, [pc, #80]	; (80013c8 <HAL_TIM_IC_CaptureCallback+0xd8>)
 8001378:	e9c1 2300 	strd	r2, r3, [r1]
				initVal = value; ///initVal volta ao seu valor
 800137c:	4b0d      	ldr	r3, [pc, #52]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 800137e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001382:	490b      	ldr	r1, [pc, #44]	; (80013b0 <HAL_TIM_IC_CaptureCallback+0xc0>)
 8001384:	e9c1 2300 	strd	r2, r3, [r1]
				valE = 0; ///zera valE
 8001388:	490c      	ldr	r1, [pc, #48]	; (80013bc <HAL_TIM_IC_CaptureCallback+0xcc>)
 800138a:	f04f 0200 	mov.w	r2, #0
 800138e:	f04f 0300 	mov.w	r3, #0
 8001392:	e9c1 2300 	strd	r2, r3, [r1]
				flag = 0; ///zera a flag
 8001396:	4b08      	ldr	r3, [pc, #32]	; (80013b8 <HAL_TIM_IC_CaptureCallback+0xc8>)
 8001398:	2200      	movs	r2, #0
 800139a:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	HAL_TIM_IC_Start_DMA(&htim2, TIM_CHANNEL_1, &value, 1); ///Habilita o Input Capture com Interrupção do Timer2 → PA0 → canal 1
 800139c:	2301      	movs	r3, #1
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <HAL_TIM_IC_CaptureCallback+0xc4>)
 80013a0:	2100      	movs	r1, #0
 80013a2:	480a      	ldr	r0, [pc, #40]	; (80013cc <HAL_TIM_IC_CaptureCallback+0xdc>)
 80013a4:	f003 f9c2 	bl	800472c <HAL_TIM_IC_Start_DMA>
}
 80013a8:	bf00      	nop
 80013aa:	3708      	adds	r7, #8
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bd80      	pop	{r7, pc}
 80013b0:	20000000 	.word	0x20000000
 80013b4:	200001b0 	.word	0x200001b0
 80013b8:	200000a0 	.word	0x200000a0
 80013bc:	20000098 	.word	0x20000098
 80013c0:	000f423f 	.word	0x000f423f
 80013c4:	200000b0 	.word	0x200000b0
 80013c8:	200000a8 	.word	0x200000a8
 80013cc:	20000338 	.word	0x20000338

080013d0 <calc>:

/**
 * @brief Função que faz o cálculo do periodo desejado
 * @brief Eh exatamente a mesma função usada no exercicio anterior, que era de IC e tambem era necessario medir o periodo do sinal
 */
uint64_t calc(long a, long b, long c, long ARR){ ///entra-se com 4 valores para fazer o cálculo, que vão ser os valores de initVal, valI, valE e ARR_CL
 80013d0:	b4b0      	push	{r4, r5, r7}
 80013d2:	b087      	sub	sp, #28
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	60b9      	str	r1, [r7, #8]
 80013da:	607a      	str	r2, [r7, #4]
 80013dc:	603b      	str	r3, [r7, #0]
	uint64_t period; ///variavel que retorna o periodo calculado na função
	if(c > 0) ///se o número de períodos medidos durante a medição for 1 ou mais
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	dd20      	ble.n	8001426 <calc+0x56>
	{
		if(c > 1) ///se o número de períodos medidos durante a medição for mais que 1
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	dd12      	ble.n	8001410 <calc+0x40>
		{
			c--;    ///ignorando o final do primeiro periodo
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	3b01      	subs	r3, #1
 80013ee:	607b      	str	r3, [r7, #4]
			period = (ARR - a + b) + (ARR) * c; /// se entre o valor inicial e o valor final (Internal) houverem periodos completos do timer3
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	1ad2      	subs	r2, r2, r3
 80013f6:	68bb      	ldr	r3, [r7, #8]
 80013f8:	441a      	add	r2, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	6879      	ldr	r1, [r7, #4]
 80013fe:	fb01 f303 	mul.w	r3, r1, r3
 8001402:	4413      	add	r3, r2
 8001404:	461a      	mov	r2, r3
 8001406:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800140a:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800140e:	e012      	b.n	8001436 <calc+0x66>
			///ou seja, se tiver mais que um período, utiliza o mesmo cálculo só acrescenta a parte de multiplicar o valor do ARR pelo número de períodos a mais que teve
		}
		///se o número de períodos medidos durante a medição for 1
		else period = (ARR - a + b); /// se o valor inicial e o valor final (Internal) estiverem em periodos subsequentes do timer3
 8001410:	683a      	ldr	r2, [r7, #0]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	1ad2      	subs	r2, r2, r3
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	4413      	add	r3, r2
 800141a:	461a      	mov	r2, r3
 800141c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001420:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8001424:	e007      	b.n	8001436 <calc+0x66>
		///ou seja, se houver passado somente um período
	}
	///se o número de períodos medidos durante a medição não completar 1 inteiro
	else period = b - a; /// se ainda estiver dentro do mesmo periodo do timer3, ou seja, não tiver passado um período completo
 8001426:	68ba      	ldr	r2, [r7, #8]
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	1ad3      	subs	r3, r2, r3
 800142c:	461a      	mov	r2, r3
 800142e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8001432:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return period + 1; /// a função retorna o valor do periodo calculado
 8001436:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800143a:	1c54      	adds	r4, r2, #1
 800143c:	f143 0500 	adc.w	r5, r3, #0
 8001440:	4622      	mov	r2, r4
 8001442:	462b      	mov	r3, r5
	///ele poderia entregar 0us, mas na real eh 1, entao soma +1
}
 8001444:	4610      	mov	r0, r2
 8001446:	4619      	mov	r1, r3
 8001448:	371c      	adds	r7, #28
 800144a:	46bd      	mov	sp, r7
 800144c:	bcb0      	pop	{r4, r5, r7}
 800144e:	4770      	bx	lr

08001450 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ ///Interrupção do final do timer 11, ou seja, estouro do timer
 8001450:	b4b0      	push	{r4, r5, r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) ///se a interrupção do timer 11 estourou
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	4a0b      	ldr	r2, [pc, #44]	; (800148c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 800145e:	4293      	cmp	r3, r2
 8001460:	d10f      	bne.n	8001482 <HAL_TIM_PeriodElapsedCallback+0x32>
		///se initVal for maior que -1, ou seja, se ja passou no minimo um estouro do timer
			if(initVal > -1) valE++; ///conta quantas vezes o timer estourou adicionando na variável valE
 8001462:	4b0b      	ldr	r3, [pc, #44]	; (8001490 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	2a00      	cmp	r2, #0
 800146a:	f173 0300 	sbcs.w	r3, r3, #0
 800146e:	db08      	blt.n	8001482 <HAL_TIM_PeriodElapsedCallback+0x32>
 8001470:	4b08      	ldr	r3, [pc, #32]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8001472:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001476:	1c54      	adds	r4, r2, #1
 8001478:	f143 0500 	adc.w	r5, r3, #0
 800147c:	4b05      	ldr	r3, [pc, #20]	; (8001494 <HAL_TIM_PeriodElapsedCallback+0x44>)
 800147e:	e9c3 4500 	strd	r4, r5, [r3]
}
 8001482:	bf00      	nop
 8001484:	370c      	adds	r7, #12
 8001486:	46bd      	mov	sp, r7
 8001488:	bcb0      	pop	{r4, r5, r7}
 800148a:	4770      	bx	lr
 800148c:	40014800 	.word	0x40014800
 8001490:	20000000 	.word	0x20000000
 8001494:	20000098 	.word	0x20000098

08001498 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8001498:	b5b0      	push	{r4, r5, r7, lr}
 800149a:	b084      	sub	sp, #16
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
	uint16_t a=__HAL_TIM_GET_AUTORELOAD(&htim3); ///pega o valor total de ARR
 80014a0:	4b67      	ldr	r3, [pc, #412]	; (8001640 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014a6:	81fb      	strh	r3, [r7, #14]
	uint16_t p=__HAL_TIM_GET_COMPARE(&htim3,TIM_CHANNEL_1); ///valor atual do COMPARE do mesmo timer
 80014a8:	4b65      	ldr	r3, [pc, #404]	; (8001640 <HAL_ADC_ConvCpltCallback+0x1a8>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ae:	81bb      	strh	r3, [r7, #12]
	uint16_t pul;
	uint16_t arr;
	media2=medidas[1];
 80014b0:	4b64      	ldr	r3, [pc, #400]	; (8001644 <HAL_ADC_ConvCpltCallback+0x1ac>)
 80014b2:	885b      	ldrh	r3, [r3, #2]
 80014b4:	b29a      	uxth	r2, r3
 80014b6:	4b64      	ldr	r3, [pc, #400]	; (8001648 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80014b8:	801a      	strh	r2, [r3, #0]
	media2+=medidas[3];
 80014ba:	4b62      	ldr	r3, [pc, #392]	; (8001644 <HAL_ADC_ConvCpltCallback+0x1ac>)
 80014bc:	88db      	ldrh	r3, [r3, #6]
 80014be:	b29a      	uxth	r2, r3
 80014c0:	4b61      	ldr	r3, [pc, #388]	; (8001648 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80014c2:	881b      	ldrh	r3, [r3, #0]
 80014c4:	4413      	add	r3, r2
 80014c6:	b29a      	uxth	r2, r3
 80014c8:	4b5f      	ldr	r3, [pc, #380]	; (8001648 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80014ca:	801a      	strh	r2, [r3, #0]
	media2/=2;
 80014cc:	4b5e      	ldr	r3, [pc, #376]	; (8001648 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80014ce:	881b      	ldrh	r3, [r3, #0]
 80014d0:	085b      	lsrs	r3, r3, #1
 80014d2:	b29a      	uxth	r2, r3
 80014d4:	4b5c      	ldr	r3, [pc, #368]	; (8001648 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80014d6:	801a      	strh	r2, [r3, #0]
	///o PWM esta em 1Hz → PSC = 1999 e ARR = 41999 → gera o periodo do sinal → MAX
	///uma outra frequencia → 7Hz → PSC = 1999 e ARR = 5999 → MIN
	///Valores de constantes no IOC
	///O led pisca em uma frequencia que pode variar de 1Hz ate 7Hz → esse valor foi pre-determinado, mas pode ser alterado de acordo com o desejado
	///foi escolhido uma frequencia mais baixa para que seja possivel visualizar melhor a mudança da piscada do led
	arr= media2*(ARRT3_MAX-ARRT3_MIN)/4095+ARRT3_MIN; ///faz uma porcentagem → o maximo da medida eh 4095
 80014d8:	4b5b      	ldr	r3, [pc, #364]	; (8001648 <HAL_ADC_ConvCpltCallback+0x1b0>)
 80014da:	881b      	ldrh	r3, [r3, #0]
 80014dc:	461a      	mov	r2, r3
 80014de:	f648 43a0 	movw	r3, #36000	; 0x8ca0
 80014e2:	fb03 f302 	mul.w	r3, r3, r2
 80014e6:	4a59      	ldr	r2, [pc, #356]	; (800164c <HAL_ADC_ConvCpltCallback+0x1b4>)
 80014e8:	fb82 1203 	smull	r1, r2, r2, r3
 80014ec:	441a      	add	r2, r3
 80014ee:	12d2      	asrs	r2, r2, #11
 80014f0:	17db      	asrs	r3, r3, #31
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	b29b      	uxth	r3, r3
 80014f6:	f503 53bb 	add.w	r3, r3, #5984	; 0x1760
 80014fa:	330f      	adds	r3, #15
 80014fc:	817b      	strh	r3, [r7, #10]
	///media2 x variação → divide por 4095 e vai dar um valor entre 0 e 36000 e depois soma 6000 de volta na conta para desse jeito ter o novo valor de ARR
	if(arr<a*0.9 || arr>a*1.1)__HAL_TIM_SET_AUTORELOAD(&htim3, arr); ///se o ARR variar +10% ou -10%, seta ele para o valor novo
 80014fe:	897b      	ldrh	r3, [r7, #10]
 8001500:	4618      	mov	r0, r3
 8001502:	f7ff f959 	bl	80007b8 <__aeabi_i2d>
 8001506:	4604      	mov	r4, r0
 8001508:	460d      	mov	r5, r1
 800150a:	89fb      	ldrh	r3, [r7, #14]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff f953 	bl	80007b8 <__aeabi_i2d>
 8001512:	a347      	add	r3, pc, #284	; (adr r3, 8001630 <HAL_ADC_ConvCpltCallback+0x198>)
 8001514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001518:	f7fe fed2 	bl	80002c0 <__aeabi_dmul>
 800151c:	4602      	mov	r2, r0
 800151e:	460b      	mov	r3, r1
 8001520:	4620      	mov	r0, r4
 8001522:	4629      	mov	r1, r5
 8001524:	f7ff fa12 	bl	800094c <__aeabi_dcmplt>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d117      	bne.n	800155e <HAL_ADC_ConvCpltCallback+0xc6>
 800152e:	897b      	ldrh	r3, [r7, #10]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f941 	bl	80007b8 <__aeabi_i2d>
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	89fb      	ldrh	r3, [r7, #14]
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff f93b 	bl	80007b8 <__aeabi_i2d>
 8001542:	a33d      	add	r3, pc, #244	; (adr r3, 8001638 <HAL_ADC_ConvCpltCallback+0x1a0>)
 8001544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001548:	f7fe feba 	bl	80002c0 <__aeabi_dmul>
 800154c:	4602      	mov	r2, r0
 800154e:	460b      	mov	r3, r1
 8001550:	4620      	mov	r0, r4
 8001552:	4629      	mov	r1, r5
 8001554:	f7ff fa18 	bl	8000988 <__aeabi_dcmpgt>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d006      	beq.n	800156c <HAL_ADC_ConvCpltCallback+0xd4>
 800155e:	4b38      	ldr	r3, [pc, #224]	; (8001640 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	897a      	ldrh	r2, [r7, #10]
 8001564:	62da      	str	r2, [r3, #44]	; 0x2c
 8001566:	897b      	ldrh	r3, [r7, #10]
 8001568:	4a35      	ldr	r2, [pc, #212]	; (8001640 <HAL_ADC_ConvCpltCallback+0x1a8>)
 800156a:	60d3      	str	r3, [r2, #12]
	media1=medidas[0];
 800156c:	4b35      	ldr	r3, [pc, #212]	; (8001644 <HAL_ADC_ConvCpltCallback+0x1ac>)
 800156e:	881b      	ldrh	r3, [r3, #0]
 8001570:	b29a      	uxth	r2, r3
 8001572:	4b37      	ldr	r3, [pc, #220]	; (8001650 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001574:	801a      	strh	r2, [r3, #0]
	media1+=medidas[2];
 8001576:	4b33      	ldr	r3, [pc, #204]	; (8001644 <HAL_ADC_ConvCpltCallback+0x1ac>)
 8001578:	889b      	ldrh	r3, [r3, #4]
 800157a:	b29a      	uxth	r2, r3
 800157c:	4b34      	ldr	r3, [pc, #208]	; (8001650 <HAL_ADC_ConvCpltCallback+0x1b8>)
 800157e:	881b      	ldrh	r3, [r3, #0]
 8001580:	4413      	add	r3, r2
 8001582:	b29a      	uxth	r2, r3
 8001584:	4b32      	ldr	r3, [pc, #200]	; (8001650 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001586:	801a      	strh	r2, [r3, #0]
	media1/=2;
 8001588:	4b31      	ldr	r3, [pc, #196]	; (8001650 <HAL_ADC_ConvCpltCallback+0x1b8>)
 800158a:	881b      	ldrh	r3, [r3, #0]
 800158c:	085b      	lsrs	r3, r3, #1
 800158e:	b29a      	uxth	r2, r3
 8001590:	4b2f      	ldr	r3, [pc, #188]	; (8001650 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001592:	801a      	strh	r2, [r3, #0]
	///faz duas medidas e depois faz a media das duas
	pul=media1*arr/4095; ///mesma coisa que o anterior para esse aqui, mas como eh o minimo nao precisa fazer a soma
 8001594:	4b2e      	ldr	r3, [pc, #184]	; (8001650 <HAL_ADC_ConvCpltCallback+0x1b8>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	461a      	mov	r2, r3
 800159a:	897b      	ldrh	r3, [r7, #10]
 800159c:	fb03 f302 	mul.w	r3, r3, r2
 80015a0:	4a2a      	ldr	r2, [pc, #168]	; (800164c <HAL_ADC_ConvCpltCallback+0x1b4>)
 80015a2:	fb82 1203 	smull	r1, r2, r2, r3
 80015a6:	441a      	add	r2, r3
 80015a8:	12d2      	asrs	r2, r2, #11
 80015aa:	17db      	asrs	r3, r3, #31
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	813b      	strh	r3, [r7, #8]
	if(pul<p*0.9 || pul>p*1.1)__HAL_TIM_SET_COMPARE(&htim3,TIM_CHANNEL_1, pul); ///mesma coisa do anterior → confere se esta +10% ou -10% e seta ele para o novo valor
 80015b0:	893b      	ldrh	r3, [r7, #8]
 80015b2:	4618      	mov	r0, r3
 80015b4:	f7ff f900 	bl	80007b8 <__aeabi_i2d>
 80015b8:	4604      	mov	r4, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	89bb      	ldrh	r3, [r7, #12]
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff f8fa 	bl	80007b8 <__aeabi_i2d>
 80015c4:	a31a      	add	r3, pc, #104	; (adr r3, 8001630 <HAL_ADC_ConvCpltCallback+0x198>)
 80015c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ca:	f7fe fe79 	bl	80002c0 <__aeabi_dmul>
 80015ce:	4602      	mov	r2, r0
 80015d0:	460b      	mov	r3, r1
 80015d2:	4620      	mov	r0, r4
 80015d4:	4629      	mov	r1, r5
 80015d6:	f7ff f9b9 	bl	800094c <__aeabi_dcmplt>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d117      	bne.n	8001610 <HAL_ADC_ConvCpltCallback+0x178>
 80015e0:	893b      	ldrh	r3, [r7, #8]
 80015e2:	4618      	mov	r0, r3
 80015e4:	f7ff f8e8 	bl	80007b8 <__aeabi_i2d>
 80015e8:	4604      	mov	r4, r0
 80015ea:	460d      	mov	r5, r1
 80015ec:	89bb      	ldrh	r3, [r7, #12]
 80015ee:	4618      	mov	r0, r3
 80015f0:	f7ff f8e2 	bl	80007b8 <__aeabi_i2d>
 80015f4:	a310      	add	r3, pc, #64	; (adr r3, 8001638 <HAL_ADC_ConvCpltCallback+0x1a0>)
 80015f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015fa:	f7fe fe61 	bl	80002c0 <__aeabi_dmul>
 80015fe:	4602      	mov	r2, r0
 8001600:	460b      	mov	r3, r1
 8001602:	4620      	mov	r0, r4
 8001604:	4629      	mov	r1, r5
 8001606:	f7ff f9bf 	bl	8000988 <__aeabi_dcmpgt>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d003      	beq.n	8001618 <HAL_ADC_ConvCpltCallback+0x180>
 8001610:	4b0b      	ldr	r3, [pc, #44]	; (8001640 <HAL_ADC_ConvCpltCallback+0x1a8>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	893a      	ldrh	r2, [r7, #8]
 8001616:	635a      	str	r2, [r3, #52]	; 0x34

	HAL_ADC_Start_DMA(&hadc1, medidas, 4); ///manda rodar novamente
 8001618:	2204      	movs	r2, #4
 800161a:	490a      	ldr	r1, [pc, #40]	; (8001644 <HAL_ADC_ConvCpltCallback+0x1ac>)
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <HAL_ADC_ConvCpltCallback+0x1bc>)
 800161e:	f000 fd83 	bl	8002128 <HAL_ADC_Start_DMA>
	///quando for usar DMA, tem que ativar de novo, todas as vezes
}
 8001622:	bf00      	nop
 8001624:	3710      	adds	r7, #16
 8001626:	46bd      	mov	sp, r7
 8001628:	bdb0      	pop	{r4, r5, r7, pc}
 800162a:	bf00      	nop
 800162c:	f3af 8000 	nop.w
 8001630:	cccccccd 	.word	0xcccccccd
 8001634:	3feccccc 	.word	0x3feccccc
 8001638:	9999999a 	.word	0x9999999a
 800163c:	3ff19999 	.word	0x3ff19999
 8001640:	200002a8 	.word	0x200002a8
 8001644:	200001a4 	.word	0x200001a4
 8001648:	200001a2 	.word	0x200001a2
 800164c:	80080081 	.word	0x80080081
 8001650:	200001ac 	.word	0x200001ac
 8001654:	200000c4 	.word	0x200000c4

08001658 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001658:	b480      	push	{r7}
 800165a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800165c:	b672      	cpsid	i
}
 800165e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001660:	e7fe      	b.n	8001660 <Error_Handler+0x8>
	...

08001664 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b082      	sub	sp, #8
 8001668:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	607b      	str	r3, [r7, #4]
 800166e:	4b10      	ldr	r3, [pc, #64]	; (80016b0 <HAL_MspInit+0x4c>)
 8001670:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001672:	4a0f      	ldr	r2, [pc, #60]	; (80016b0 <HAL_MspInit+0x4c>)
 8001674:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001678:	6453      	str	r3, [r2, #68]	; 0x44
 800167a:	4b0d      	ldr	r3, [pc, #52]	; (80016b0 <HAL_MspInit+0x4c>)
 800167c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001682:	607b      	str	r3, [r7, #4]
 8001684:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001686:	2300      	movs	r3, #0
 8001688:	603b      	str	r3, [r7, #0]
 800168a:	4b09      	ldr	r3, [pc, #36]	; (80016b0 <HAL_MspInit+0x4c>)
 800168c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168e:	4a08      	ldr	r2, [pc, #32]	; (80016b0 <HAL_MspInit+0x4c>)
 8001690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001694:	6413      	str	r3, [r2, #64]	; 0x40
 8001696:	4b06      	ldr	r3, [pc, #24]	; (80016b0 <HAL_MspInit+0x4c>)
 8001698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169e:	603b      	str	r3, [r7, #0]
 80016a0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016a2:	2007      	movs	r0, #7
 80016a4:	f001 f9e4 	bl	8002a70 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016a8:	bf00      	nop
 80016aa:	3708      	adds	r7, #8
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40023800 	.word	0x40023800

080016b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b4:	b480      	push	{r7}
 80016b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016b8:	e7fe      	b.n	80016b8 <NMI_Handler+0x4>

080016ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016ba:	b480      	push	{r7}
 80016bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016be:	e7fe      	b.n	80016be <HardFault_Handler+0x4>

080016c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c0:	b480      	push	{r7}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c4:	e7fe      	b.n	80016c4 <MemManage_Handler+0x4>

080016c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016c6:	b480      	push	{r7}
 80016c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ca:	e7fe      	b.n	80016ca <BusFault_Handler+0x4>

080016cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016cc:	b480      	push	{r7}
 80016ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <UsageFault_Handler+0x4>

080016d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d2:	b480      	push	{r7}
 80016d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016d6:	bf00      	nop
 80016d8:	46bd      	mov	sp, r7
 80016da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016de:	4770      	bx	lr

080016e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e0:	b480      	push	{r7}
 80016e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e4:	bf00      	nop
 80016e6:	46bd      	mov	sp, r7
 80016e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ec:	4770      	bx	lr

080016ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016ee:	b480      	push	{r7}
 80016f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	46bd      	mov	sp, r7
 80016f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fa:	4770      	bx	lr

080016fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001700:	f000 fcae 	bl	8002060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001704:	bf00      	nop
 8001706:	bd80      	pop	{r7, pc}

08001708 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 800170c:	4802      	ldr	r0, [pc, #8]	; (8001718 <DMA1_Stream5_IRQHandler+0x10>)
 800170e:	f001 fb89 	bl	8002e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	200001b8 	.word	0x200001b8

0800171c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8001720:	4802      	ldr	r0, [pc, #8]	; (800172c <DMA1_Stream6_IRQHandler+0x10>)
 8001722:	f001 fb7f 	bl	8002e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001726:	bf00      	nop
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	20000380 	.word	0x20000380

08001730 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8001734:	4802      	ldr	r0, [pc, #8]	; (8001740 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8001736:	f003 f9a1 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800173a:	bf00      	nop
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	200002f0 	.word	0x200002f0

08001744 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001748:	4802      	ldr	r0, [pc, #8]	; (8001754 <TIM2_IRQHandler+0x10>)
 800174a:	f003 f997 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800174e:	bf00      	nop
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	20000338 	.word	0x20000338

08001758 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800175c:	4802      	ldr	r0, [pc, #8]	; (8001768 <TIM3_IRQHandler+0x10>)
 800175e:	f003 f98d 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001762:	bf00      	nop
 8001764:	bd80      	pop	{r7, pc}
 8001766:	bf00      	nop
 8001768:	200002a8 	.word	0x200002a8

0800176c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800176c:	b580      	push	{r7, lr}
 800176e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001770:	4802      	ldr	r0, [pc, #8]	; (800177c <USART2_IRQHandler+0x10>)
 8001772:	f004 fb11 	bl	8005d98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001776:	bf00      	nop
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200003e0 	.word	0x200003e0

08001780 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001784:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001788:	f001 ff64 	bl	8003654 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800178c:	bf00      	nop
 800178e:	bd80      	pop	{r7, pc}

08001790 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 8001794:	4802      	ldr	r0, [pc, #8]	; (80017a0 <TIM8_BRK_TIM12_IRQHandler+0x10>)
 8001796:	f003 f971 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 800179a:	bf00      	nop
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	20000218 	.word	0x20000218

080017a4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017a8:	4802      	ldr	r0, [pc, #8]	; (80017b4 <TIM8_UP_TIM13_IRQHandler+0x10>)
 80017aa:	f003 f967 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80017ae:	bf00      	nop
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	20000218 	.word	0x20000218

080017b8 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017bc:	4802      	ldr	r0, [pc, #8]	; (80017c8 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80017be:	f003 f95d 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80017c2:	bf00      	nop
 80017c4:	bd80      	pop	{r7, pc}
 80017c6:	bf00      	nop
 80017c8:	20000218 	.word	0x20000218

080017cc <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80017d0:	4802      	ldr	r0, [pc, #8]	; (80017dc <TIM8_CC_IRQHandler+0x10>)
 80017d2:	f003 f953 	bl	8004a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000218 	.word	0x20000218

080017e0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80017e4:	4802      	ldr	r0, [pc, #8]	; (80017f0 <DMA2_Stream0_IRQHandler+0x10>)
 80017e6:	f001 fb1d 	bl	8002e24 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	2000010c 	.word	0x2000010c

080017f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b086      	sub	sp, #24
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017fc:	4a14      	ldr	r2, [pc, #80]	; (8001850 <_sbrk+0x5c>)
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <_sbrk+0x60>)
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001808:	4b13      	ldr	r3, [pc, #76]	; (8001858 <_sbrk+0x64>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	2b00      	cmp	r3, #0
 800180e:	d102      	bne.n	8001816 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001810:	4b11      	ldr	r3, [pc, #68]	; (8001858 <_sbrk+0x64>)
 8001812:	4a12      	ldr	r2, [pc, #72]	; (800185c <_sbrk+0x68>)
 8001814:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001816:	4b10      	ldr	r3, [pc, #64]	; (8001858 <_sbrk+0x64>)
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	693a      	ldr	r2, [r7, #16]
 8001820:	429a      	cmp	r2, r3
 8001822:	d207      	bcs.n	8001834 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001824:	f004 ff96 	bl	8006754 <__errno>
 8001828:	4603      	mov	r3, r0
 800182a:	220c      	movs	r2, #12
 800182c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800182e:	f04f 33ff 	mov.w	r3, #4294967295
 8001832:	e009      	b.n	8001848 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001834:	4b08      	ldr	r3, [pc, #32]	; (8001858 <_sbrk+0x64>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800183a:	4b07      	ldr	r3, [pc, #28]	; (8001858 <_sbrk+0x64>)
 800183c:	681a      	ldr	r2, [r3, #0]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4413      	add	r3, r2
 8001842:	4a05      	ldr	r2, [pc, #20]	; (8001858 <_sbrk+0x64>)
 8001844:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001846:	68fb      	ldr	r3, [r7, #12]
}
 8001848:	4618      	mov	r0, r3
 800184a:	3718      	adds	r7, #24
 800184c:	46bd      	mov	sp, r7
 800184e:	bd80      	pop	{r7, pc}
 8001850:	20020000 	.word	0x20020000
 8001854:	00000400 	.word	0x00000400
 8001858:	200000b8 	.word	0x200000b8
 800185c:	20000438 	.word	0x20000438

08001860 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001864:	4b06      	ldr	r3, [pc, #24]	; (8001880 <SystemInit+0x20>)
 8001866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800186a:	4a05      	ldr	r2, [pc, #20]	; (8001880 <SystemInit+0x20>)
 800186c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001870:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001874:	bf00      	nop
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	e000ed00 	.word	0xe000ed00

08001884 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b08a      	sub	sp, #40	; 0x28
 8001888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800188a:	f107 0318 	add.w	r3, r7, #24
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001898:	f107 0310 	add.w	r3, r7, #16
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]
 80018a0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80018a2:	463b      	mov	r3, r7
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ae:	4b2b      	ldr	r3, [pc, #172]	; (800195c <MX_TIM2_Init+0xd8>)
 80018b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80018b6:	4b29      	ldr	r3, [pc, #164]	; (800195c <MX_TIM2_Init+0xd8>)
 80018b8:	2253      	movs	r2, #83	; 0x53
 80018ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018bc:	4b27      	ldr	r3, [pc, #156]	; (800195c <MX_TIM2_Init+0xd8>)
 80018be:	2200      	movs	r2, #0
 80018c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 80018c2:	4b26      	ldr	r3, [pc, #152]	; (800195c <MX_TIM2_Init+0xd8>)
 80018c4:	4a26      	ldr	r2, [pc, #152]	; (8001960 <MX_TIM2_Init+0xdc>)
 80018c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b24      	ldr	r3, [pc, #144]	; (800195c <MX_TIM2_Init+0xd8>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b23      	ldr	r3, [pc, #140]	; (800195c <MX_TIM2_Init+0xd8>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018d4:	4821      	ldr	r0, [pc, #132]	; (800195c <MX_TIM2_Init+0xd8>)
 80018d6:	f002 fc3f 	bl	8004158 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 80018e0:	f7ff feba 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e8:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ea:	f107 0318 	add.w	r3, r7, #24
 80018ee:	4619      	mov	r1, r3
 80018f0:	481a      	ldr	r0, [pc, #104]	; (800195c <MX_TIM2_Init+0xd8>)
 80018f2:	f003 fb1d 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 80018fc:	f7ff feac 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001900:	4816      	ldr	r0, [pc, #88]	; (800195c <MX_TIM2_Init+0xd8>)
 8001902:	f002 feb9 	bl	8004678 <HAL_TIM_IC_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800190c:	f7ff fea4 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001914:	2300      	movs	r3, #0
 8001916:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001918:	f107 0310 	add.w	r3, r7, #16
 800191c:	4619      	mov	r1, r3
 800191e:	480f      	ldr	r0, [pc, #60]	; (800195c <MX_TIM2_Init+0xd8>)
 8001920:	f004 f918 	bl	8005b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001924:	4603      	mov	r3, r0
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 800192a:	f7ff fe95 	bl	8001658 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 800192e:	230a      	movs	r3, #10
 8001930:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001932:	2301      	movs	r3, #1
 8001934:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001936:	2300      	movs	r3, #0
 8001938:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800193a:	2300      	movs	r3, #0
 800193c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800193e:	463b      	mov	r3, r7
 8001940:	2200      	movs	r2, #0
 8001942:	4619      	mov	r1, r3
 8001944:	4805      	ldr	r0, [pc, #20]	; (800195c <MX_TIM2_Init+0xd8>)
 8001946:	f003 f9a1 	bl	8004c8c <HAL_TIM_IC_ConfigChannel>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8001950:	f7ff fe82 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001954:	bf00      	nop
 8001956:	3728      	adds	r7, #40	; 0x28
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	20000338 	.word	0x20000338
 8001960:	000f423f 	.word	0x000f423f

08001964 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	b08e      	sub	sp, #56	; 0x38
 8001968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800196a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196e:	2200      	movs	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
 8001972:	605a      	str	r2, [r3, #4]
 8001974:	609a      	str	r2, [r3, #8]
 8001976:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001978:	f107 0320 	add.w	r3, r7, #32
 800197c:	2200      	movs	r2, #0
 800197e:	601a      	str	r2, [r3, #0]
 8001980:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]
 8001992:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001994:	4b2d      	ldr	r3, [pc, #180]	; (8001a4c <MX_TIM3_Init+0xe8>)
 8001996:	4a2e      	ldr	r2, [pc, #184]	; (8001a50 <MX_TIM3_Init+0xec>)
 8001998:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1999;
 800199a:	4b2c      	ldr	r3, [pc, #176]	; (8001a4c <MX_TIM3_Init+0xe8>)
 800199c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80019a0:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019a2:	4b2a      	ldr	r3, [pc, #168]	; (8001a4c <MX_TIM3_Init+0xe8>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41999;
 80019a8:	4b28      	ldr	r3, [pc, #160]	; (8001a4c <MX_TIM3_Init+0xe8>)
 80019aa:	f24a 420f 	movw	r2, #41999	; 0xa40f
 80019ae:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019b0:	4b26      	ldr	r3, [pc, #152]	; (8001a4c <MX_TIM3_Init+0xe8>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80019b6:	4b25      	ldr	r3, [pc, #148]	; (8001a4c <MX_TIM3_Init+0xe8>)
 80019b8:	2280      	movs	r2, #128	; 0x80
 80019ba:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80019bc:	4823      	ldr	r0, [pc, #140]	; (8001a4c <MX_TIM3_Init+0xe8>)
 80019be:	f002 fbcb 	bl	8004158 <HAL_TIM_Base_Init>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80019c8:	f7ff fe46 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019d0:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80019d2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80019d6:	4619      	mov	r1, r3
 80019d8:	481c      	ldr	r0, [pc, #112]	; (8001a4c <MX_TIM3_Init+0xe8>)
 80019da:	f003 faa9 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80019e4:	f7ff fe38 	bl	8001658 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019e8:	4818      	ldr	r0, [pc, #96]	; (8001a4c <MX_TIM3_Init+0xe8>)
 80019ea:	f002 fcdd 	bl	80043a8 <HAL_TIM_PWM_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80019f4:	f7ff fe30 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f8:	2300      	movs	r3, #0
 80019fa:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001a00:	f107 0320 	add.w	r3, r7, #32
 8001a04:	4619      	mov	r1, r3
 8001a06:	4811      	ldr	r0, [pc, #68]	; (8001a4c <MX_TIM3_Init+0xe8>)
 8001a08:	f004 f8a4 	bl	8005b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d001      	beq.n	8001a16 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001a12:	f7ff fe21 	bl	8001658 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a16:	2360      	movs	r3, #96	; 0x60
 8001a18:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 20999;
 8001a1a:	f245 2307 	movw	r3, #20999	; 0x5207
 8001a1e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001a20:	2302      	movs	r3, #2
 8001a22:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a24:	2300      	movs	r3, #0
 8001a26:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a28:	1d3b      	adds	r3, r7, #4
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4807      	ldr	r0, [pc, #28]	; (8001a4c <MX_TIM3_Init+0xe8>)
 8001a30:	f003 f9c0 	bl	8004db4 <HAL_TIM_PWM_ConfigChannel>
 8001a34:	4603      	mov	r3, r0
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d001      	beq.n	8001a3e <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 8001a3a:	f7ff fe0d 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a3e:	4803      	ldr	r0, [pc, #12]	; (8001a4c <MX_TIM3_Init+0xe8>)
 8001a40:	f000 f9ac 	bl	8001d9c <HAL_TIM_MspPostInit>

}
 8001a44:	bf00      	nop
 8001a46:	3738      	adds	r7, #56	; 0x38
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	bd80      	pop	{r7, pc}
 8001a4c:	200002a8 	.word	0x200002a8
 8001a50:	40000400 	.word	0x40000400

08001a54 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8001a54:	b580      	push	{r7, lr}
 8001a56:	b086      	sub	sp, #24
 8001a58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5a:	f107 0308 	add.w	r3, r7, #8
 8001a5e:	2200      	movs	r2, #0
 8001a60:	601a      	str	r2, [r3, #0]
 8001a62:	605a      	str	r2, [r3, #4]
 8001a64:	609a      	str	r2, [r3, #8]
 8001a66:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a68:	463b      	mov	r3, r7
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001a70:	4b1e      	ldr	r3, [pc, #120]	; (8001aec <MX_TIM8_Init+0x98>)
 8001a72:	4a1f      	ldr	r2, [pc, #124]	; (8001af0 <MX_TIM8_Init+0x9c>)
 8001a74:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 999;
 8001a76:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <MX_TIM8_Init+0x98>)
 8001a78:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001a7c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a7e:	4b1b      	ldr	r3, [pc, #108]	; (8001aec <MX_TIM8_Init+0x98>)
 8001a80:	2200      	movs	r2, #0
 8001a82:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 139;
 8001a84:	4b19      	ldr	r3, [pc, #100]	; (8001aec <MX_TIM8_Init+0x98>)
 8001a86:	228b      	movs	r2, #139	; 0x8b
 8001a88:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a8a:	4b18      	ldr	r3, [pc, #96]	; (8001aec <MX_TIM8_Init+0x98>)
 8001a8c:	2200      	movs	r2, #0
 8001a8e:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001a90:	4b16      	ldr	r3, [pc, #88]	; (8001aec <MX_TIM8_Init+0x98>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a96:	4b15      	ldr	r3, [pc, #84]	; (8001aec <MX_TIM8_Init+0x98>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001a9c:	4813      	ldr	r0, [pc, #76]	; (8001aec <MX_TIM8_Init+0x98>)
 8001a9e:	f002 fb5b 	bl	8004158 <HAL_TIM_Base_Init>
 8001aa2:	4603      	mov	r3, r0
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d001      	beq.n	8001aac <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 8001aa8:	f7ff fdd6 	bl	8001658 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001aac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ab0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ab2:	f107 0308 	add.w	r3, r7, #8
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	480c      	ldr	r0, [pc, #48]	; (8001aec <MX_TIM8_Init+0x98>)
 8001aba:	f003 fa39 	bl	8004f30 <HAL_TIM_ConfigClockSource>
 8001abe:	4603      	mov	r3, r0
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d001      	beq.n	8001ac8 <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 8001ac4:	f7ff fdc8 	bl	8001658 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001ac8:	2320      	movs	r3, #32
 8001aca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001acc:	2300      	movs	r3, #0
 8001ace:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001ad0:	463b      	mov	r3, r7
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	4805      	ldr	r0, [pc, #20]	; (8001aec <MX_TIM8_Init+0x98>)
 8001ad6:	f004 f83d 	bl	8005b54 <HAL_TIMEx_MasterConfigSynchronization>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 8001ae0:	f7ff fdba 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001ae4:	bf00      	nop
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20000218 	.word	0x20000218
 8001af0:	40010400 	.word	0x40010400

08001af4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8001af8:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_TIM10_Init+0x40>)
 8001afa:	4a0f      	ldr	r2, [pc, #60]	; (8001b38 <MX_TIM10_Init+0x44>)
 8001afc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1999;
 8001afe:	4b0d      	ldr	r3, [pc, #52]	; (8001b34 <MX_TIM10_Init+0x40>)
 8001b00:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b04:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_TIM10_Init+0x40>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 41999;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_TIM10_Init+0x40>)
 8001b0e:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001b12:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b14:	4b07      	ldr	r3, [pc, #28]	; (8001b34 <MX_TIM10_Init+0x40>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b1a:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_TIM10_Init+0x40>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8001b20:	4804      	ldr	r0, [pc, #16]	; (8001b34 <MX_TIM10_Init+0x40>)
 8001b22:	f002 fb19 	bl	8004158 <HAL_TIM_Base_Init>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	d001      	beq.n	8001b30 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8001b2c:	f7ff fd94 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8001b30:	bf00      	nop
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	20000260 	.word	0x20000260
 8001b38:	40014400 	.word	0x40014400

08001b3c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8001b40:	4b0e      	ldr	r3, [pc, #56]	; (8001b7c <MX_TIM11_Init+0x40>)
 8001b42:	4a0f      	ldr	r2, [pc, #60]	; (8001b80 <MX_TIM11_Init+0x44>)
 8001b44:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1999;
 8001b46:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <MX_TIM11_Init+0x40>)
 8001b48:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8001b4c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b4e:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <MX_TIM11_Init+0x40>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 41999;
 8001b54:	4b09      	ldr	r3, [pc, #36]	; (8001b7c <MX_TIM11_Init+0x40>)
 8001b56:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8001b5a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b5c:	4b07      	ldr	r3, [pc, #28]	; (8001b7c <MX_TIM11_Init+0x40>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b62:	4b06      	ldr	r3, [pc, #24]	; (8001b7c <MX_TIM11_Init+0x40>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8001b68:	4804      	ldr	r0, [pc, #16]	; (8001b7c <MX_TIM11_Init+0x40>)
 8001b6a:	f002 faf5 	bl	8004158 <HAL_TIM_Base_Init>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d001      	beq.n	8001b78 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8001b74:	f7ff fd70 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8001b78:	bf00      	nop
 8001b7a:	bd80      	pop	{r7, pc}
 8001b7c:	200002f0 	.word	0x200002f0
 8001b80:	40014800 	.word	0x40014800

08001b84 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ba4:	d166      	bne.n	8001c74 <HAL_TIM_Base_MspInit+0xf0>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	623b      	str	r3, [r7, #32]
 8001baa:	4b74      	ldr	r3, [pc, #464]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bae:	4a73      	ldr	r2, [pc, #460]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001bb0:	f043 0301 	orr.w	r3, r3, #1
 8001bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bb6:	4b71      	ldr	r3, [pc, #452]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bba:	f003 0301 	and.w	r3, r3, #1
 8001bbe:	623b      	str	r3, [r7, #32]
 8001bc0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	61fb      	str	r3, [r7, #28]
 8001bc6:	4b6d      	ldr	r3, [pc, #436]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bca:	4a6c      	ldr	r2, [pc, #432]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8001bd2:	4b6a      	ldr	r3, [pc, #424]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bd6:	f003 0301 	and.w	r3, r3, #1
 8001bda:	61fb      	str	r3, [r7, #28]
 8001bdc:	69fb      	ldr	r3, [r7, #28]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001bde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001be2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001be4:	2302      	movs	r3, #2
 8001be6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bf0:	2301      	movs	r3, #1
 8001bf2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bf8:	4619      	mov	r1, r3
 8001bfa:	4861      	ldr	r0, [pc, #388]	; (8001d80 <HAL_TIM_Base_MspInit+0x1fc>)
 8001bfc:	f001 fb7c 	bl	80032f8 <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8001c00:	4b60      	ldr	r3, [pc, #384]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c02:	4a61      	ldr	r2, [pc, #388]	; (8001d88 <HAL_TIM_Base_MspInit+0x204>)
 8001c04:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8001c06:	4b5f      	ldr	r3, [pc, #380]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c08:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001c0c:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c0e:	4b5d      	ldr	r3, [pc, #372]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c14:	4b5b      	ldr	r3, [pc, #364]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001c1a:	4b5a      	ldr	r3, [pc, #360]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001c20:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001c22:	4b58      	ldr	r3, [pc, #352]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c24:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c28:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001c2a:	4b56      	ldr	r3, [pc, #344]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c2c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c30:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8001c32:	4b54      	ldr	r3, [pc, #336]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001c38:	4b52      	ldr	r3, [pc, #328]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c3a:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001c3e:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c40:	4b50      	ldr	r3, [pc, #320]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c42:	2200      	movs	r2, #0
 8001c44:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8001c46:	484f      	ldr	r0, [pc, #316]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c48:	f000 ff54 	bl	8002af4 <HAL_DMA_Init>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_TIM_Base_MspInit+0xd2>
    {
      Error_Handler();
 8001c52:	f7ff fd01 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	4a4a      	ldr	r2, [pc, #296]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c5a:	625a      	str	r2, [r3, #36]	; 0x24
 8001c5c:	4a49      	ldr	r2, [pc, #292]	; (8001d84 <HAL_TIM_Base_MspInit+0x200>)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001c62:	2200      	movs	r2, #0
 8001c64:	2100      	movs	r1, #0
 8001c66:	201c      	movs	r0, #28
 8001c68:	f000 ff0d 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001c6c:	201c      	movs	r0, #28
 8001c6e:	f000 ff26 	bl	8002abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8001c72:	e07e      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x1ee>
  else if(tim_baseHandle->Instance==TIM3)
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a44      	ldr	r2, [pc, #272]	; (8001d8c <HAL_TIM_Base_MspInit+0x208>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d116      	bne.n	8001cac <HAL_TIM_Base_MspInit+0x128>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
 8001c82:	4b3e      	ldr	r3, [pc, #248]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001c84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c86:	4a3d      	ldr	r2, [pc, #244]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001c88:	f043 0302 	orr.w	r3, r3, #2
 8001c8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001c8e:	4b3b      	ldr	r3, [pc, #236]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001c90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c92:	f003 0302 	and.w	r3, r3, #2
 8001c96:	61bb      	str	r3, [r7, #24]
 8001c98:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2100      	movs	r1, #0
 8001c9e:	201d      	movs	r0, #29
 8001ca0:	f000 fef1 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ca4:	201d      	movs	r0, #29
 8001ca6:	f000 ff0a 	bl	8002abe <HAL_NVIC_EnableIRQ>
}
 8001caa:	e062      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x1ee>
  else if(tim_baseHandle->Instance==TIM8)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4a37      	ldr	r2, [pc, #220]	; (8001d90 <HAL_TIM_Base_MspInit+0x20c>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d12e      	bne.n	8001d14 <HAL_TIM_Base_MspInit+0x190>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	617b      	str	r3, [r7, #20]
 8001cba:	4b30      	ldr	r3, [pc, #192]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cbe:	4a2f      	ldr	r2, [pc, #188]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001cc0:	f043 0302 	orr.w	r3, r3, #2
 8001cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cca:	f003 0302 	and.w	r3, r3, #2
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001cd2:	2200      	movs	r2, #0
 8001cd4:	2100      	movs	r1, #0
 8001cd6:	202b      	movs	r0, #43	; 0x2b
 8001cd8:	f000 fed5 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001cdc:	202b      	movs	r0, #43	; 0x2b
 8001cde:	f000 feee 	bl	8002abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2100      	movs	r1, #0
 8001ce6:	202c      	movs	r0, #44	; 0x2c
 8001ce8:	f000 fecd 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001cec:	202c      	movs	r0, #44	; 0x2c
 8001cee:	f000 fee6 	bl	8002abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	202d      	movs	r0, #45	; 0x2d
 8001cf8:	f000 fec5 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001cfc:	202d      	movs	r0, #45	; 0x2d
 8001cfe:	f000 fede 	bl	8002abe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001d02:	2200      	movs	r2, #0
 8001d04:	2100      	movs	r1, #0
 8001d06:	202e      	movs	r0, #46	; 0x2e
 8001d08:	f000 febd 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001d0c:	202e      	movs	r0, #46	; 0x2e
 8001d0e:	f000 fed6 	bl	8002abe <HAL_NVIC_EnableIRQ>
}
 8001d12:	e02e      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x1ee>
  else if(tim_baseHandle->Instance==TIM10)
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a1e      	ldr	r2, [pc, #120]	; (8001d94 <HAL_TIM_Base_MspInit+0x210>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d10e      	bne.n	8001d3c <HAL_TIM_Base_MspInit+0x1b8>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8001d1e:	2300      	movs	r3, #0
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	4b16      	ldr	r3, [pc, #88]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d26:	4a15      	ldr	r2, [pc, #84]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001d28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d2c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d2e:	4b13      	ldr	r3, [pc, #76]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001d30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d36:	613b      	str	r3, [r7, #16]
 8001d38:	693b      	ldr	r3, [r7, #16]
}
 8001d3a:	e01a      	b.n	8001d72 <HAL_TIM_Base_MspInit+0x1ee>
  else if(tim_baseHandle->Instance==TIM11)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a15      	ldr	r2, [pc, #84]	; (8001d98 <HAL_TIM_Base_MspInit+0x214>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d115      	bne.n	8001d72 <HAL_TIM_Base_MspInit+0x1ee>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d4e:	4a0b      	ldr	r2, [pc, #44]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d54:	6453      	str	r3, [r2, #68]	; 0x44
 8001d56:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_TIM_Base_MspInit+0x1f8>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d5a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001d62:	2200      	movs	r2, #0
 8001d64:	2100      	movs	r1, #0
 8001d66:	201a      	movs	r0, #26
 8001d68:	f000 fe8d 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8001d6c:	201a      	movs	r0, #26
 8001d6e:	f000 fea6 	bl	8002abe <HAL_NVIC_EnableIRQ>
}
 8001d72:	bf00      	nop
 8001d74:	3738      	adds	r7, #56	; 0x38
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	40020000 	.word	0x40020000
 8001d84:	200001b8 	.word	0x200001b8
 8001d88:	40026088 	.word	0x40026088
 8001d8c:	40000400 	.word	0x40000400
 8001d90:	40010400 	.word	0x40010400
 8001d94:	40014400 	.word	0x40014400
 8001d98:	40014800 	.word	0x40014800

08001d9c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b088      	sub	sp, #32
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001da4:	f107 030c 	add.w	r3, r7, #12
 8001da8:	2200      	movs	r2, #0
 8001daa:	601a      	str	r2, [r3, #0]
 8001dac:	605a      	str	r2, [r3, #4]
 8001dae:	609a      	str	r2, [r3, #8]
 8001db0:	60da      	str	r2, [r3, #12]
 8001db2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a12      	ldr	r2, [pc, #72]	; (8001e04 <HAL_TIM_MspPostInit+0x68>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d11d      	bne.n	8001dfa <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_TIM_MspPostInit+0x6c>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_TIM_MspPostInit+0x6c>)
 8001dc8:	f043 0301 	orr.w	r3, r3, #1
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_TIM_MspPostInit+0x6c>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dda:	2340      	movs	r3, #64	; 0x40
 8001ddc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dde:	2302      	movs	r3, #2
 8001de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de2:	2300      	movs	r3, #0
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001de6:	2300      	movs	r3, #0
 8001de8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dea:	2302      	movs	r3, #2
 8001dec:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dee:	f107 030c 	add.w	r3, r7, #12
 8001df2:	4619      	mov	r1, r3
 8001df4:	4805      	ldr	r0, [pc, #20]	; (8001e0c <HAL_TIM_MspPostInit+0x70>)
 8001df6:	f001 fa7f 	bl	80032f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001dfa:	bf00      	nop
 8001dfc:	3720      	adds	r7, #32
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}
 8001e02:	bf00      	nop
 8001e04:	40000400 	.word	0x40000400
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020000 	.word	0x40020000

08001e10 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001e14:	4b11      	ldr	r3, [pc, #68]	; (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e16:	4a12      	ldr	r2, [pc, #72]	; (8001e60 <MX_USART2_UART_Init+0x50>)
 8001e18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001e1a:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001e28:	4b0c      	ldr	r3, [pc, #48]	; (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001e2e:	4b0b      	ldr	r3, [pc, #44]	; (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e36:	220c      	movs	r2, #12
 8001e38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e3a:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001e46:	4805      	ldr	r0, [pc, #20]	; (8001e5c <MX_USART2_UART_Init+0x4c>)
 8001e48:	f003 ff14 	bl	8005c74 <HAL_UART_Init>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001e52:	f7ff fc01 	bl	8001658 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001e56:	bf00      	nop
 8001e58:	bd80      	pop	{r7, pc}
 8001e5a:	bf00      	nop
 8001e5c:	200003e0 	.word	0x200003e0
 8001e60:	40004400 	.word	0x40004400

08001e64 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b08a      	sub	sp, #40	; 0x28
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e6c:	f107 0314 	add.w	r3, r7, #20
 8001e70:	2200      	movs	r2, #0
 8001e72:	601a      	str	r2, [r3, #0]
 8001e74:	605a      	str	r2, [r3, #4]
 8001e76:	609a      	str	r2, [r3, #8]
 8001e78:	60da      	str	r2, [r3, #12]
 8001e7a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a34      	ldr	r2, [pc, #208]	; (8001f54 <HAL_UART_MspInit+0xf0>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d162      	bne.n	8001f4c <HAL_UART_MspInit+0xe8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	613b      	str	r3, [r7, #16]
 8001e8a:	4b33      	ldr	r3, [pc, #204]	; (8001f58 <HAL_UART_MspInit+0xf4>)
 8001e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8e:	4a32      	ldr	r2, [pc, #200]	; (8001f58 <HAL_UART_MspInit+0xf4>)
 8001e90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e94:	6413      	str	r3, [r2, #64]	; 0x40
 8001e96:	4b30      	ldr	r3, [pc, #192]	; (8001f58 <HAL_UART_MspInit+0xf4>)
 8001e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
 8001ea6:	4b2c      	ldr	r3, [pc, #176]	; (8001f58 <HAL_UART_MspInit+0xf4>)
 8001ea8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eaa:	4a2b      	ldr	r2, [pc, #172]	; (8001f58 <HAL_UART_MspInit+0xf4>)
 8001eac:	f043 0301 	orr.w	r3, r3, #1
 8001eb0:	6313      	str	r3, [r2, #48]	; 0x30
 8001eb2:	4b29      	ldr	r3, [pc, #164]	; (8001f58 <HAL_UART_MspInit+0xf4>)
 8001eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eb6:	f003 0301 	and.w	r3, r3, #1
 8001eba:	60fb      	str	r3, [r7, #12]
 8001ebc:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001ebe:	230c      	movs	r3, #12
 8001ec0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eca:	2303      	movs	r3, #3
 8001ecc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ece:	2307      	movs	r3, #7
 8001ed0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed2:	f107 0314 	add.w	r3, r7, #20
 8001ed6:	4619      	mov	r1, r3
 8001ed8:	4820      	ldr	r0, [pc, #128]	; (8001f5c <HAL_UART_MspInit+0xf8>)
 8001eda:	f001 fa0d 	bl	80032f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001ede:	4b20      	ldr	r3, [pc, #128]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001ee0:	4a20      	ldr	r2, [pc, #128]	; (8001f64 <HAL_UART_MspInit+0x100>)
 8001ee2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001ee4:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001ee6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001eea:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001eec:	4b1c      	ldr	r3, [pc, #112]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001eee:	2240      	movs	r2, #64	; 0x40
 8001ef0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ef2:	4b1b      	ldr	r3, [pc, #108]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001efa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001efe:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f00:	4b17      	ldr	r3, [pc, #92]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001f02:	2200      	movs	r2, #0
 8001f04:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f06:	4b16      	ldr	r3, [pc, #88]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001f0c:	4b14      	ldr	r3, [pc, #80]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8001f12:	4b13      	ldr	r3, [pc, #76]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001f14:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f18:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001f1a:	4b11      	ldr	r3, [pc, #68]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001f20:	480f      	ldr	r0, [pc, #60]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001f22:	f000 fde7 	bl	8002af4 <HAL_DMA_Init>
 8001f26:	4603      	mov	r3, r0
 8001f28:	2b00      	cmp	r3, #0
 8001f2a:	d001      	beq.n	8001f30 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8001f2c:	f7ff fb94 	bl	8001658 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	4a0b      	ldr	r2, [pc, #44]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001f34:	635a      	str	r2, [r3, #52]	; 0x34
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <HAL_UART_MspInit+0xfc>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	2100      	movs	r1, #0
 8001f40:	2026      	movs	r0, #38	; 0x26
 8001f42:	f000 fda0 	bl	8002a86 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001f46:	2026      	movs	r0, #38	; 0x26
 8001f48:	f000 fdb9 	bl	8002abe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001f4c:	bf00      	nop
 8001f4e:	3728      	adds	r7, #40	; 0x28
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	40004400 	.word	0x40004400
 8001f58:	40023800 	.word	0x40023800
 8001f5c:	40020000 	.word	0x40020000
 8001f60:	20000380 	.word	0x20000380
 8001f64:	400260a0 	.word	0x400260a0

08001f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001f6c:	480d      	ldr	r0, [pc, #52]	; (8001fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001f6e:	490e      	ldr	r1, [pc, #56]	; (8001fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001f70:	4a0e      	ldr	r2, [pc, #56]	; (8001fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f74:	e002      	b.n	8001f7c <LoopCopyDataInit>

08001f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f7a:	3304      	adds	r3, #4

08001f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f80:	d3f9      	bcc.n	8001f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f82:	4a0b      	ldr	r2, [pc, #44]	; (8001fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001f84:	4c0b      	ldr	r4, [pc, #44]	; (8001fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f88:	e001      	b.n	8001f8e <LoopFillZerobss>

08001f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f8c:	3204      	adds	r2, #4

08001f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f90:	d3fb      	bcc.n	8001f8a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001f92:	f7ff fc65 	bl	8001860 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001f96:	f004 fbe3 	bl	8006760 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001f9a:	f7ff f807 	bl	8000fac <main>
  bx  lr    
 8001f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fa0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001fa8:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8001fac:	080070f0 	.word	0x080070f0
  ldr r2, =_sbss
 8001fb0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001fb4:	20000438 	.word	0x20000438

08001fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001fb8:	e7fe      	b.n	8001fb8 <ADC_IRQHandler>
	...

08001fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001fc0:	4b0e      	ldr	r3, [pc, #56]	; (8001ffc <HAL_Init+0x40>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a0d      	ldr	r2, [pc, #52]	; (8001ffc <HAL_Init+0x40>)
 8001fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001fcc:	4b0b      	ldr	r3, [pc, #44]	; (8001ffc <HAL_Init+0x40>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <HAL_Init+0x40>)
 8001fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <HAL_Init+0x40>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	4a07      	ldr	r2, [pc, #28]	; (8001ffc <HAL_Init+0x40>)
 8001fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001fe4:	2003      	movs	r0, #3
 8001fe6:	f000 fd43 	bl	8002a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001fea:	2000      	movs	r0, #0
 8001fec:	f000 f808 	bl	8002000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ff0:	f7ff fb38 	bl	8001664 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	40023c00 	.word	0x40023c00

08002000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b082      	sub	sp, #8
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002008:	4b12      	ldr	r3, [pc, #72]	; (8002054 <HAL_InitTick+0x54>)
 800200a:	681a      	ldr	r2, [r3, #0]
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <HAL_InitTick+0x58>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	4619      	mov	r1, r3
 8002012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002016:	fbb3 f3f1 	udiv	r3, r3, r1
 800201a:	fbb2 f3f3 	udiv	r3, r2, r3
 800201e:	4618      	mov	r0, r3
 8002020:	f000 fd5b 	bl	8002ada <HAL_SYSTICK_Config>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e00e      	b.n	800204c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2b0f      	cmp	r3, #15
 8002032:	d80a      	bhi.n	800204a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002034:	2200      	movs	r2, #0
 8002036:	6879      	ldr	r1, [r7, #4]
 8002038:	f04f 30ff 	mov.w	r0, #4294967295
 800203c:	f000 fd23 	bl	8002a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002040:	4a06      	ldr	r2, [pc, #24]	; (800205c <HAL_InitTick+0x5c>)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002046:	2300      	movs	r3, #0
 8002048:	e000      	b.n	800204c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
}
 800204c:	4618      	mov	r0, r3
 800204e:	3708      	adds	r7, #8
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}
 8002054:	20000008 	.word	0x20000008
 8002058:	20000010 	.word	0x20000010
 800205c:	2000000c 	.word	0x2000000c

08002060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002060:	b480      	push	{r7}
 8002062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002064:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_IncTick+0x20>)
 8002066:	781b      	ldrb	r3, [r3, #0]
 8002068:	461a      	mov	r2, r3
 800206a:	4b06      	ldr	r3, [pc, #24]	; (8002084 <HAL_IncTick+0x24>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	4413      	add	r3, r2
 8002070:	4a04      	ldr	r2, [pc, #16]	; (8002084 <HAL_IncTick+0x24>)
 8002072:	6013      	str	r3, [r2, #0]
}
 8002074:	bf00      	nop
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
 800207e:	bf00      	nop
 8002080:	20000010 	.word	0x20000010
 8002084:	20000424 	.word	0x20000424

08002088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  return uwTick;
 800208c:	4b03      	ldr	r3, [pc, #12]	; (800209c <HAL_GetTick+0x14>)
 800208e:	681b      	ldr	r3, [r3, #0]
}
 8002090:	4618      	mov	r0, r3
 8002092:	46bd      	mov	sp, r7
 8002094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002098:	4770      	bx	lr
 800209a:	bf00      	nop
 800209c:	20000424 	.word	0x20000424

080020a0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80020a8:	2300      	movs	r3, #0
 80020aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d101      	bne.n	80020b6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e033      	b.n	800211e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d109      	bne.n	80020d2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f7fe fe48 	bl	8000d54 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2200      	movs	r2, #0
 80020ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020d6:	f003 0310 	and.w	r3, r3, #16
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d118      	bne.n	8002110 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80020e6:	f023 0302 	bic.w	r3, r3, #2
 80020ea:	f043 0202 	orr.w	r2, r3, #2
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f000 fa6e 	bl	80025d4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	f023 0303 	bic.w	r3, r3, #3
 8002106:	f043 0201 	orr.w	r2, r3, #1
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	641a      	str	r2, [r3, #64]	; 0x40
 800210e:	e001      	b.n	8002114 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3710      	adds	r7, #16
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}
	...

08002128 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8002128:	b580      	push	{r7, lr}
 800212a:	b086      	sub	sp, #24
 800212c:	af00      	add	r7, sp, #0
 800212e:	60f8      	str	r0, [r7, #12]
 8002130:	60b9      	str	r1, [r7, #8]
 8002132:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8002134:	2300      	movs	r3, #0
 8002136:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800213e:	2b01      	cmp	r3, #1
 8002140:	d101      	bne.n	8002146 <HAL_ADC_Start_DMA+0x1e>
 8002142:	2302      	movs	r3, #2
 8002144:	e0e9      	b.n	800231a <HAL_ADC_Start_DMA+0x1f2>
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	2201      	movs	r2, #1
 800214a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	f003 0301 	and.w	r3, r3, #1
 8002158:	2b01      	cmp	r3, #1
 800215a:	d018      	beq.n	800218e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689a      	ldr	r2, [r3, #8]
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f042 0201 	orr.w	r2, r2, #1
 800216a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800216c:	4b6d      	ldr	r3, [pc, #436]	; (8002324 <HAL_ADC_Start_DMA+0x1fc>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a6d      	ldr	r2, [pc, #436]	; (8002328 <HAL_ADC_Start_DMA+0x200>)
 8002172:	fba2 2303 	umull	r2, r3, r2, r3
 8002176:	0c9a      	lsrs	r2, r3, #18
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002180:	e002      	b.n	8002188 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	3b01      	subs	r3, #1
 8002186:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8002188:	693b      	ldr	r3, [r7, #16]
 800218a:	2b00      	cmp	r3, #0
 800218c:	d1f9      	bne.n	8002182 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	689b      	ldr	r3, [r3, #8]
 8002194:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002198:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800219c:	d107      	bne.n	80021ae <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80021ac:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	689b      	ldr	r3, [r3, #8]
 80021b4:	f003 0301 	and.w	r3, r3, #1
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	f040 80a1 	bne.w	8002300 <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80021c6:	f023 0301 	bic.w	r3, r3, #1
 80021ca:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d007      	beq.n	80021f0 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80021e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021fc:	d106      	bne.n	800220c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002202:	f023 0206 	bic.w	r2, r3, #6
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	645a      	str	r2, [r3, #68]	; 0x44
 800220a:	e002      	b.n	8002212 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	2200      	movs	r2, #0
 8002210:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	2200      	movs	r2, #0
 8002216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800221a:	4b44      	ldr	r3, [pc, #272]	; (800232c <HAL_ADC_Start_DMA+0x204>)
 800221c:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002222:	4a43      	ldr	r2, [pc, #268]	; (8002330 <HAL_ADC_Start_DMA+0x208>)
 8002224:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800222a:	4a42      	ldr	r2, [pc, #264]	; (8002334 <HAL_ADC_Start_DMA+0x20c>)
 800222c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002232:	4a41      	ldr	r2, [pc, #260]	; (8002338 <HAL_ADC_Start_DMA+0x210>)
 8002234:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800223e:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	685a      	ldr	r2, [r3, #4]
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800224e:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	689a      	ldr	r2, [r3, #8]
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800225e:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	334c      	adds	r3, #76	; 0x4c
 800226a:	4619      	mov	r1, r3
 800226c:	68ba      	ldr	r2, [r7, #8]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	f000 fcee 	bl	8002c50 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002274:	697b      	ldr	r3, [r7, #20]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f003 031f 	and.w	r3, r3, #31
 800227c:	2b00      	cmp	r3, #0
 800227e:	d12a      	bne.n	80022d6 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a2d      	ldr	r2, [pc, #180]	; (800233c <HAL_ADC_Start_DMA+0x214>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d015      	beq.n	80022b6 <HAL_ADC_Start_DMA+0x18e>
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	4a2c      	ldr	r2, [pc, #176]	; (8002340 <HAL_ADC_Start_DMA+0x218>)
 8002290:	4293      	cmp	r3, r2
 8002292:	d105      	bne.n	80022a0 <HAL_ADC_Start_DMA+0x178>
 8002294:	4b25      	ldr	r3, [pc, #148]	; (800232c <HAL_ADC_Start_DMA+0x204>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f003 031f 	and.w	r3, r3, #31
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00a      	beq.n	80022b6 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a27      	ldr	r2, [pc, #156]	; (8002344 <HAL_ADC_Start_DMA+0x21c>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d136      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
 80022aa:	4b20      	ldr	r3, [pc, #128]	; (800232c <HAL_ADC_Start_DMA+0x204>)
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	f003 0310 	and.w	r3, r3, #16
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d130      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d129      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	689a      	ldr	r2, [r3, #8]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022d2:	609a      	str	r2, [r3, #8]
 80022d4:	e020      	b.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a18      	ldr	r2, [pc, #96]	; (800233c <HAL_ADC_Start_DMA+0x214>)
 80022dc:	4293      	cmp	r3, r2
 80022de:	d11b      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	689b      	ldr	r3, [r3, #8]
 80022e6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d114      	bne.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80022fc:	609a      	str	r2, [r3, #8]
 80022fe:	e00b      	b.n	8002318 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002304:	f043 0210 	orr.w	r2, r3, #16
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002310:	f043 0201 	orr.w	r2, r3, #1
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3718      	adds	r7, #24
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	20000008 	.word	0x20000008
 8002328:	431bde83 	.word	0x431bde83
 800232c:	40012300 	.word	0x40012300
 8002330:	080027cd 	.word	0x080027cd
 8002334:	08002887 	.word	0x08002887
 8002338:	080028a3 	.word	0x080028a3
 800233c:	40012000 	.word	0x40012000
 8002340:	40012100 	.word	0x40012100
 8002344:	40012200 	.word	0x40012200

08002348 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002348:	b480      	push	{r7}
 800234a:	b083      	sub	sp, #12
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8002350:	bf00      	nop
 8002352:	370c      	adds	r7, #12
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8002364:	bf00      	nop
 8002366:	370c      	adds	r7, #12
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr

08002370 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002370:	b480      	push	{r7}
 8002372:	b085      	sub	sp, #20
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800237a:	2300      	movs	r3, #0
 800237c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002384:	2b01      	cmp	r3, #1
 8002386:	d101      	bne.n	800238c <HAL_ADC_ConfigChannel+0x1c>
 8002388:	2302      	movs	r3, #2
 800238a:	e113      	b.n	80025b4 <HAL_ADC_ConfigChannel+0x244>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	2201      	movs	r2, #1
 8002390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	2b09      	cmp	r3, #9
 800239a:	d925      	bls.n	80023e8 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	68d9      	ldr	r1, [r3, #12]
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	b29b      	uxth	r3, r3
 80023a8:	461a      	mov	r2, r3
 80023aa:	4613      	mov	r3, r2
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	4413      	add	r3, r2
 80023b0:	3b1e      	subs	r3, #30
 80023b2:	2207      	movs	r2, #7
 80023b4:	fa02 f303 	lsl.w	r3, r2, r3
 80023b8:	43da      	mvns	r2, r3
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	400a      	ands	r2, r1
 80023c0:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68d9      	ldr	r1, [r3, #12]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	689a      	ldr	r2, [r3, #8]
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	b29b      	uxth	r3, r3
 80023d2:	4618      	mov	r0, r3
 80023d4:	4603      	mov	r3, r0
 80023d6:	005b      	lsls	r3, r3, #1
 80023d8:	4403      	add	r3, r0
 80023da:	3b1e      	subs	r3, #30
 80023dc:	409a      	lsls	r2, r3
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	430a      	orrs	r2, r1
 80023e4:	60da      	str	r2, [r3, #12]
 80023e6:	e022      	b.n	800242e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	b29b      	uxth	r3, r3
 80023f4:	461a      	mov	r2, r3
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	2207      	movs	r2, #7
 80023fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002402:	43da      	mvns	r2, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	400a      	ands	r2, r1
 800240a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	6919      	ldr	r1, [r3, #16]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	689a      	ldr	r2, [r3, #8]
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	b29b      	uxth	r3, r3
 800241c:	4618      	mov	r0, r3
 800241e:	4603      	mov	r3, r0
 8002420:	005b      	lsls	r3, r3, #1
 8002422:	4403      	add	r3, r0
 8002424:	409a      	lsls	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	430a      	orrs	r2, r1
 800242c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	2b06      	cmp	r3, #6
 8002434:	d824      	bhi.n	8002480 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	4613      	mov	r3, r2
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	4413      	add	r3, r2
 8002446:	3b05      	subs	r3, #5
 8002448:	221f      	movs	r2, #31
 800244a:	fa02 f303 	lsl.w	r3, r2, r3
 800244e:	43da      	mvns	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	400a      	ands	r2, r1
 8002456:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	b29b      	uxth	r3, r3
 8002464:	4618      	mov	r0, r3
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	685a      	ldr	r2, [r3, #4]
 800246a:	4613      	mov	r3, r2
 800246c:	009b      	lsls	r3, r3, #2
 800246e:	4413      	add	r3, r2
 8002470:	3b05      	subs	r3, #5
 8002472:	fa00 f203 	lsl.w	r2, r0, r3
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	430a      	orrs	r2, r1
 800247c:	635a      	str	r2, [r3, #52]	; 0x34
 800247e:	e04c      	b.n	800251a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	2b0c      	cmp	r3, #12
 8002486:	d824      	bhi.n	80024d2 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800248e:	683b      	ldr	r3, [r7, #0]
 8002490:	685a      	ldr	r2, [r3, #4]
 8002492:	4613      	mov	r3, r2
 8002494:	009b      	lsls	r3, r3, #2
 8002496:	4413      	add	r3, r2
 8002498:	3b23      	subs	r3, #35	; 0x23
 800249a:	221f      	movs	r2, #31
 800249c:	fa02 f303 	lsl.w	r3, r2, r3
 80024a0:	43da      	mvns	r2, r3
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	400a      	ands	r2, r1
 80024a8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	b29b      	uxth	r3, r3
 80024b6:	4618      	mov	r0, r3
 80024b8:	683b      	ldr	r3, [r7, #0]
 80024ba:	685a      	ldr	r2, [r3, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	4413      	add	r3, r2
 80024c2:	3b23      	subs	r3, #35	; 0x23
 80024c4:	fa00 f203 	lsl.w	r2, r0, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	430a      	orrs	r2, r1
 80024ce:	631a      	str	r2, [r3, #48]	; 0x30
 80024d0:	e023      	b.n	800251a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	685a      	ldr	r2, [r3, #4]
 80024dc:	4613      	mov	r3, r2
 80024de:	009b      	lsls	r3, r3, #2
 80024e0:	4413      	add	r3, r2
 80024e2:	3b41      	subs	r3, #65	; 0x41
 80024e4:	221f      	movs	r2, #31
 80024e6:	fa02 f303 	lsl.w	r3, r2, r3
 80024ea:	43da      	mvns	r2, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	400a      	ands	r2, r1
 80024f2:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	b29b      	uxth	r3, r3
 8002500:	4618      	mov	r0, r3
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	685a      	ldr	r2, [r3, #4]
 8002506:	4613      	mov	r3, r2
 8002508:	009b      	lsls	r3, r3, #2
 800250a:	4413      	add	r3, r2
 800250c:	3b41      	subs	r3, #65	; 0x41
 800250e:	fa00 f203 	lsl.w	r2, r0, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800251a:	4b29      	ldr	r3, [pc, #164]	; (80025c0 <HAL_ADC_ConfigChannel+0x250>)
 800251c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a28      	ldr	r2, [pc, #160]	; (80025c4 <HAL_ADC_ConfigChannel+0x254>)
 8002524:	4293      	cmp	r3, r2
 8002526:	d10f      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1d8>
 8002528:	683b      	ldr	r3, [r7, #0]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2b12      	cmp	r3, #18
 800252e:	d10b      	bne.n	8002548 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a1d      	ldr	r2, [pc, #116]	; (80025c4 <HAL_ADC_ConfigChannel+0x254>)
 800254e:	4293      	cmp	r3, r2
 8002550:	d12b      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x23a>
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4a1c      	ldr	r2, [pc, #112]	; (80025c8 <HAL_ADC_ConfigChannel+0x258>)
 8002558:	4293      	cmp	r3, r2
 800255a:	d003      	beq.n	8002564 <HAL_ADC_ConfigChannel+0x1f4>
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	2b11      	cmp	r3, #17
 8002562:	d122      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <HAL_ADC_ConfigChannel+0x258>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d111      	bne.n	80025aa <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002586:	4b11      	ldr	r3, [pc, #68]	; (80025cc <HAL_ADC_ConfigChannel+0x25c>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <HAL_ADC_ConfigChannel+0x260>)
 800258c:	fba2 2303 	umull	r2, r3, r2, r3
 8002590:	0c9a      	lsrs	r2, r3, #18
 8002592:	4613      	mov	r3, r2
 8002594:	009b      	lsls	r3, r3, #2
 8002596:	4413      	add	r3, r2
 8002598:	005b      	lsls	r3, r3, #1
 800259a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800259c:	e002      	b.n	80025a4 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	3b01      	subs	r3, #1
 80025a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1f9      	bne.n	800259e <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	2200      	movs	r2, #0
 80025ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80025b2:	2300      	movs	r3, #0
}
 80025b4:	4618      	mov	r0, r3
 80025b6:	3714      	adds	r7, #20
 80025b8:	46bd      	mov	sp, r7
 80025ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025be:	4770      	bx	lr
 80025c0:	40012300 	.word	0x40012300
 80025c4:	40012000 	.word	0x40012000
 80025c8:	10000012 	.word	0x10000012
 80025cc:	20000008 	.word	0x20000008
 80025d0:	431bde83 	.word	0x431bde83

080025d4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80025dc:	4b79      	ldr	r3, [pc, #484]	; (80027c4 <ADC_Init+0x1f0>)
 80025de:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	685a      	ldr	r2, [r3, #4]
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	685b      	ldr	r3, [r3, #4]
 80025f4:	431a      	orrs	r2, r3
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	685a      	ldr	r2, [r3, #4]
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002608:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	6859      	ldr	r1, [r3, #4]
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	691b      	ldr	r3, [r3, #16]
 8002614:	021a      	lsls	r2, r3, #8
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800262c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	6859      	ldr	r1, [r3, #4]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	689a      	ldr	r2, [r3, #8]
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	430a      	orrs	r2, r1
 800263e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	689a      	ldr	r2, [r3, #8]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800264e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	6899      	ldr	r1, [r3, #8]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	430a      	orrs	r2, r1
 8002660:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002666:	4a58      	ldr	r2, [pc, #352]	; (80027c8 <ADC_Init+0x1f4>)
 8002668:	4293      	cmp	r3, r2
 800266a:	d022      	beq.n	80026b2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	689a      	ldr	r2, [r3, #8]
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800267a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	6899      	ldr	r1, [r3, #8]
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	430a      	orrs	r2, r1
 800268c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	689a      	ldr	r2, [r3, #8]
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800269c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	6899      	ldr	r1, [r3, #8]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	e00f      	b.n	80026d2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	689a      	ldr	r2, [r3, #8]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80026c0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	689a      	ldr	r2, [r3, #8]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80026d0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	689a      	ldr	r2, [r3, #8]
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	f022 0202 	bic.w	r2, r2, #2
 80026e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	6899      	ldr	r1, [r3, #8]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	7e1b      	ldrb	r3, [r3, #24]
 80026ec:	005a      	lsls	r2, r3, #1
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d01b      	beq.n	8002738 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	685a      	ldr	r2, [r3, #4]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800270e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	685a      	ldr	r2, [r3, #4]
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800271e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	6859      	ldr	r1, [r3, #4]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800272a:	3b01      	subs	r3, #1
 800272c:	035a      	lsls	r2, r3, #13
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	605a      	str	r2, [r3, #4]
 8002736:	e007      	b.n	8002748 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	685a      	ldr	r2, [r3, #4]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002746:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002756:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	3b01      	subs	r3, #1
 8002764:	051a      	lsls	r2, r3, #20
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	430a      	orrs	r2, r1
 800276c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	689a      	ldr	r2, [r3, #8]
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800277c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	6899      	ldr	r1, [r3, #8]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800278a:	025a      	lsls	r2, r3, #9
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	430a      	orrs	r2, r1
 8002792:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	689a      	ldr	r2, [r3, #8]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80027a2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	6899      	ldr	r1, [r3, #8]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	695b      	ldr	r3, [r3, #20]
 80027ae:	029a      	lsls	r2, r3, #10
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	430a      	orrs	r2, r1
 80027b6:	609a      	str	r2, [r3, #8]
}
 80027b8:	bf00      	nop
 80027ba:	3714      	adds	r7, #20
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40012300 	.word	0x40012300
 80027c8:	0f000001 	.word	0x0f000001

080027cc <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b084      	sub	sp, #16
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d13c      	bne.n	8002860 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d12b      	bne.n	8002858 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002804:	2b00      	cmp	r3, #0
 8002806:	d127      	bne.n	8002858 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800280e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002812:	2b00      	cmp	r3, #0
 8002814:	d006      	beq.n	8002824 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8002820:	2b00      	cmp	r3, #0
 8002822:	d119      	bne.n	8002858 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	685a      	ldr	r2, [r3, #4]
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f022 0220 	bic.w	r2, r2, #32
 8002832:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002838:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002844:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d105      	bne.n	8002858 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002850:	f043 0201 	orr.w	r2, r3, #1
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002858:	68f8      	ldr	r0, [r7, #12]
 800285a:	f7fe fe1d 	bl	8001498 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800285e:	e00e      	b.n	800287e <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002864:	f003 0310 	and.w	r3, r3, #16
 8002868:	2b00      	cmp	r3, #0
 800286a:	d003      	beq.n	8002874 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f7ff fd75 	bl	800235c <HAL_ADC_ErrorCallback>
}
 8002872:	e004      	b.n	800287e <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002878:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	4798      	blx	r3
}
 800287e:	bf00      	nop
 8002880:	3710      	adds	r7, #16
 8002882:	46bd      	mov	sp, r7
 8002884:	bd80      	pop	{r7, pc}

08002886 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8002886:	b580      	push	{r7, lr}
 8002888:	b084      	sub	sp, #16
 800288a:	af00      	add	r7, sp, #0
 800288c:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002892:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002894:	68f8      	ldr	r0, [r7, #12]
 8002896:	f7ff fd57 	bl	8002348 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	b084      	sub	sp, #16
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2240      	movs	r2, #64	; 0x40
 80028b4:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028ba:	f043 0204 	orr.w	r2, r3, #4
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f7ff fd4a 	bl	800235c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80028c8:	bf00      	nop
 80028ca:	3710      	adds	r7, #16
 80028cc:	46bd      	mov	sp, r7
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028d0:	b480      	push	{r7}
 80028d2:	b085      	sub	sp, #20
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f003 0307 	and.w	r3, r3, #7
 80028de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028e0:	4b0c      	ldr	r3, [pc, #48]	; (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80028ec:	4013      	ands	r3, r2
 80028ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028f4:	68bb      	ldr	r3, [r7, #8]
 80028f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80028fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002900:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002902:	4a04      	ldr	r2, [pc, #16]	; (8002914 <__NVIC_SetPriorityGrouping+0x44>)
 8002904:	68bb      	ldr	r3, [r7, #8]
 8002906:	60d3      	str	r3, [r2, #12]
}
 8002908:	bf00      	nop
 800290a:	3714      	adds	r7, #20
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr
 8002914:	e000ed00 	.word	0xe000ed00

08002918 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800291c:	4b04      	ldr	r3, [pc, #16]	; (8002930 <__NVIC_GetPriorityGrouping+0x18>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	0a1b      	lsrs	r3, r3, #8
 8002922:	f003 0307 	and.w	r3, r3, #7
}
 8002926:	4618      	mov	r0, r3
 8002928:	46bd      	mov	sp, r7
 800292a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800292e:	4770      	bx	lr
 8002930:	e000ed00 	.word	0xe000ed00

08002934 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	4603      	mov	r3, r0
 800293c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800293e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002942:	2b00      	cmp	r3, #0
 8002944:	db0b      	blt.n	800295e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002946:	79fb      	ldrb	r3, [r7, #7]
 8002948:	f003 021f 	and.w	r2, r3, #31
 800294c:	4907      	ldr	r1, [pc, #28]	; (800296c <__NVIC_EnableIRQ+0x38>)
 800294e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002952:	095b      	lsrs	r3, r3, #5
 8002954:	2001      	movs	r0, #1
 8002956:	fa00 f202 	lsl.w	r2, r0, r2
 800295a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
 800296a:	bf00      	nop
 800296c:	e000e100 	.word	0xe000e100

08002970 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002970:	b480      	push	{r7}
 8002972:	b083      	sub	sp, #12
 8002974:	af00      	add	r7, sp, #0
 8002976:	4603      	mov	r3, r0
 8002978:	6039      	str	r1, [r7, #0]
 800297a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800297c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002980:	2b00      	cmp	r3, #0
 8002982:	db0a      	blt.n	800299a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	b2da      	uxtb	r2, r3
 8002988:	490c      	ldr	r1, [pc, #48]	; (80029bc <__NVIC_SetPriority+0x4c>)
 800298a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800298e:	0112      	lsls	r2, r2, #4
 8002990:	b2d2      	uxtb	r2, r2
 8002992:	440b      	add	r3, r1
 8002994:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002998:	e00a      	b.n	80029b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	4908      	ldr	r1, [pc, #32]	; (80029c0 <__NVIC_SetPriority+0x50>)
 80029a0:	79fb      	ldrb	r3, [r7, #7]
 80029a2:	f003 030f 	and.w	r3, r3, #15
 80029a6:	3b04      	subs	r3, #4
 80029a8:	0112      	lsls	r2, r2, #4
 80029aa:	b2d2      	uxtb	r2, r2
 80029ac:	440b      	add	r3, r1
 80029ae:	761a      	strb	r2, [r3, #24]
}
 80029b0:	bf00      	nop
 80029b2:	370c      	adds	r7, #12
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	e000e100 	.word	0xe000e100
 80029c0:	e000ed00 	.word	0xe000ed00

080029c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b089      	sub	sp, #36	; 0x24
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	f003 0307 	and.w	r3, r3, #7
 80029d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029d8:	69fb      	ldr	r3, [r7, #28]
 80029da:	f1c3 0307 	rsb	r3, r3, #7
 80029de:	2b04      	cmp	r3, #4
 80029e0:	bf28      	it	cs
 80029e2:	2304      	movcs	r3, #4
 80029e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029e6:	69fb      	ldr	r3, [r7, #28]
 80029e8:	3304      	adds	r3, #4
 80029ea:	2b06      	cmp	r3, #6
 80029ec:	d902      	bls.n	80029f4 <NVIC_EncodePriority+0x30>
 80029ee:	69fb      	ldr	r3, [r7, #28]
 80029f0:	3b03      	subs	r3, #3
 80029f2:	e000      	b.n	80029f6 <NVIC_EncodePriority+0x32>
 80029f4:	2300      	movs	r3, #0
 80029f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f8:	f04f 32ff 	mov.w	r2, #4294967295
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002a02:	43da      	mvns	r2, r3
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	401a      	ands	r2, r3
 8002a08:	697b      	ldr	r3, [r7, #20]
 8002a0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a0c:	f04f 31ff 	mov.w	r1, #4294967295
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	fa01 f303 	lsl.w	r3, r1, r3
 8002a16:	43d9      	mvns	r1, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	4313      	orrs	r3, r2
         );
}
 8002a1e:	4618      	mov	r0, r3
 8002a20:	3724      	adds	r7, #36	; 0x24
 8002a22:	46bd      	mov	sp, r7
 8002a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a28:	4770      	bx	lr
	...

08002a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a2c:	b580      	push	{r7, lr}
 8002a2e:	b082      	sub	sp, #8
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	3b01      	subs	r3, #1
 8002a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002a3c:	d301      	bcc.n	8002a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e00f      	b.n	8002a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a42:	4a0a      	ldr	r2, [pc, #40]	; (8002a6c <SysTick_Config+0x40>)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	3b01      	subs	r3, #1
 8002a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a4a:	210f      	movs	r1, #15
 8002a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8002a50:	f7ff ff8e 	bl	8002970 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a54:	4b05      	ldr	r3, [pc, #20]	; (8002a6c <SysTick_Config+0x40>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a5a:	4b04      	ldr	r3, [pc, #16]	; (8002a6c <SysTick_Config+0x40>)
 8002a5c:	2207      	movs	r2, #7
 8002a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002a60:	2300      	movs	r3, #0
}
 8002a62:	4618      	mov	r0, r3
 8002a64:	3708      	adds	r7, #8
 8002a66:	46bd      	mov	sp, r7
 8002a68:	bd80      	pop	{r7, pc}
 8002a6a:	bf00      	nop
 8002a6c:	e000e010 	.word	0xe000e010

08002a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b082      	sub	sp, #8
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ff29 	bl	80028d0 <__NVIC_SetPriorityGrouping>
}
 8002a7e:	bf00      	nop
 8002a80:	3708      	adds	r7, #8
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bd80      	pop	{r7, pc}

08002a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a86:	b580      	push	{r7, lr}
 8002a88:	b086      	sub	sp, #24
 8002a8a:	af00      	add	r7, sp, #0
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	60b9      	str	r1, [r7, #8]
 8002a90:	607a      	str	r2, [r7, #4]
 8002a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a94:	2300      	movs	r3, #0
 8002a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a98:	f7ff ff3e 	bl	8002918 <__NVIC_GetPriorityGrouping>
 8002a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	68b9      	ldr	r1, [r7, #8]
 8002aa2:	6978      	ldr	r0, [r7, #20]
 8002aa4:	f7ff ff8e 	bl	80029c4 <NVIC_EncodePriority>
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002aae:	4611      	mov	r1, r2
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	f7ff ff5d 	bl	8002970 <__NVIC_SetPriority>
}
 8002ab6:	bf00      	nop
 8002ab8:	3718      	adds	r7, #24
 8002aba:	46bd      	mov	sp, r7
 8002abc:	bd80      	pop	{r7, pc}

08002abe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002abe:	b580      	push	{r7, lr}
 8002ac0:	b082      	sub	sp, #8
 8002ac2:	af00      	add	r7, sp, #0
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ac8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7ff ff31 	bl	8002934 <__NVIC_EnableIRQ>
}
 8002ad2:	bf00      	nop
 8002ad4:	3708      	adds	r7, #8
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bd80      	pop	{r7, pc}

08002ada <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ada:	b580      	push	{r7, lr}
 8002adc:	b082      	sub	sp, #8
 8002ade:	af00      	add	r7, sp, #0
 8002ae0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7ff ffa2 	bl	8002a2c <SysTick_Config>
 8002ae8:	4603      	mov	r3, r0
}
 8002aea:	4618      	mov	r0, r3
 8002aec:	3708      	adds	r7, #8
 8002aee:	46bd      	mov	sp, r7
 8002af0:	bd80      	pop	{r7, pc}
	...

08002af4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b086      	sub	sp, #24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002b00:	f7ff fac2 	bl	8002088 <HAL_GetTick>
 8002b04:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d101      	bne.n	8002b10 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	e099      	b.n	8002c44 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2200      	movs	r2, #0
 8002b14:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2202      	movs	r2, #2
 8002b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f022 0201 	bic.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b30:	e00f      	b.n	8002b52 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b32:	f7ff faa9 	bl	8002088 <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	693b      	ldr	r3, [r7, #16]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b05      	cmp	r3, #5
 8002b3e:	d908      	bls.n	8002b52 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2220      	movs	r2, #32
 8002b44:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2203      	movs	r2, #3
 8002b4a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002b4e:	2303      	movs	r3, #3
 8002b50:	e078      	b.n	8002c44 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f003 0301 	and.w	r3, r3, #1
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1e8      	bne.n	8002b32 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	4b38      	ldr	r3, [pc, #224]	; (8002c4c <HAL_DMA_Init+0x158>)
 8002b6c:	4013      	ands	r3, r2
 8002b6e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685a      	ldr	r2, [r3, #4]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b7e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002b8a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	699b      	ldr	r3, [r3, #24]
 8002b90:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002b96:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a1b      	ldr	r3, [r3, #32]
 8002b9c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002b9e:	697a      	ldr	r2, [r7, #20]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba8:	2b04      	cmp	r3, #4
 8002baa:	d107      	bne.n	8002bbc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	697a      	ldr	r2, [r7, #20]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	695b      	ldr	r3, [r3, #20]
 8002bca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0307 	bic.w	r3, r3, #7
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd8:	697a      	ldr	r2, [r7, #20]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002be2:	2b04      	cmp	r3, #4
 8002be4:	d117      	bne.n	8002c16 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bea:	697a      	ldr	r2, [r7, #20]
 8002bec:	4313      	orrs	r3, r2
 8002bee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d00e      	beq.n	8002c16 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fb01 	bl	8003200 <DMA_CheckFifoParam>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d008      	beq.n	8002c16 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2240      	movs	r2, #64	; 0x40
 8002c08:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2201      	movs	r2, #1
 8002c0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002c12:	2301      	movs	r3, #1
 8002c14:	e016      	b.n	8002c44 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	697a      	ldr	r2, [r7, #20]
 8002c1c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 fab8 	bl	8003194 <DMA_CalcBaseAndBitshift>
 8002c24:	4603      	mov	r3, r0
 8002c26:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	223f      	movs	r2, #63	; 0x3f
 8002c2e:	409a      	lsls	r2, r3
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3718      	adds	r7, #24
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	f010803f 	.word	0xf010803f

08002c50 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b086      	sub	sp, #24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
 8002c5c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c66:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d101      	bne.n	8002c76 <HAL_DMA_Start_IT+0x26>
 8002c72:	2302      	movs	r3, #2
 8002c74:	e040      	b.n	8002cf8 <HAL_DMA_Start_IT+0xa8>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	2201      	movs	r2, #1
 8002c7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c84:	b2db      	uxtb	r3, r3
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d12f      	bne.n	8002cea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2202      	movs	r2, #2
 8002c8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	2200      	movs	r2, #0
 8002c96:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	687a      	ldr	r2, [r7, #4]
 8002c9c:	68b9      	ldr	r1, [r7, #8]
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f000 fa4a 	bl	8003138 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ca8:	223f      	movs	r2, #63	; 0x3f
 8002caa:	409a      	lsls	r2, r3
 8002cac:	693b      	ldr	r3, [r7, #16]
 8002cae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f042 0216 	orr.w	r2, r2, #22
 8002cbe:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d007      	beq.n	8002cd8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f042 0208 	orr.w	r2, r2, #8
 8002cd6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	681a      	ldr	r2, [r3, #0]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f042 0201 	orr.w	r2, r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]
 8002ce8:	e005      	b.n	8002cf6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002cf6:	7dfb      	ldrb	r3, [r7, #23]
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b084      	sub	sp, #16
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d0c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002d0e:	f7ff f9bb 	bl	8002088 <HAL_GetTick>
 8002d12:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d008      	beq.n	8002d32 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2280      	movs	r2, #128	; 0x80
 8002d24:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	2200      	movs	r2, #0
 8002d2a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e052      	b.n	8002dd8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0216 	bic.w	r2, r2, #22
 8002d40:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	695a      	ldr	r2, [r3, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002d50:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d103      	bne.n	8002d62 <HAL_DMA_Abort+0x62>
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d007      	beq.n	8002d72 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	681a      	ldr	r2, [r3, #0]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f022 0208 	bic.w	r2, r2, #8
 8002d70:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	681a      	ldr	r2, [r3, #0]
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	f022 0201 	bic.w	r2, r2, #1
 8002d80:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002d82:	e013      	b.n	8002dac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002d84:	f7ff f980 	bl	8002088 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	2b05      	cmp	r3, #5
 8002d90:	d90c      	bls.n	8002dac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2220      	movs	r2, #32
 8002d96:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	2203      	movs	r2, #3
 8002da4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8002da8:	2303      	movs	r3, #3
 8002daa:	e015      	b.n	8002dd8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0301 	and.w	r3, r3, #1
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d1e4      	bne.n	8002d84 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dbe:	223f      	movs	r2, #63	; 0x3f
 8002dc0:	409a      	lsls	r2, r3
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	3710      	adds	r7, #16
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	bd80      	pop	{r7, pc}

08002de0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002de0:	b480      	push	{r7}
 8002de2:	b083      	sub	sp, #12
 8002de4:	af00      	add	r7, sp, #0
 8002de6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002dee:	b2db      	uxtb	r3, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d004      	beq.n	8002dfe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2280      	movs	r2, #128	; 0x80
 8002df8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00c      	b.n	8002e18 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2205      	movs	r2, #5
 8002e02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f022 0201 	bic.w	r2, r2, #1
 8002e14:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002e16:	2300      	movs	r3, #0
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	370c      	adds	r7, #12
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e22:	4770      	bx	lr

08002e24 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b086      	sub	sp, #24
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002e30:	4b92      	ldr	r3, [pc, #584]	; (800307c <HAL_DMA_IRQHandler+0x258>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	4a92      	ldr	r2, [pc, #584]	; (8003080 <HAL_DMA_IRQHandler+0x25c>)
 8002e36:	fba2 2303 	umull	r2, r3, r2, r3
 8002e3a:	0a9b      	lsrs	r3, r3, #10
 8002e3c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e42:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4e:	2208      	movs	r2, #8
 8002e50:	409a      	lsls	r2, r3
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4013      	ands	r3, r2
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d01a      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	f003 0304 	and.w	r3, r3, #4
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d013      	beq.n	8002e90 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	681a      	ldr	r2, [r3, #0]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f022 0204 	bic.w	r2, r2, #4
 8002e76:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e7c:	2208      	movs	r2, #8
 8002e7e:	409a      	lsls	r2, r3
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e88:	f043 0201 	orr.w	r2, r3, #1
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e94:	2201      	movs	r2, #1
 8002e96:	409a      	lsls	r2, r3
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d012      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	695b      	ldr	r3, [r3, #20]
 8002ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00b      	beq.n	8002ec6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eb2:	2201      	movs	r2, #1
 8002eb4:	409a      	lsls	r2, r3
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ebe:	f043 0202 	orr.w	r2, r3, #2
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002eca:	2204      	movs	r2, #4
 8002ecc:	409a      	lsls	r2, r3
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	4013      	ands	r3, r2
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d012      	beq.n	8002efc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	f003 0302 	and.w	r3, r3, #2
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d00b      	beq.n	8002efc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ee8:	2204      	movs	r2, #4
 8002eea:	409a      	lsls	r2, r3
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ef4:	f043 0204 	orr.w	r2, r3, #4
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f00:	2210      	movs	r2, #16
 8002f02:	409a      	lsls	r2, r3
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	4013      	ands	r3, r2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d043      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 0308 	and.w	r3, r3, #8
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d03c      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f1e:	2210      	movs	r2, #16
 8002f20:	409a      	lsls	r2, r3
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d018      	beq.n	8002f66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d108      	bne.n	8002f54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d024      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	4798      	blx	r3
 8002f52:	e01f      	b.n	8002f94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d01b      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	4798      	blx	r3
 8002f64:	e016      	b.n	8002f94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d107      	bne.n	8002f84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f022 0208 	bic.w	r2, r2, #8
 8002f82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d003      	beq.n	8002f94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	2220      	movs	r2, #32
 8002f9a:	409a      	lsls	r2, r3
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 808e 	beq.w	80030c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f003 0310 	and.w	r3, r3, #16
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	f000 8086 	beq.w	80030c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fba:	2220      	movs	r2, #32
 8002fbc:	409a      	lsls	r2, r3
 8002fbe:	693b      	ldr	r3, [r7, #16]
 8002fc0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fc8:	b2db      	uxtb	r3, r3
 8002fca:	2b05      	cmp	r3, #5
 8002fcc:	d136      	bne.n	800303c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	681a      	ldr	r2, [r3, #0]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 0216 	bic.w	r2, r2, #22
 8002fdc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	695a      	ldr	r2, [r3, #20]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002fec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d103      	bne.n	8002ffe <HAL_DMA_IRQHandler+0x1da>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d007      	beq.n	800300e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0208 	bic.w	r2, r2, #8
 800300c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003012:	223f      	movs	r2, #63	; 0x3f
 8003014:	409a      	lsls	r2, r3
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	2200      	movs	r2, #0
 800301e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800302e:	2b00      	cmp	r3, #0
 8003030:	d07d      	beq.n	800312e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	4798      	blx	r3
        }
        return;
 800303a:	e078      	b.n	800312e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003046:	2b00      	cmp	r3, #0
 8003048:	d01c      	beq.n	8003084 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003054:	2b00      	cmp	r3, #0
 8003056:	d108      	bne.n	800306a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305c:	2b00      	cmp	r3, #0
 800305e:	d030      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003064:	6878      	ldr	r0, [r7, #4]
 8003066:	4798      	blx	r3
 8003068:	e02b      	b.n	80030c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800306e:	2b00      	cmp	r3, #0
 8003070:	d027      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003076:	6878      	ldr	r0, [r7, #4]
 8003078:	4798      	blx	r3
 800307a:	e022      	b.n	80030c2 <HAL_DMA_IRQHandler+0x29e>
 800307c:	20000008 	.word	0x20000008
 8003080:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800308e:	2b00      	cmp	r3, #0
 8003090:	d10f      	bne.n	80030b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f022 0210 	bic.w	r2, r2, #16
 80030a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	2201      	movs	r2, #1
 80030ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d003      	beq.n	80030c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d032      	beq.n	8003130 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ce:	f003 0301 	and.w	r3, r3, #1
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d022      	beq.n	800311c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2205      	movs	r2, #5
 80030da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	681a      	ldr	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f022 0201 	bic.w	r2, r2, #1
 80030ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	3301      	adds	r3, #1
 80030f2:	60bb      	str	r3, [r7, #8]
 80030f4:	697a      	ldr	r2, [r7, #20]
 80030f6:	429a      	cmp	r2, r3
 80030f8:	d307      	bcc.n	800310a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f003 0301 	and.w	r3, r3, #1
 8003104:	2b00      	cmp	r3, #0
 8003106:	d1f2      	bne.n	80030ee <HAL_DMA_IRQHandler+0x2ca>
 8003108:	e000      	b.n	800310c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800310a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2200      	movs	r2, #0
 8003110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003128:	6878      	ldr	r0, [r7, #4]
 800312a:	4798      	blx	r3
 800312c:	e000      	b.n	8003130 <HAL_DMA_IRQHandler+0x30c>
        return;
 800312e:	bf00      	nop
    }
  }
}
 8003130:	3718      	adds	r7, #24
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop

08003138 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003138:	b480      	push	{r7}
 800313a:	b085      	sub	sp, #20
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
 8003144:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003154:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	689b      	ldr	r3, [r3, #8]
 8003162:	2b40      	cmp	r3, #64	; 0x40
 8003164:	d108      	bne.n	8003178 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003176:	e007      	b.n	8003188 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	68ba      	ldr	r2, [r7, #8]
 800317e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	687a      	ldr	r2, [r7, #4]
 8003186:	60da      	str	r2, [r3, #12]
}
 8003188:	bf00      	nop
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003192:	4770      	bx	lr

08003194 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	3b10      	subs	r3, #16
 80031a4:	4a14      	ldr	r2, [pc, #80]	; (80031f8 <DMA_CalcBaseAndBitshift+0x64>)
 80031a6:	fba2 2303 	umull	r2, r3, r2, r3
 80031aa:	091b      	lsrs	r3, r3, #4
 80031ac:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80031ae:	4a13      	ldr	r2, [pc, #76]	; (80031fc <DMA_CalcBaseAndBitshift+0x68>)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	4413      	add	r3, r2
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	461a      	mov	r2, r3
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	2b03      	cmp	r3, #3
 80031c0:	d909      	bls.n	80031d6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031ca:	f023 0303 	bic.w	r3, r3, #3
 80031ce:	1d1a      	adds	r2, r3, #4
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	659a      	str	r2, [r3, #88]	; 0x58
 80031d4:	e007      	b.n	80031e6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80031de:	f023 0303 	bic.w	r3, r3, #3
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3714      	adds	r7, #20
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	aaaaaaab 	.word	0xaaaaaaab
 80031fc:	080070a4 	.word	0x080070a4

08003200 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003208:	2300      	movs	r3, #0
 800320a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003210:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d11f      	bne.n	800325a <DMA_CheckFifoParam+0x5a>
 800321a:	68bb      	ldr	r3, [r7, #8]
 800321c:	2b03      	cmp	r3, #3
 800321e:	d856      	bhi.n	80032ce <DMA_CheckFifoParam+0xce>
 8003220:	a201      	add	r2, pc, #4	; (adr r2, 8003228 <DMA_CheckFifoParam+0x28>)
 8003222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003226:	bf00      	nop
 8003228:	08003239 	.word	0x08003239
 800322c:	0800324b 	.word	0x0800324b
 8003230:	08003239 	.word	0x08003239
 8003234:	080032cf 	.word	0x080032cf
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800323c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003240:	2b00      	cmp	r3, #0
 8003242:	d046      	beq.n	80032d2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003248:	e043      	b.n	80032d2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800324e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003252:	d140      	bne.n	80032d6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003254:	2301      	movs	r3, #1
 8003256:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003258:	e03d      	b.n	80032d6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	699b      	ldr	r3, [r3, #24]
 800325e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003262:	d121      	bne.n	80032a8 <DMA_CheckFifoParam+0xa8>
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2b03      	cmp	r3, #3
 8003268:	d837      	bhi.n	80032da <DMA_CheckFifoParam+0xda>
 800326a:	a201      	add	r2, pc, #4	; (adr r2, 8003270 <DMA_CheckFifoParam+0x70>)
 800326c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003270:	08003281 	.word	0x08003281
 8003274:	08003287 	.word	0x08003287
 8003278:	08003281 	.word	0x08003281
 800327c:	08003299 	.word	0x08003299
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003280:	2301      	movs	r3, #1
 8003282:	73fb      	strb	r3, [r7, #15]
      break;
 8003284:	e030      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800328a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d025      	beq.n	80032de <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003296:	e022      	b.n	80032de <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80032a0:	d11f      	bne.n	80032e2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80032a6:	e01c      	b.n	80032e2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b02      	cmp	r3, #2
 80032ac:	d903      	bls.n	80032b6 <DMA_CheckFifoParam+0xb6>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d003      	beq.n	80032bc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80032b4:	e018      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	73fb      	strb	r3, [r7, #15]
      break;
 80032ba:	e015      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d00e      	beq.n	80032e6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
      break;
 80032cc:	e00b      	b.n	80032e6 <DMA_CheckFifoParam+0xe6>
      break;
 80032ce:	bf00      	nop
 80032d0:	e00a      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032d2:	bf00      	nop
 80032d4:	e008      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032d6:	bf00      	nop
 80032d8:	e006      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032da:	bf00      	nop
 80032dc:	e004      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032de:	bf00      	nop
 80032e0:	e002      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;   
 80032e2:	bf00      	nop
 80032e4:	e000      	b.n	80032e8 <DMA_CheckFifoParam+0xe8>
      break;
 80032e6:	bf00      	nop
    }
  } 
  
  return status; 
 80032e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ea:	4618      	mov	r0, r3
 80032ec:	3714      	adds	r7, #20
 80032ee:	46bd      	mov	sp, r7
 80032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop

080032f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80032f8:	b480      	push	{r7}
 80032fa:	b089      	sub	sp, #36	; 0x24
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003302:	2300      	movs	r3, #0
 8003304:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003306:	2300      	movs	r3, #0
 8003308:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800330a:	2300      	movs	r3, #0
 800330c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800330e:	2300      	movs	r3, #0
 8003310:	61fb      	str	r3, [r7, #28]
 8003312:	e165      	b.n	80035e0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003314:	2201      	movs	r2, #1
 8003316:	69fb      	ldr	r3, [r7, #28]
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	697a      	ldr	r2, [r7, #20]
 8003324:	4013      	ands	r3, r2
 8003326:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003328:	693a      	ldr	r2, [r7, #16]
 800332a:	697b      	ldr	r3, [r7, #20]
 800332c:	429a      	cmp	r2, r3
 800332e:	f040 8154 	bne.w	80035da <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003332:	683b      	ldr	r3, [r7, #0]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	f003 0303 	and.w	r3, r3, #3
 800333a:	2b01      	cmp	r3, #1
 800333c:	d005      	beq.n	800334a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003346:	2b02      	cmp	r3, #2
 8003348:	d130      	bne.n	80033ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	2203      	movs	r2, #3
 8003356:	fa02 f303 	lsl.w	r3, r2, r3
 800335a:	43db      	mvns	r3, r3
 800335c:	69ba      	ldr	r2, [r7, #24]
 800335e:	4013      	ands	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	68da      	ldr	r2, [r3, #12]
 8003366:	69fb      	ldr	r3, [r7, #28]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	fa02 f303 	lsl.w	r3, r2, r3
 800336e:	69ba      	ldr	r2, [r7, #24]
 8003370:	4313      	orrs	r3, r2
 8003372:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	69ba      	ldr	r2, [r7, #24]
 8003378:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003380:	2201      	movs	r2, #1
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43db      	mvns	r3, r3
 800338a:	69ba      	ldr	r2, [r7, #24]
 800338c:	4013      	ands	r3, r2
 800338e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003390:	683b      	ldr	r3, [r7, #0]
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	091b      	lsrs	r3, r3, #4
 8003396:	f003 0201 	and.w	r2, r3, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	69ba      	ldr	r2, [r7, #24]
 80033a2:	4313      	orrs	r3, r2
 80033a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	69ba      	ldr	r2, [r7, #24]
 80033aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	f003 0303 	and.w	r3, r3, #3
 80033b4:	2b03      	cmp	r3, #3
 80033b6:	d017      	beq.n	80033e8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	68db      	ldr	r3, [r3, #12]
 80033bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	005b      	lsls	r3, r3, #1
 80033c2:	2203      	movs	r2, #3
 80033c4:	fa02 f303 	lsl.w	r3, r2, r3
 80033c8:	43db      	mvns	r3, r3
 80033ca:	69ba      	ldr	r2, [r7, #24]
 80033cc:	4013      	ands	r3, r2
 80033ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	689a      	ldr	r2, [r3, #8]
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	fa02 f303 	lsl.w	r3, r2, r3
 80033dc:	69ba      	ldr	r2, [r7, #24]
 80033de:	4313      	orrs	r3, r2
 80033e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	69ba      	ldr	r2, [r7, #24]
 80033e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 0303 	and.w	r3, r3, #3
 80033f0:	2b02      	cmp	r3, #2
 80033f2:	d123      	bne.n	800343c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	08da      	lsrs	r2, r3, #3
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	3208      	adds	r2, #8
 80033fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003400:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	f003 0307 	and.w	r3, r3, #7
 8003408:	009b      	lsls	r3, r3, #2
 800340a:	220f      	movs	r2, #15
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	43db      	mvns	r3, r3
 8003412:	69ba      	ldr	r2, [r7, #24]
 8003414:	4013      	ands	r3, r2
 8003416:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003418:	683b      	ldr	r3, [r7, #0]
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	69fb      	ldr	r3, [r7, #28]
 800341e:	f003 0307 	and.w	r3, r3, #7
 8003422:	009b      	lsls	r3, r3, #2
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	69ba      	ldr	r2, [r7, #24]
 800342a:	4313      	orrs	r3, r2
 800342c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	08da      	lsrs	r2, r3, #3
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	3208      	adds	r2, #8
 8003436:	69b9      	ldr	r1, [r7, #24]
 8003438:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f003 0203 	and.w	r2, r3, #3
 800345c:	69fb      	ldr	r3, [r7, #28]
 800345e:	005b      	lsls	r3, r3, #1
 8003460:	fa02 f303 	lsl.w	r3, r2, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4313      	orrs	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	69ba      	ldr	r2, [r7, #24]
 800346e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	685b      	ldr	r3, [r3, #4]
 8003474:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003478:	2b00      	cmp	r3, #0
 800347a:	f000 80ae 	beq.w	80035da <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800347e:	2300      	movs	r3, #0
 8003480:	60fb      	str	r3, [r7, #12]
 8003482:	4b5d      	ldr	r3, [pc, #372]	; (80035f8 <HAL_GPIO_Init+0x300>)
 8003484:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003486:	4a5c      	ldr	r2, [pc, #368]	; (80035f8 <HAL_GPIO_Init+0x300>)
 8003488:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800348c:	6453      	str	r3, [r2, #68]	; 0x44
 800348e:	4b5a      	ldr	r3, [pc, #360]	; (80035f8 <HAL_GPIO_Init+0x300>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003496:	60fb      	str	r3, [r7, #12]
 8003498:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800349a:	4a58      	ldr	r2, [pc, #352]	; (80035fc <HAL_GPIO_Init+0x304>)
 800349c:	69fb      	ldr	r3, [r7, #28]
 800349e:	089b      	lsrs	r3, r3, #2
 80034a0:	3302      	adds	r3, #2
 80034a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	f003 0303 	and.w	r3, r3, #3
 80034ae:	009b      	lsls	r3, r3, #2
 80034b0:	220f      	movs	r2, #15
 80034b2:	fa02 f303 	lsl.w	r3, r2, r3
 80034b6:	43db      	mvns	r3, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4013      	ands	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a4f      	ldr	r2, [pc, #316]	; (8003600 <HAL_GPIO_Init+0x308>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d025      	beq.n	8003512 <HAL_GPIO_Init+0x21a>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4e      	ldr	r2, [pc, #312]	; (8003604 <HAL_GPIO_Init+0x30c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d01f      	beq.n	800350e <HAL_GPIO_Init+0x216>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a4d      	ldr	r2, [pc, #308]	; (8003608 <HAL_GPIO_Init+0x310>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d019      	beq.n	800350a <HAL_GPIO_Init+0x212>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a4c      	ldr	r2, [pc, #304]	; (800360c <HAL_GPIO_Init+0x314>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d013      	beq.n	8003506 <HAL_GPIO_Init+0x20e>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	4a4b      	ldr	r2, [pc, #300]	; (8003610 <HAL_GPIO_Init+0x318>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d00d      	beq.n	8003502 <HAL_GPIO_Init+0x20a>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	4a4a      	ldr	r2, [pc, #296]	; (8003614 <HAL_GPIO_Init+0x31c>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <HAL_GPIO_Init+0x206>
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	4a49      	ldr	r2, [pc, #292]	; (8003618 <HAL_GPIO_Init+0x320>)
 80034f2:	4293      	cmp	r3, r2
 80034f4:	d101      	bne.n	80034fa <HAL_GPIO_Init+0x202>
 80034f6:	2306      	movs	r3, #6
 80034f8:	e00c      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 80034fa:	2307      	movs	r3, #7
 80034fc:	e00a      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 80034fe:	2305      	movs	r3, #5
 8003500:	e008      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 8003502:	2304      	movs	r3, #4
 8003504:	e006      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 8003506:	2303      	movs	r3, #3
 8003508:	e004      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 800350a:	2302      	movs	r3, #2
 800350c:	e002      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 800350e:	2301      	movs	r3, #1
 8003510:	e000      	b.n	8003514 <HAL_GPIO_Init+0x21c>
 8003512:	2300      	movs	r3, #0
 8003514:	69fa      	ldr	r2, [r7, #28]
 8003516:	f002 0203 	and.w	r2, r2, #3
 800351a:	0092      	lsls	r2, r2, #2
 800351c:	4093      	lsls	r3, r2
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4313      	orrs	r3, r2
 8003522:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003524:	4935      	ldr	r1, [pc, #212]	; (80035fc <HAL_GPIO_Init+0x304>)
 8003526:	69fb      	ldr	r3, [r7, #28]
 8003528:	089b      	lsrs	r3, r3, #2
 800352a:	3302      	adds	r3, #2
 800352c:	69ba      	ldr	r2, [r7, #24]
 800352e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003532:	4b3a      	ldr	r3, [pc, #232]	; (800361c <HAL_GPIO_Init+0x324>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	685b      	ldr	r3, [r3, #4]
 8003546:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800354a:	2b00      	cmp	r3, #0
 800354c:	d003      	beq.n	8003556 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	693b      	ldr	r3, [r7, #16]
 8003552:	4313      	orrs	r3, r2
 8003554:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003556:	4a31      	ldr	r2, [pc, #196]	; (800361c <HAL_GPIO_Init+0x324>)
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800355c:	4b2f      	ldr	r3, [pc, #188]	; (800361c <HAL_GPIO_Init+0x324>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003574:	2b00      	cmp	r3, #0
 8003576:	d003      	beq.n	8003580 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	4313      	orrs	r3, r2
 800357e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003580:	4a26      	ldr	r2, [pc, #152]	; (800361c <HAL_GPIO_Init+0x324>)
 8003582:	69bb      	ldr	r3, [r7, #24]
 8003584:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003586:	4b25      	ldr	r3, [pc, #148]	; (800361c <HAL_GPIO_Init+0x324>)
 8003588:	689b      	ldr	r3, [r3, #8]
 800358a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	43db      	mvns	r3, r3
 8003590:	69ba      	ldr	r2, [r7, #24]
 8003592:	4013      	ands	r3, r2
 8003594:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003596:	683b      	ldr	r3, [r7, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	4313      	orrs	r3, r2
 80035a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035aa:	4a1c      	ldr	r2, [pc, #112]	; (800361c <HAL_GPIO_Init+0x324>)
 80035ac:	69bb      	ldr	r3, [r7, #24]
 80035ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035b0:	4b1a      	ldr	r3, [pc, #104]	; (800361c <HAL_GPIO_Init+0x324>)
 80035b2:	68db      	ldr	r3, [r3, #12]
 80035b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	43db      	mvns	r3, r3
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	4013      	ands	r3, r2
 80035be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035cc:	69ba      	ldr	r2, [r7, #24]
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	4313      	orrs	r3, r2
 80035d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035d4:	4a11      	ldr	r2, [pc, #68]	; (800361c <HAL_GPIO_Init+0x324>)
 80035d6:	69bb      	ldr	r3, [r7, #24]
 80035d8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	3301      	adds	r3, #1
 80035de:	61fb      	str	r3, [r7, #28]
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b0f      	cmp	r3, #15
 80035e4:	f67f ae96 	bls.w	8003314 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035e8:	bf00      	nop
 80035ea:	bf00      	nop
 80035ec:	3724      	adds	r7, #36	; 0x24
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	40023800 	.word	0x40023800
 80035fc:	40013800 	.word	0x40013800
 8003600:	40020000 	.word	0x40020000
 8003604:	40020400 	.word	0x40020400
 8003608:	40020800 	.word	0x40020800
 800360c:	40020c00 	.word	0x40020c00
 8003610:	40021000 	.word	0x40021000
 8003614:	40021400 	.word	0x40021400
 8003618:	40021800 	.word	0x40021800
 800361c:	40013c00 	.word	0x40013c00

08003620 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	807b      	strh	r3, [r7, #2]
 800362c:	4613      	mov	r3, r2
 800362e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003630:	787b      	ldrb	r3, [r7, #1]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d003      	beq.n	800363e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003636:	887a      	ldrh	r2, [r7, #2]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800363c:	e003      	b.n	8003646 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800363e:	887b      	ldrh	r3, [r7, #2]
 8003640:	041a      	lsls	r2, r3, #16
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	619a      	str	r2, [r3, #24]
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003650:	4770      	bx	lr
	...

08003654 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003654:	b580      	push	{r7, lr}
 8003656:	b082      	sub	sp, #8
 8003658:	af00      	add	r7, sp, #0
 800365a:	4603      	mov	r3, r0
 800365c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800365e:	4b08      	ldr	r3, [pc, #32]	; (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003660:	695a      	ldr	r2, [r3, #20]
 8003662:	88fb      	ldrh	r3, [r7, #6]
 8003664:	4013      	ands	r3, r2
 8003666:	2b00      	cmp	r3, #0
 8003668:	d006      	beq.n	8003678 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800366a:	4a05      	ldr	r2, [pc, #20]	; (8003680 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800366c:	88fb      	ldrh	r3, [r7, #6]
 800366e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003670:	88fb      	ldrh	r3, [r7, #6]
 8003672:	4618      	mov	r0, r3
 8003674:	f7fd fe28 	bl	80012c8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003678:	bf00      	nop
 800367a:	3708      	adds	r7, #8
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b084      	sub	sp, #16
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d101      	bne.n	8003698 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003694:	2301      	movs	r3, #1
 8003696:	e0cc      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003698:	4b68      	ldr	r3, [pc, #416]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f003 030f 	and.w	r3, r3, #15
 80036a0:	683a      	ldr	r2, [r7, #0]
 80036a2:	429a      	cmp	r2, r3
 80036a4:	d90c      	bls.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036a6:	4b65      	ldr	r3, [pc, #404]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036a8:	683a      	ldr	r2, [r7, #0]
 80036aa:	b2d2      	uxtb	r2, r2
 80036ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ae:	4b63      	ldr	r3, [pc, #396]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 030f 	and.w	r3, r3, #15
 80036b6:	683a      	ldr	r2, [r7, #0]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	d001      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0b8      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0302 	and.w	r3, r3, #2
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d020      	beq.n	800370e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0304 	and.w	r3, r3, #4
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d005      	beq.n	80036e4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036d8:	4b59      	ldr	r3, [pc, #356]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	4a58      	ldr	r2, [pc, #352]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036de:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036e2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d005      	beq.n	80036fc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036f0:	4b53      	ldr	r3, [pc, #332]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	4a52      	ldr	r2, [pc, #328]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036f6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036fa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036fc:	4b50      	ldr	r3, [pc, #320]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	689b      	ldr	r3, [r3, #8]
 8003700:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	494d      	ldr	r1, [pc, #308]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 800370a:	4313      	orrs	r3, r2
 800370c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	f003 0301 	and.w	r3, r3, #1
 8003716:	2b00      	cmp	r3, #0
 8003718:	d044      	beq.n	80037a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	685b      	ldr	r3, [r3, #4]
 800371e:	2b01      	cmp	r3, #1
 8003720:	d107      	bne.n	8003732 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003722:	4b47      	ldr	r3, [pc, #284]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800372a:	2b00      	cmp	r3, #0
 800372c:	d119      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e07f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b02      	cmp	r3, #2
 8003738:	d003      	beq.n	8003742 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800373e:	2b03      	cmp	r3, #3
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003742:	4b3f      	ldr	r3, [pc, #252]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e06f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003752:	4b3b      	ldr	r3, [pc, #236]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0302 	and.w	r3, r3, #2
 800375a:	2b00      	cmp	r3, #0
 800375c:	d101      	bne.n	8003762 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800375e:	2301      	movs	r3, #1
 8003760:	e067      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003762:	4b37      	ldr	r3, [pc, #220]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	f023 0203 	bic.w	r2, r3, #3
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	685b      	ldr	r3, [r3, #4]
 800376e:	4934      	ldr	r1, [pc, #208]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	4313      	orrs	r3, r2
 8003772:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003774:	f7fe fc88 	bl	8002088 <HAL_GetTick>
 8003778:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800377a:	e00a      	b.n	8003792 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800377c:	f7fe fc84 	bl	8002088 <HAL_GetTick>
 8003780:	4602      	mov	r2, r0
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	1ad3      	subs	r3, r2, r3
 8003786:	f241 3288 	movw	r2, #5000	; 0x1388
 800378a:	4293      	cmp	r3, r2
 800378c:	d901      	bls.n	8003792 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800378e:	2303      	movs	r3, #3
 8003790:	e04f      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003792:	4b2b      	ldr	r3, [pc, #172]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003794:	689b      	ldr	r3, [r3, #8]
 8003796:	f003 020c 	and.w	r2, r3, #12
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	685b      	ldr	r3, [r3, #4]
 800379e:	009b      	lsls	r3, r3, #2
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d1eb      	bne.n	800377c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037a4:	4b25      	ldr	r3, [pc, #148]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f003 030f 	and.w	r3, r3, #15
 80037ac:	683a      	ldr	r2, [r7, #0]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d20c      	bcs.n	80037cc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037b2:	4b22      	ldr	r3, [pc, #136]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037b4:	683a      	ldr	r2, [r7, #0]
 80037b6:	b2d2      	uxtb	r2, r2
 80037b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037ba:	4b20      	ldr	r3, [pc, #128]	; (800383c <HAL_RCC_ClockConfig+0x1b8>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f003 030f 	and.w	r3, r3, #15
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	429a      	cmp	r2, r3
 80037c6:	d001      	beq.n	80037cc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037c8:	2301      	movs	r3, #1
 80037ca:	e032      	b.n	8003832 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 0304 	and.w	r3, r3, #4
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d008      	beq.n	80037ea <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037d8:	4b19      	ldr	r3, [pc, #100]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037da:	689b      	ldr	r3, [r3, #8]
 80037dc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	68db      	ldr	r3, [r3, #12]
 80037e4:	4916      	ldr	r1, [pc, #88]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037e6:	4313      	orrs	r3, r2
 80037e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0308 	and.w	r3, r3, #8
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d009      	beq.n	800380a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037f6:	4b12      	ldr	r3, [pc, #72]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 80037f8:	689b      	ldr	r3, [r3, #8]
 80037fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	691b      	ldr	r3, [r3, #16]
 8003802:	00db      	lsls	r3, r3, #3
 8003804:	490e      	ldr	r1, [pc, #56]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800380a:	f000 f855 	bl	80038b8 <HAL_RCC_GetSysClockFreq>
 800380e:	4602      	mov	r2, r0
 8003810:	4b0b      	ldr	r3, [pc, #44]	; (8003840 <HAL_RCC_ClockConfig+0x1bc>)
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	091b      	lsrs	r3, r3, #4
 8003816:	f003 030f 	and.w	r3, r3, #15
 800381a:	490a      	ldr	r1, [pc, #40]	; (8003844 <HAL_RCC_ClockConfig+0x1c0>)
 800381c:	5ccb      	ldrb	r3, [r1, r3]
 800381e:	fa22 f303 	lsr.w	r3, r2, r3
 8003822:	4a09      	ldr	r2, [pc, #36]	; (8003848 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003826:	4b09      	ldr	r3, [pc, #36]	; (800384c <HAL_RCC_ClockConfig+0x1c8>)
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	4618      	mov	r0, r3
 800382c:	f7fe fbe8 	bl	8002000 <HAL_InitTick>

  return HAL_OK;
 8003830:	2300      	movs	r3, #0
}
 8003832:	4618      	mov	r0, r3
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40023c00 	.word	0x40023c00
 8003840:	40023800 	.word	0x40023800
 8003844:	0800708c 	.word	0x0800708c
 8003848:	20000008 	.word	0x20000008
 800384c:	2000000c 	.word	0x2000000c

08003850 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003850:	b480      	push	{r7}
 8003852:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003854:	4b03      	ldr	r3, [pc, #12]	; (8003864 <HAL_RCC_GetHCLKFreq+0x14>)
 8003856:	681b      	ldr	r3, [r3, #0]
}
 8003858:	4618      	mov	r0, r3
 800385a:	46bd      	mov	sp, r7
 800385c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003860:	4770      	bx	lr
 8003862:	bf00      	nop
 8003864:	20000008 	.word	0x20000008

08003868 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800386c:	f7ff fff0 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003870:	4602      	mov	r2, r0
 8003872:	4b05      	ldr	r3, [pc, #20]	; (8003888 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	0a9b      	lsrs	r3, r3, #10
 8003878:	f003 0307 	and.w	r3, r3, #7
 800387c:	4903      	ldr	r1, [pc, #12]	; (800388c <HAL_RCC_GetPCLK1Freq+0x24>)
 800387e:	5ccb      	ldrb	r3, [r1, r3]
 8003880:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003884:	4618      	mov	r0, r3
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40023800 	.word	0x40023800
 800388c:	0800709c 	.word	0x0800709c

08003890 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003894:	f7ff ffdc 	bl	8003850 <HAL_RCC_GetHCLKFreq>
 8003898:	4602      	mov	r2, r0
 800389a:	4b05      	ldr	r3, [pc, #20]	; (80038b0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	0b5b      	lsrs	r3, r3, #13
 80038a0:	f003 0307 	and.w	r3, r3, #7
 80038a4:	4903      	ldr	r1, [pc, #12]	; (80038b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80038a6:	5ccb      	ldrb	r3, [r1, r3]
 80038a8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038ac:	4618      	mov	r0, r3
 80038ae:	bd80      	pop	{r7, pc}
 80038b0:	40023800 	.word	0x40023800
 80038b4:	0800709c 	.word	0x0800709c

080038b8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80038bc:	b088      	sub	sp, #32
 80038be:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80038c4:	2300      	movs	r3, #0
 80038c6:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80038cc:	2300      	movs	r3, #0
 80038ce:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80038d0:	2300      	movs	r3, #0
 80038d2:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038d4:	4bce      	ldr	r3, [pc, #824]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	f003 030c 	and.w	r3, r3, #12
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	f200 818d 	bhi.w	8003bfc <HAL_RCC_GetSysClockFreq+0x344>
 80038e2:	a201      	add	r2, pc, #4	; (adr r2, 80038e8 <HAL_RCC_GetSysClockFreq+0x30>)
 80038e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038e8:	0800391d 	.word	0x0800391d
 80038ec:	08003bfd 	.word	0x08003bfd
 80038f0:	08003bfd 	.word	0x08003bfd
 80038f4:	08003bfd 	.word	0x08003bfd
 80038f8:	08003923 	.word	0x08003923
 80038fc:	08003bfd 	.word	0x08003bfd
 8003900:	08003bfd 	.word	0x08003bfd
 8003904:	08003bfd 	.word	0x08003bfd
 8003908:	08003929 	.word	0x08003929
 800390c:	08003bfd 	.word	0x08003bfd
 8003910:	08003bfd 	.word	0x08003bfd
 8003914:	08003bfd 	.word	0x08003bfd
 8003918:	08003a9d 	.word	0x08003a9d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800391c:	4bbd      	ldr	r3, [pc, #756]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x35c>)
 800391e:	61bb      	str	r3, [r7, #24]
       break;
 8003920:	e16f      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003922:	4bbd      	ldr	r3, [pc, #756]	; (8003c18 <HAL_RCC_GetSysClockFreq+0x360>)
 8003924:	61bb      	str	r3, [r7, #24]
      break;
 8003926:	e16c      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003928:	4bb9      	ldr	r3, [pc, #740]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 800392a:	685b      	ldr	r3, [r3, #4]
 800392c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003930:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003932:	4bb7      	ldr	r3, [pc, #732]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d053      	beq.n	80039e6 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800393e:	4bb4      	ldr	r3, [pc, #720]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003940:	685b      	ldr	r3, [r3, #4]
 8003942:	099b      	lsrs	r3, r3, #6
 8003944:	461a      	mov	r2, r3
 8003946:	f04f 0300 	mov.w	r3, #0
 800394a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800394e:	f04f 0100 	mov.w	r1, #0
 8003952:	ea02 0400 	and.w	r4, r2, r0
 8003956:	603c      	str	r4, [r7, #0]
 8003958:	400b      	ands	r3, r1
 800395a:	607b      	str	r3, [r7, #4]
 800395c:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003960:	4620      	mov	r0, r4
 8003962:	4629      	mov	r1, r5
 8003964:	f04f 0200 	mov.w	r2, #0
 8003968:	f04f 0300 	mov.w	r3, #0
 800396c:	014b      	lsls	r3, r1, #5
 800396e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003972:	0142      	lsls	r2, r0, #5
 8003974:	4610      	mov	r0, r2
 8003976:	4619      	mov	r1, r3
 8003978:	4623      	mov	r3, r4
 800397a:	1ac0      	subs	r0, r0, r3
 800397c:	462b      	mov	r3, r5
 800397e:	eb61 0103 	sbc.w	r1, r1, r3
 8003982:	f04f 0200 	mov.w	r2, #0
 8003986:	f04f 0300 	mov.w	r3, #0
 800398a:	018b      	lsls	r3, r1, #6
 800398c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003990:	0182      	lsls	r2, r0, #6
 8003992:	1a12      	subs	r2, r2, r0
 8003994:	eb63 0301 	sbc.w	r3, r3, r1
 8003998:	f04f 0000 	mov.w	r0, #0
 800399c:	f04f 0100 	mov.w	r1, #0
 80039a0:	00d9      	lsls	r1, r3, #3
 80039a2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80039a6:	00d0      	lsls	r0, r2, #3
 80039a8:	4602      	mov	r2, r0
 80039aa:	460b      	mov	r3, r1
 80039ac:	4621      	mov	r1, r4
 80039ae:	1852      	adds	r2, r2, r1
 80039b0:	4629      	mov	r1, r5
 80039b2:	eb43 0101 	adc.w	r1, r3, r1
 80039b6:	460b      	mov	r3, r1
 80039b8:	f04f 0000 	mov.w	r0, #0
 80039bc:	f04f 0100 	mov.w	r1, #0
 80039c0:	0259      	lsls	r1, r3, #9
 80039c2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80039c6:	0250      	lsls	r0, r2, #9
 80039c8:	4602      	mov	r2, r0
 80039ca:	460b      	mov	r3, r1
 80039cc:	4610      	mov	r0, r2
 80039ce:	4619      	mov	r1, r3
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	461a      	mov	r2, r3
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	f7fc ffe0 	bl	800099c <__aeabi_uldivmod>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4613      	mov	r3, r2
 80039e2:	61fb      	str	r3, [r7, #28]
 80039e4:	e04c      	b.n	8003a80 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039e6:	4b8a      	ldr	r3, [pc, #552]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	099b      	lsrs	r3, r3, #6
 80039ec:	461a      	mov	r2, r3
 80039ee:	f04f 0300 	mov.w	r3, #0
 80039f2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80039f6:	f04f 0100 	mov.w	r1, #0
 80039fa:	ea02 0a00 	and.w	sl, r2, r0
 80039fe:	ea03 0b01 	and.w	fp, r3, r1
 8003a02:	4650      	mov	r0, sl
 8003a04:	4659      	mov	r1, fp
 8003a06:	f04f 0200 	mov.w	r2, #0
 8003a0a:	f04f 0300 	mov.w	r3, #0
 8003a0e:	014b      	lsls	r3, r1, #5
 8003a10:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003a14:	0142      	lsls	r2, r0, #5
 8003a16:	4610      	mov	r0, r2
 8003a18:	4619      	mov	r1, r3
 8003a1a:	ebb0 000a 	subs.w	r0, r0, sl
 8003a1e:	eb61 010b 	sbc.w	r1, r1, fp
 8003a22:	f04f 0200 	mov.w	r2, #0
 8003a26:	f04f 0300 	mov.w	r3, #0
 8003a2a:	018b      	lsls	r3, r1, #6
 8003a2c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003a30:	0182      	lsls	r2, r0, #6
 8003a32:	1a12      	subs	r2, r2, r0
 8003a34:	eb63 0301 	sbc.w	r3, r3, r1
 8003a38:	f04f 0000 	mov.w	r0, #0
 8003a3c:	f04f 0100 	mov.w	r1, #0
 8003a40:	00d9      	lsls	r1, r3, #3
 8003a42:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003a46:	00d0      	lsls	r0, r2, #3
 8003a48:	4602      	mov	r2, r0
 8003a4a:	460b      	mov	r3, r1
 8003a4c:	eb12 020a 	adds.w	r2, r2, sl
 8003a50:	eb43 030b 	adc.w	r3, r3, fp
 8003a54:	f04f 0000 	mov.w	r0, #0
 8003a58:	f04f 0100 	mov.w	r1, #0
 8003a5c:	0299      	lsls	r1, r3, #10
 8003a5e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003a62:	0290      	lsls	r0, r2, #10
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4610      	mov	r0, r2
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	697b      	ldr	r3, [r7, #20]
 8003a6e:	461a      	mov	r2, r3
 8003a70:	f04f 0300 	mov.w	r3, #0
 8003a74:	f7fc ff92 	bl	800099c <__aeabi_uldivmod>
 8003a78:	4602      	mov	r2, r0
 8003a7a:	460b      	mov	r3, r1
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003a80:	4b63      	ldr	r3, [pc, #396]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a82:	685b      	ldr	r3, [r3, #4]
 8003a84:	0c1b      	lsrs	r3, r3, #16
 8003a86:	f003 0303 	and.w	r3, r3, #3
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	005b      	lsls	r3, r3, #1
 8003a8e:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8003a90:	69fa      	ldr	r2, [r7, #28]
 8003a92:	693b      	ldr	r3, [r7, #16]
 8003a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a98:	61bb      	str	r3, [r7, #24]
      break;
 8003a9a:	e0b2      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003a9c:	4b5c      	ldr	r3, [pc, #368]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003aa4:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003aa6:	4b5a      	ldr	r3, [pc, #360]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04d      	beq.n	8003b4e <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ab2:	4b57      	ldr	r3, [pc, #348]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	099b      	lsrs	r3, r3, #6
 8003ab8:	461a      	mov	r2, r3
 8003aba:	f04f 0300 	mov.w	r3, #0
 8003abe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003ac2:	f04f 0100 	mov.w	r1, #0
 8003ac6:	ea02 0800 	and.w	r8, r2, r0
 8003aca:	ea03 0901 	and.w	r9, r3, r1
 8003ace:	4640      	mov	r0, r8
 8003ad0:	4649      	mov	r1, r9
 8003ad2:	f04f 0200 	mov.w	r2, #0
 8003ad6:	f04f 0300 	mov.w	r3, #0
 8003ada:	014b      	lsls	r3, r1, #5
 8003adc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003ae0:	0142      	lsls	r2, r0, #5
 8003ae2:	4610      	mov	r0, r2
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	ebb0 0008 	subs.w	r0, r0, r8
 8003aea:	eb61 0109 	sbc.w	r1, r1, r9
 8003aee:	f04f 0200 	mov.w	r2, #0
 8003af2:	f04f 0300 	mov.w	r3, #0
 8003af6:	018b      	lsls	r3, r1, #6
 8003af8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003afc:	0182      	lsls	r2, r0, #6
 8003afe:	1a12      	subs	r2, r2, r0
 8003b00:	eb63 0301 	sbc.w	r3, r3, r1
 8003b04:	f04f 0000 	mov.w	r0, #0
 8003b08:	f04f 0100 	mov.w	r1, #0
 8003b0c:	00d9      	lsls	r1, r3, #3
 8003b0e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003b12:	00d0      	lsls	r0, r2, #3
 8003b14:	4602      	mov	r2, r0
 8003b16:	460b      	mov	r3, r1
 8003b18:	eb12 0208 	adds.w	r2, r2, r8
 8003b1c:	eb43 0309 	adc.w	r3, r3, r9
 8003b20:	f04f 0000 	mov.w	r0, #0
 8003b24:	f04f 0100 	mov.w	r1, #0
 8003b28:	0259      	lsls	r1, r3, #9
 8003b2a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003b2e:	0250      	lsls	r0, r2, #9
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4610      	mov	r0, r2
 8003b36:	4619      	mov	r1, r3
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	461a      	mov	r2, r3
 8003b3c:	f04f 0300 	mov.w	r3, #0
 8003b40:	f7fc ff2c 	bl	800099c <__aeabi_uldivmod>
 8003b44:	4602      	mov	r2, r0
 8003b46:	460b      	mov	r3, r1
 8003b48:	4613      	mov	r3, r2
 8003b4a:	61fb      	str	r3, [r7, #28]
 8003b4c:	e04a      	b.n	8003be4 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b4e:	4b30      	ldr	r3, [pc, #192]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003b50:	685b      	ldr	r3, [r3, #4]
 8003b52:	099b      	lsrs	r3, r3, #6
 8003b54:	461a      	mov	r2, r3
 8003b56:	f04f 0300 	mov.w	r3, #0
 8003b5a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003b5e:	f04f 0100 	mov.w	r1, #0
 8003b62:	ea02 0400 	and.w	r4, r2, r0
 8003b66:	ea03 0501 	and.w	r5, r3, r1
 8003b6a:	4620      	mov	r0, r4
 8003b6c:	4629      	mov	r1, r5
 8003b6e:	f04f 0200 	mov.w	r2, #0
 8003b72:	f04f 0300 	mov.w	r3, #0
 8003b76:	014b      	lsls	r3, r1, #5
 8003b78:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b7c:	0142      	lsls	r2, r0, #5
 8003b7e:	4610      	mov	r0, r2
 8003b80:	4619      	mov	r1, r3
 8003b82:	1b00      	subs	r0, r0, r4
 8003b84:	eb61 0105 	sbc.w	r1, r1, r5
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	f04f 0300 	mov.w	r3, #0
 8003b90:	018b      	lsls	r3, r1, #6
 8003b92:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b96:	0182      	lsls	r2, r0, #6
 8003b98:	1a12      	subs	r2, r2, r0
 8003b9a:	eb63 0301 	sbc.w	r3, r3, r1
 8003b9e:	f04f 0000 	mov.w	r0, #0
 8003ba2:	f04f 0100 	mov.w	r1, #0
 8003ba6:	00d9      	lsls	r1, r3, #3
 8003ba8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003bac:	00d0      	lsls	r0, r2, #3
 8003bae:	4602      	mov	r2, r0
 8003bb0:	460b      	mov	r3, r1
 8003bb2:	1912      	adds	r2, r2, r4
 8003bb4:	eb45 0303 	adc.w	r3, r5, r3
 8003bb8:	f04f 0000 	mov.w	r0, #0
 8003bbc:	f04f 0100 	mov.w	r1, #0
 8003bc0:	0299      	lsls	r1, r3, #10
 8003bc2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003bc6:	0290      	lsls	r0, r2, #10
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f04f 0300 	mov.w	r3, #0
 8003bd8:	f7fc fee0 	bl	800099c <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4613      	mov	r3, r2
 8003be2:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003be4:	4b0a      	ldr	r3, [pc, #40]	; (8003c10 <HAL_RCC_GetSysClockFreq+0x358>)
 8003be6:	685b      	ldr	r3, [r3, #4]
 8003be8:	0f1b      	lsrs	r3, r3, #28
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf8:	61bb      	str	r3, [r7, #24]
      break;
 8003bfa:	e002      	b.n	8003c02 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003bfc:	4b05      	ldr	r3, [pc, #20]	; (8003c14 <HAL_RCC_GetSysClockFreq+0x35c>)
 8003bfe:	61bb      	str	r3, [r7, #24]
      break;
 8003c00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c02:	69bb      	ldr	r3, [r7, #24]
}
 8003c04:	4618      	mov	r0, r3
 8003c06:	3720      	adds	r7, #32
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003c0e:	bf00      	nop
 8003c10:	40023800 	.word	0x40023800
 8003c14:	00f42400 	.word	0x00f42400
 8003c18:	007a1200 	.word	0x007a1200

08003c1c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b086      	sub	sp, #24
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e28d      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	f000 8083 	beq.w	8003d42 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c3c:	4b94      	ldr	r3, [pc, #592]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003c3e:	689b      	ldr	r3, [r3, #8]
 8003c40:	f003 030c 	and.w	r3, r3, #12
 8003c44:	2b04      	cmp	r3, #4
 8003c46:	d019      	beq.n	8003c7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c48:	4b91      	ldr	r3, [pc, #580]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003c4a:	689b      	ldr	r3, [r3, #8]
 8003c4c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003c50:	2b08      	cmp	r3, #8
 8003c52:	d106      	bne.n	8003c62 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c54:	4b8e      	ldr	r3, [pc, #568]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c5c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c60:	d00c      	beq.n	8003c7c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c62:	4b8b      	ldr	r3, [pc, #556]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003c64:	689b      	ldr	r3, [r3, #8]
 8003c66:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003c6a:	2b0c      	cmp	r3, #12
 8003c6c:	d112      	bne.n	8003c94 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003c6e:	4b88      	ldr	r3, [pc, #544]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c7a:	d10b      	bne.n	8003c94 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c7c:	4b84      	ldr	r3, [pc, #528]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d05b      	beq.n	8003d40 <HAL_RCC_OscConfig+0x124>
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d157      	bne.n	8003d40 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e25a      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c9c:	d106      	bne.n	8003cac <HAL_RCC_OscConfig+0x90>
 8003c9e:	4b7c      	ldr	r3, [pc, #496]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	4a7b      	ldr	r2, [pc, #492]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003ca4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ca8:	6013      	str	r3, [r2, #0]
 8003caa:	e01d      	b.n	8003ce8 <HAL_RCC_OscConfig+0xcc>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	685b      	ldr	r3, [r3, #4]
 8003cb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003cb4:	d10c      	bne.n	8003cd0 <HAL_RCC_OscConfig+0xb4>
 8003cb6:	4b76      	ldr	r3, [pc, #472]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	4a75      	ldr	r2, [pc, #468]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003cbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003cc0:	6013      	str	r3, [r2, #0]
 8003cc2:	4b73      	ldr	r3, [pc, #460]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a72      	ldr	r2, [pc, #456]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003cc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ccc:	6013      	str	r3, [r2, #0]
 8003cce:	e00b      	b.n	8003ce8 <HAL_RCC_OscConfig+0xcc>
 8003cd0:	4b6f      	ldr	r3, [pc, #444]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	4a6e      	ldr	r2, [pc, #440]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003cd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003cda:	6013      	str	r3, [r2, #0]
 8003cdc:	4b6c      	ldr	r3, [pc, #432]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4a6b      	ldr	r2, [pc, #428]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003ce2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ce6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d013      	beq.n	8003d18 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fe f9ca 	bl	8002088 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cf8:	f7fe f9c6 	bl	8002088 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b64      	cmp	r3, #100	; 0x64
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e21f      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d0a:	4b61      	ldr	r3, [pc, #388]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d0f0      	beq.n	8003cf8 <HAL_RCC_OscConfig+0xdc>
 8003d16:	e014      	b.n	8003d42 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d18:	f7fe f9b6 	bl	8002088 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d20:	f7fe f9b2 	bl	8002088 <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b64      	cmp	r3, #100	; 0x64
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e20b      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d32:	4b57      	ldr	r3, [pc, #348]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d1f0      	bne.n	8003d20 <HAL_RCC_OscConfig+0x104>
 8003d3e:	e000      	b.n	8003d42 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0302 	and.w	r3, r3, #2
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d06f      	beq.n	8003e2e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d4e:	4b50      	ldr	r3, [pc, #320]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003d50:	689b      	ldr	r3, [r3, #8]
 8003d52:	f003 030c 	and.w	r3, r3, #12
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d017      	beq.n	8003d8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d5a:	4b4d      	ldr	r3, [pc, #308]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003d5c:	689b      	ldr	r3, [r3, #8]
 8003d5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003d62:	2b08      	cmp	r3, #8
 8003d64:	d105      	bne.n	8003d72 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d66:	4b4a      	ldr	r3, [pc, #296]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00b      	beq.n	8003d8a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d72:	4b47      	ldr	r3, [pc, #284]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003d7a:	2b0c      	cmp	r3, #12
 8003d7c:	d11c      	bne.n	8003db8 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003d7e:	4b44      	ldr	r3, [pc, #272]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d116      	bne.n	8003db8 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	4b41      	ldr	r3, [pc, #260]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 0302 	and.w	r3, r3, #2
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d005      	beq.n	8003da2 <HAL_RCC_OscConfig+0x186>
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	2b01      	cmp	r3, #1
 8003d9c:	d001      	beq.n	8003da2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e1d3      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003da2:	4b3b      	ldr	r3, [pc, #236]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	00db      	lsls	r3, r3, #3
 8003db0:	4937      	ldr	r1, [pc, #220]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003db2:	4313      	orrs	r3, r2
 8003db4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003db6:	e03a      	b.n	8003e2e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d020      	beq.n	8003e02 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003dc0:	4b34      	ldr	r3, [pc, #208]	; (8003e94 <HAL_RCC_OscConfig+0x278>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc6:	f7fe f95f 	bl	8002088 <HAL_GetTick>
 8003dca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003dcc:	e008      	b.n	8003de0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003dce:	f7fe f95b 	bl	8002088 <HAL_GetTick>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	1ad3      	subs	r3, r2, r3
 8003dd8:	2b02      	cmp	r3, #2
 8003dda:	d901      	bls.n	8003de0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003ddc:	2303      	movs	r3, #3
 8003dde:	e1b4      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003de0:	4b2b      	ldr	r3, [pc, #172]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f003 0302 	and.w	r3, r3, #2
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d0f0      	beq.n	8003dce <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dec:	4b28      	ldr	r3, [pc, #160]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	691b      	ldr	r3, [r3, #16]
 8003df8:	00db      	lsls	r3, r3, #3
 8003dfa:	4925      	ldr	r1, [pc, #148]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	600b      	str	r3, [r1, #0]
 8003e00:	e015      	b.n	8003e2e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e02:	4b24      	ldr	r3, [pc, #144]	; (8003e94 <HAL_RCC_OscConfig+0x278>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e08:	f7fe f93e 	bl	8002088 <HAL_GetTick>
 8003e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e0e:	e008      	b.n	8003e22 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e10:	f7fe f93a 	bl	8002088 <HAL_GetTick>
 8003e14:	4602      	mov	r2, r0
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	1ad3      	subs	r3, r2, r3
 8003e1a:	2b02      	cmp	r3, #2
 8003e1c:	d901      	bls.n	8003e22 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e193      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e22:	4b1b      	ldr	r3, [pc, #108]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f003 0302 	and.w	r3, r3, #2
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d1f0      	bne.n	8003e10 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	f003 0308 	and.w	r3, r3, #8
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d036      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	695b      	ldr	r3, [r3, #20]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d016      	beq.n	8003e70 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e42:	4b15      	ldr	r3, [pc, #84]	; (8003e98 <HAL_RCC_OscConfig+0x27c>)
 8003e44:	2201      	movs	r2, #1
 8003e46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e48:	f7fe f91e 	bl	8002088 <HAL_GetTick>
 8003e4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e4e:	e008      	b.n	8003e62 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e50:	f7fe f91a 	bl	8002088 <HAL_GetTick>
 8003e54:	4602      	mov	r2, r0
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	1ad3      	subs	r3, r2, r3
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d901      	bls.n	8003e62 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003e5e:	2303      	movs	r3, #3
 8003e60:	e173      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e62:	4b0b      	ldr	r3, [pc, #44]	; (8003e90 <HAL_RCC_OscConfig+0x274>)
 8003e64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d0f0      	beq.n	8003e50 <HAL_RCC_OscConfig+0x234>
 8003e6e:	e01b      	b.n	8003ea8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e70:	4b09      	ldr	r3, [pc, #36]	; (8003e98 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	2200      	movs	r2, #0
 8003e74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e76:	f7fe f907 	bl	8002088 <HAL_GetTick>
 8003e7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e7c:	e00e      	b.n	8003e9c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e7e:	f7fe f903 	bl	8002088 <HAL_GetTick>
 8003e82:	4602      	mov	r2, r0
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	1ad3      	subs	r3, r2, r3
 8003e88:	2b02      	cmp	r3, #2
 8003e8a:	d907      	bls.n	8003e9c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003e8c:	2303      	movs	r3, #3
 8003e8e:	e15c      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
 8003e90:	40023800 	.word	0x40023800
 8003e94:	42470000 	.word	0x42470000
 8003e98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e9c:	4b8a      	ldr	r3, [pc, #552]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003e9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003ea0:	f003 0302 	and.w	r3, r3, #2
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d1ea      	bne.n	8003e7e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 0304 	and.w	r3, r3, #4
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	f000 8097 	beq.w	8003fe4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003eba:	4b83      	ldr	r3, [pc, #524]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d10f      	bne.n	8003ee6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ec6:	2300      	movs	r3, #0
 8003ec8:	60bb      	str	r3, [r7, #8]
 8003eca:	4b7f      	ldr	r3, [pc, #508]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a7e      	ldr	r2, [pc, #504]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003ed0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
 8003ed6:	4b7c      	ldr	r3, [pc, #496]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ede:	60bb      	str	r3, [r7, #8]
 8003ee0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ee6:	4b79      	ldr	r3, [pc, #484]	; (80040cc <HAL_RCC_OscConfig+0x4b0>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d118      	bne.n	8003f24 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003ef2:	4b76      	ldr	r3, [pc, #472]	; (80040cc <HAL_RCC_OscConfig+0x4b0>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4a75      	ldr	r2, [pc, #468]	; (80040cc <HAL_RCC_OscConfig+0x4b0>)
 8003ef8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003efc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003efe:	f7fe f8c3 	bl	8002088 <HAL_GetTick>
 8003f02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f04:	e008      	b.n	8003f18 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f06:	f7fe f8bf 	bl	8002088 <HAL_GetTick>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	693b      	ldr	r3, [r7, #16]
 8003f0e:	1ad3      	subs	r3, r2, r3
 8003f10:	2b02      	cmp	r3, #2
 8003f12:	d901      	bls.n	8003f18 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003f14:	2303      	movs	r3, #3
 8003f16:	e118      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f18:	4b6c      	ldr	r3, [pc, #432]	; (80040cc <HAL_RCC_OscConfig+0x4b0>)
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d0f0      	beq.n	8003f06 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d106      	bne.n	8003f3a <HAL_RCC_OscConfig+0x31e>
 8003f2c:	4b66      	ldr	r3, [pc, #408]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f30:	4a65      	ldr	r2, [pc, #404]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f32:	f043 0301 	orr.w	r3, r3, #1
 8003f36:	6713      	str	r3, [r2, #112]	; 0x70
 8003f38:	e01c      	b.n	8003f74 <HAL_RCC_OscConfig+0x358>
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689b      	ldr	r3, [r3, #8]
 8003f3e:	2b05      	cmp	r3, #5
 8003f40:	d10c      	bne.n	8003f5c <HAL_RCC_OscConfig+0x340>
 8003f42:	4b61      	ldr	r3, [pc, #388]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f46:	4a60      	ldr	r2, [pc, #384]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f48:	f043 0304 	orr.w	r3, r3, #4
 8003f4c:	6713      	str	r3, [r2, #112]	; 0x70
 8003f4e:	4b5e      	ldr	r3, [pc, #376]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f52:	4a5d      	ldr	r2, [pc, #372]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f54:	f043 0301 	orr.w	r3, r3, #1
 8003f58:	6713      	str	r3, [r2, #112]	; 0x70
 8003f5a:	e00b      	b.n	8003f74 <HAL_RCC_OscConfig+0x358>
 8003f5c:	4b5a      	ldr	r3, [pc, #360]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f60:	4a59      	ldr	r2, [pc, #356]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f62:	f023 0301 	bic.w	r3, r3, #1
 8003f66:	6713      	str	r3, [r2, #112]	; 0x70
 8003f68:	4b57      	ldr	r3, [pc, #348]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f6c:	4a56      	ldr	r2, [pc, #344]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f6e:	f023 0304 	bic.w	r3, r3, #4
 8003f72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	689b      	ldr	r3, [r3, #8]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d015      	beq.n	8003fa8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f7c:	f7fe f884 	bl	8002088 <HAL_GetTick>
 8003f80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f82:	e00a      	b.n	8003f9a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f84:	f7fe f880 	bl	8002088 <HAL_GetTick>
 8003f88:	4602      	mov	r2, r0
 8003f8a:	693b      	ldr	r3, [r7, #16]
 8003f8c:	1ad3      	subs	r3, r2, r3
 8003f8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d901      	bls.n	8003f9a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e0d7      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f9a:	4b4b      	ldr	r3, [pc, #300]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003f9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003f9e:	f003 0302 	and.w	r3, r3, #2
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d0ee      	beq.n	8003f84 <HAL_RCC_OscConfig+0x368>
 8003fa6:	e014      	b.n	8003fd2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa8:	f7fe f86e 	bl	8002088 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fae:	e00a      	b.n	8003fc6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003fb0:	f7fe f86a 	bl	8002088 <HAL_GetTick>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	1ad3      	subs	r3, r2, r3
 8003fba:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	d901      	bls.n	8003fc6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8003fc2:	2303      	movs	r3, #3
 8003fc4:	e0c1      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc6:	4b40      	ldr	r3, [pc, #256]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003fc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fca:	f003 0302 	and.w	r3, r3, #2
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d1ee      	bne.n	8003fb0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d105      	bne.n	8003fe4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd8:	4b3b      	ldr	r3, [pc, #236]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003fda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fdc:	4a3a      	ldr	r2, [pc, #232]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003fde:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fe2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	699b      	ldr	r3, [r3, #24]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	f000 80ad 	beq.w	8004148 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003fee:	4b36      	ldr	r3, [pc, #216]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8003ff0:	689b      	ldr	r3, [r3, #8]
 8003ff2:	f003 030c 	and.w	r3, r3, #12
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d060      	beq.n	80040bc <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	2b02      	cmp	r3, #2
 8004000:	d145      	bne.n	800408e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004002:	4b33      	ldr	r3, [pc, #204]	; (80040d0 <HAL_RCC_OscConfig+0x4b4>)
 8004004:	2200      	movs	r2, #0
 8004006:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004008:	f7fe f83e 	bl	8002088 <HAL_GetTick>
 800400c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800400e:	e008      	b.n	8004022 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004010:	f7fe f83a 	bl	8002088 <HAL_GetTick>
 8004014:	4602      	mov	r2, r0
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	1ad3      	subs	r3, r2, r3
 800401a:	2b02      	cmp	r3, #2
 800401c:	d901      	bls.n	8004022 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800401e:	2303      	movs	r3, #3
 8004020:	e093      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004022:	4b29      	ldr	r3, [pc, #164]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800402a:	2b00      	cmp	r3, #0
 800402c:	d1f0      	bne.n	8004010 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	69da      	ldr	r2, [r3, #28]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6a1b      	ldr	r3, [r3, #32]
 8004036:	431a      	orrs	r2, r3
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800403c:	019b      	lsls	r3, r3, #6
 800403e:	431a      	orrs	r2, r3
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004044:	085b      	lsrs	r3, r3, #1
 8004046:	3b01      	subs	r3, #1
 8004048:	041b      	lsls	r3, r3, #16
 800404a:	431a      	orrs	r2, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004050:	061b      	lsls	r3, r3, #24
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004058:	071b      	lsls	r3, r3, #28
 800405a:	491b      	ldr	r1, [pc, #108]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 800405c:	4313      	orrs	r3, r2
 800405e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004060:	4b1b      	ldr	r3, [pc, #108]	; (80040d0 <HAL_RCC_OscConfig+0x4b4>)
 8004062:	2201      	movs	r2, #1
 8004064:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004066:	f7fe f80f 	bl	8002088 <HAL_GetTick>
 800406a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800406c:	e008      	b.n	8004080 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800406e:	f7fe f80b 	bl	8002088 <HAL_GetTick>
 8004072:	4602      	mov	r2, r0
 8004074:	693b      	ldr	r3, [r7, #16]
 8004076:	1ad3      	subs	r3, r2, r3
 8004078:	2b02      	cmp	r3, #2
 800407a:	d901      	bls.n	8004080 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800407c:	2303      	movs	r3, #3
 800407e:	e064      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004080:	4b11      	ldr	r3, [pc, #68]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004088:	2b00      	cmp	r3, #0
 800408a:	d0f0      	beq.n	800406e <HAL_RCC_OscConfig+0x452>
 800408c:	e05c      	b.n	8004148 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408e:	4b10      	ldr	r3, [pc, #64]	; (80040d0 <HAL_RCC_OscConfig+0x4b4>)
 8004090:	2200      	movs	r2, #0
 8004092:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004094:	f7fd fff8 	bl	8002088 <HAL_GetTick>
 8004098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800409a:	e008      	b.n	80040ae <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800409c:	f7fd fff4 	bl	8002088 <HAL_GetTick>
 80040a0:	4602      	mov	r2, r0
 80040a2:	693b      	ldr	r3, [r7, #16]
 80040a4:	1ad3      	subs	r3, r2, r3
 80040a6:	2b02      	cmp	r3, #2
 80040a8:	d901      	bls.n	80040ae <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80040aa:	2303      	movs	r3, #3
 80040ac:	e04d      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ae:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <HAL_RCC_OscConfig+0x4ac>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d1f0      	bne.n	800409c <HAL_RCC_OscConfig+0x480>
 80040ba:	e045      	b.n	8004148 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b01      	cmp	r3, #1
 80040c2:	d107      	bne.n	80040d4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80040c4:	2301      	movs	r3, #1
 80040c6:	e040      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
 80040c8:	40023800 	.word	0x40023800
 80040cc:	40007000 	.word	0x40007000
 80040d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80040d4:	4b1f      	ldr	r3, [pc, #124]	; (8004154 <HAL_RCC_OscConfig+0x538>)
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d030      	beq.n	8004144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80040ec:	429a      	cmp	r2, r3
 80040ee:	d129      	bne.n	8004144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040fa:	429a      	cmp	r2, r3
 80040fc:	d122      	bne.n	8004144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80040fe:	68fa      	ldr	r2, [r7, #12]
 8004100:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004104:	4013      	ands	r3, r2
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800410a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800410c:	4293      	cmp	r3, r2
 800410e:	d119      	bne.n	8004144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411a:	085b      	lsrs	r3, r3, #1
 800411c:	3b01      	subs	r3, #1
 800411e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004120:	429a      	cmp	r2, r3
 8004122:	d10f      	bne.n	8004144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004130:	429a      	cmp	r2, r3
 8004132:	d107      	bne.n	8004144 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800413e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e000      	b.n	800414a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004148:	2300      	movs	r3, #0
}
 800414a:	4618      	mov	r0, r3
 800414c:	3718      	adds	r7, #24
 800414e:	46bd      	mov	sp, r7
 8004150:	bd80      	pop	{r7, pc}
 8004152:	bf00      	nop
 8004154:	40023800 	.word	0x40023800

08004158 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d101      	bne.n	800416a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e041      	b.n	80041ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004170:	b2db      	uxtb	r3, r3
 8004172:	2b00      	cmp	r3, #0
 8004174:	d106      	bne.n	8004184 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800417e:	6878      	ldr	r0, [r7, #4]
 8004180:	f7fd fd00 	bl	8001b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2202      	movs	r2, #2
 8004188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681a      	ldr	r2, [r3, #0]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	3304      	adds	r3, #4
 8004194:	4619      	mov	r1, r3
 8004196:	4610      	mov	r0, r2
 8004198:	f001 f8a2 	bl	80052e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2201      	movs	r2, #1
 80041a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2201      	movs	r2, #1
 80041b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2201      	movs	r2, #1
 80041b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2201      	movs	r2, #1
 80041c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041ec:	2300      	movs	r3, #0
}
 80041ee:	4618      	mov	r0, r3
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
	...

080041f8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b085      	sub	sp, #20
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004206:	b2db      	uxtb	r3, r3
 8004208:	2b01      	cmp	r3, #1
 800420a:	d001      	beq.n	8004210 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800420c:	2301      	movs	r3, #1
 800420e:	e046      	b.n	800429e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2202      	movs	r2, #2
 8004214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	4a23      	ldr	r2, [pc, #140]	; (80042ac <HAL_TIM_Base_Start+0xb4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d022      	beq.n	8004268 <HAL_TIM_Base_Start+0x70>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800422a:	d01d      	beq.n	8004268 <HAL_TIM_Base_Start+0x70>
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a1f      	ldr	r2, [pc, #124]	; (80042b0 <HAL_TIM_Base_Start+0xb8>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d018      	beq.n	8004268 <HAL_TIM_Base_Start+0x70>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1e      	ldr	r2, [pc, #120]	; (80042b4 <HAL_TIM_Base_Start+0xbc>)
 800423c:	4293      	cmp	r3, r2
 800423e:	d013      	beq.n	8004268 <HAL_TIM_Base_Start+0x70>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a1c      	ldr	r2, [pc, #112]	; (80042b8 <HAL_TIM_Base_Start+0xc0>)
 8004246:	4293      	cmp	r3, r2
 8004248:	d00e      	beq.n	8004268 <HAL_TIM_Base_Start+0x70>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	4a1b      	ldr	r2, [pc, #108]	; (80042bc <HAL_TIM_Base_Start+0xc4>)
 8004250:	4293      	cmp	r3, r2
 8004252:	d009      	beq.n	8004268 <HAL_TIM_Base_Start+0x70>
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a19      	ldr	r2, [pc, #100]	; (80042c0 <HAL_TIM_Base_Start+0xc8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d004      	beq.n	8004268 <HAL_TIM_Base_Start+0x70>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	4a18      	ldr	r2, [pc, #96]	; (80042c4 <HAL_TIM_Base_Start+0xcc>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d111      	bne.n	800428c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	f003 0307 	and.w	r3, r3, #7
 8004272:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2b06      	cmp	r3, #6
 8004278:	d010      	beq.n	800429c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f042 0201 	orr.w	r2, r2, #1
 8004288:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800428a:	e007      	b.n	800429c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	681a      	ldr	r2, [r3, #0]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f042 0201 	orr.w	r2, r2, #1
 800429a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3714      	adds	r7, #20
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	40010000 	.word	0x40010000
 80042b0:	40000400 	.word	0x40000400
 80042b4:	40000800 	.word	0x40000800
 80042b8:	40000c00 	.word	0x40000c00
 80042bc:	40010400 	.word	0x40010400
 80042c0:	40014000 	.word	0x40014000
 80042c4:	40001800 	.word	0x40001800

080042c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042d6:	b2db      	uxtb	r3, r3
 80042d8:	2b01      	cmp	r3, #1
 80042da:	d001      	beq.n	80042e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042dc:	2301      	movs	r3, #1
 80042de:	e04e      	b.n	800437e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2202      	movs	r2, #2
 80042e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68da      	ldr	r2, [r3, #12]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f042 0201 	orr.w	r2, r2, #1
 80042f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a23      	ldr	r2, [pc, #140]	; (800438c <HAL_TIM_Base_Start_IT+0xc4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d022      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0x80>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800430a:	d01d      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0x80>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a1f      	ldr	r2, [pc, #124]	; (8004390 <HAL_TIM_Base_Start_IT+0xc8>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d018      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0x80>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a1e      	ldr	r2, [pc, #120]	; (8004394 <HAL_TIM_Base_Start_IT+0xcc>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d013      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0x80>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	4a1c      	ldr	r2, [pc, #112]	; (8004398 <HAL_TIM_Base_Start_IT+0xd0>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d00e      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0x80>
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4a1b      	ldr	r2, [pc, #108]	; (800439c <HAL_TIM_Base_Start_IT+0xd4>)
 8004330:	4293      	cmp	r3, r2
 8004332:	d009      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0x80>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4a19      	ldr	r2, [pc, #100]	; (80043a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d004      	beq.n	8004348 <HAL_TIM_Base_Start_IT+0x80>
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	4a18      	ldr	r2, [pc, #96]	; (80043a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d111      	bne.n	800436c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 0307 	and.w	r3, r3, #7
 8004352:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	2b06      	cmp	r3, #6
 8004358:	d010      	beq.n	800437c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681a      	ldr	r2, [r3, #0]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f042 0201 	orr.w	r2, r2, #1
 8004368:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800436a:	e007      	b.n	800437c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	681a      	ldr	r2, [r3, #0]
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f042 0201 	orr.w	r2, r2, #1
 800437a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800437c:	2300      	movs	r3, #0
}
 800437e:	4618      	mov	r0, r3
 8004380:	3714      	adds	r7, #20
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40010000 	.word	0x40010000
 8004390:	40000400 	.word	0x40000400
 8004394:	40000800 	.word	0x40000800
 8004398:	40000c00 	.word	0x40000c00
 800439c:	40010400 	.word	0x40010400
 80043a0:	40014000 	.word	0x40014000
 80043a4:	40001800 	.word	0x40001800

080043a8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043a8:	b580      	push	{r7, lr}
 80043aa:	b082      	sub	sp, #8
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043b6:	2301      	movs	r3, #1
 80043b8:	e041      	b.n	800443e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c0:	b2db      	uxtb	r3, r3
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d106      	bne.n	80043d4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 f839 	bl	8004446 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2202      	movs	r2, #2
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681a      	ldr	r2, [r3, #0]
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	3304      	adds	r3, #4
 80043e4:	4619      	mov	r1, r3
 80043e6:	4610      	mov	r0, r2
 80043e8:	f000 ff7a 	bl	80052e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2201      	movs	r2, #1
 80043f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800443c:	2300      	movs	r3, #0
}
 800443e:	4618      	mov	r0, r3
 8004440:	3708      	adds	r7, #8
 8004442:	46bd      	mov	sp, r7
 8004444:	bd80      	pop	{r7, pc}

08004446 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004446:	b480      	push	{r7}
 8004448:	b083      	sub	sp, #12
 800444a:	af00      	add	r7, sp, #0
 800444c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800444e:	bf00      	nop
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
	...

0800445c <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800445c:	b580      	push	{r7, lr}
 800445e:	b084      	sub	sp, #16
 8004460:	af00      	add	r7, sp, #0
 8004462:	6078      	str	r0, [r7, #4]
 8004464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d109      	bne.n	8004480 <HAL_TIM_PWM_Start_IT+0x24>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004472:	b2db      	uxtb	r3, r3
 8004474:	2b01      	cmp	r3, #1
 8004476:	bf14      	ite	ne
 8004478:	2301      	movne	r3, #1
 800447a:	2300      	moveq	r3, #0
 800447c:	b2db      	uxtb	r3, r3
 800447e:	e022      	b.n	80044c6 <HAL_TIM_PWM_Start_IT+0x6a>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b04      	cmp	r3, #4
 8004484:	d109      	bne.n	800449a <HAL_TIM_PWM_Start_IT+0x3e>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b01      	cmp	r3, #1
 8004490:	bf14      	ite	ne
 8004492:	2301      	movne	r3, #1
 8004494:	2300      	moveq	r3, #0
 8004496:	b2db      	uxtb	r3, r3
 8004498:	e015      	b.n	80044c6 <HAL_TIM_PWM_Start_IT+0x6a>
 800449a:	683b      	ldr	r3, [r7, #0]
 800449c:	2b08      	cmp	r3, #8
 800449e:	d109      	bne.n	80044b4 <HAL_TIM_PWM_Start_IT+0x58>
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	bf14      	ite	ne
 80044ac:	2301      	movne	r3, #1
 80044ae:	2300      	moveq	r3, #0
 80044b0:	b2db      	uxtb	r3, r3
 80044b2:	e008      	b.n	80044c6 <HAL_TIM_PWM_Start_IT+0x6a>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	2b01      	cmp	r3, #1
 80044be:	bf14      	ite	ne
 80044c0:	2301      	movne	r3, #1
 80044c2:	2300      	moveq	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d001      	beq.n	80044ce <HAL_TIM_PWM_Start_IT+0x72>
  {
    return HAL_ERROR;
 80044ca:	2301      	movs	r3, #1
 80044cc:	e0c2      	b.n	8004654 <HAL_TIM_PWM_Start_IT+0x1f8>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d104      	bne.n	80044de <HAL_TIM_PWM_Start_IT+0x82>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	2202      	movs	r2, #2
 80044d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044dc:	e013      	b.n	8004506 <HAL_TIM_PWM_Start_IT+0xaa>
 80044de:	683b      	ldr	r3, [r7, #0]
 80044e0:	2b04      	cmp	r3, #4
 80044e2:	d104      	bne.n	80044ee <HAL_TIM_PWM_Start_IT+0x92>
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2202      	movs	r2, #2
 80044e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ec:	e00b      	b.n	8004506 <HAL_TIM_PWM_Start_IT+0xaa>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b08      	cmp	r3, #8
 80044f2:	d104      	bne.n	80044fe <HAL_TIM_PWM_Start_IT+0xa2>
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2202      	movs	r2, #2
 80044f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044fc:	e003      	b.n	8004506 <HAL_TIM_PWM_Start_IT+0xaa>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	2202      	movs	r2, #2
 8004502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b0c      	cmp	r3, #12
 800450a:	d841      	bhi.n	8004590 <HAL_TIM_PWM_Start_IT+0x134>
 800450c:	a201      	add	r2, pc, #4	; (adr r2, 8004514 <HAL_TIM_PWM_Start_IT+0xb8>)
 800450e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004512:	bf00      	nop
 8004514:	08004549 	.word	0x08004549
 8004518:	08004591 	.word	0x08004591
 800451c:	08004591 	.word	0x08004591
 8004520:	08004591 	.word	0x08004591
 8004524:	0800455b 	.word	0x0800455b
 8004528:	08004591 	.word	0x08004591
 800452c:	08004591 	.word	0x08004591
 8004530:	08004591 	.word	0x08004591
 8004534:	0800456d 	.word	0x0800456d
 8004538:	08004591 	.word	0x08004591
 800453c:	08004591 	.word	0x08004591
 8004540:	08004591 	.word	0x08004591
 8004544:	0800457f 	.word	0x0800457f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68da      	ldr	r2, [r3, #12]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f042 0202 	orr.w	r2, r2, #2
 8004556:	60da      	str	r2, [r3, #12]
      break;
 8004558:	e01b      	b.n	8004592 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	68da      	ldr	r2, [r3, #12]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f042 0204 	orr.w	r2, r2, #4
 8004568:	60da      	str	r2, [r3, #12]
      break;
 800456a:	e012      	b.n	8004592 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	68da      	ldr	r2, [r3, #12]
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	f042 0208 	orr.w	r2, r2, #8
 800457a:	60da      	str	r2, [r3, #12]
      break;
 800457c:	e009      	b.n	8004592 <HAL_TIM_PWM_Start_IT+0x136>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68da      	ldr	r2, [r3, #12]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f042 0210 	orr.w	r2, r2, #16
 800458c:	60da      	str	r2, [r3, #12]
      break;
 800458e:	e000      	b.n	8004592 <HAL_TIM_PWM_Start_IT+0x136>
    }

    default:
      break;
 8004590:	bf00      	nop
  }

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	2201      	movs	r2, #1
 8004598:	6839      	ldr	r1, [r7, #0]
 800459a:	4618      	mov	r0, r3
 800459c:	f001 fab4 	bl	8005b08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4a2d      	ldr	r2, [pc, #180]	; (800465c <HAL_TIM_PWM_Start_IT+0x200>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d004      	beq.n	80045b4 <HAL_TIM_PWM_Start_IT+0x158>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	4a2c      	ldr	r2, [pc, #176]	; (8004660 <HAL_TIM_PWM_Start_IT+0x204>)
 80045b0:	4293      	cmp	r3, r2
 80045b2:	d101      	bne.n	80045b8 <HAL_TIM_PWM_Start_IT+0x15c>
 80045b4:	2301      	movs	r3, #1
 80045b6:	e000      	b.n	80045ba <HAL_TIM_PWM_Start_IT+0x15e>
 80045b8:	2300      	movs	r3, #0
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d007      	beq.n	80045ce <HAL_TIM_PWM_Start_IT+0x172>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80045cc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4a22      	ldr	r2, [pc, #136]	; (800465c <HAL_TIM_PWM_Start_IT+0x200>)
 80045d4:	4293      	cmp	r3, r2
 80045d6:	d022      	beq.n	800461e <HAL_TIM_PWM_Start_IT+0x1c2>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80045e0:	d01d      	beq.n	800461e <HAL_TIM_PWM_Start_IT+0x1c2>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	4a1f      	ldr	r2, [pc, #124]	; (8004664 <HAL_TIM_PWM_Start_IT+0x208>)
 80045e8:	4293      	cmp	r3, r2
 80045ea:	d018      	beq.n	800461e <HAL_TIM_PWM_Start_IT+0x1c2>
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	4a1d      	ldr	r2, [pc, #116]	; (8004668 <HAL_TIM_PWM_Start_IT+0x20c>)
 80045f2:	4293      	cmp	r3, r2
 80045f4:	d013      	beq.n	800461e <HAL_TIM_PWM_Start_IT+0x1c2>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4a1c      	ldr	r2, [pc, #112]	; (800466c <HAL_TIM_PWM_Start_IT+0x210>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d00e      	beq.n	800461e <HAL_TIM_PWM_Start_IT+0x1c2>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	4a16      	ldr	r2, [pc, #88]	; (8004660 <HAL_TIM_PWM_Start_IT+0x204>)
 8004606:	4293      	cmp	r3, r2
 8004608:	d009      	beq.n	800461e <HAL_TIM_PWM_Start_IT+0x1c2>
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	4a18      	ldr	r2, [pc, #96]	; (8004670 <HAL_TIM_PWM_Start_IT+0x214>)
 8004610:	4293      	cmp	r3, r2
 8004612:	d004      	beq.n	800461e <HAL_TIM_PWM_Start_IT+0x1c2>
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	4a16      	ldr	r2, [pc, #88]	; (8004674 <HAL_TIM_PWM_Start_IT+0x218>)
 800461a:	4293      	cmp	r3, r2
 800461c:	d111      	bne.n	8004642 <HAL_TIM_PWM_Start_IT+0x1e6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	f003 0307 	and.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	2b06      	cmp	r3, #6
 800462e:	d010      	beq.n	8004652 <HAL_TIM_PWM_Start_IT+0x1f6>
    {
      __HAL_TIM_ENABLE(htim);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0201 	orr.w	r2, r2, #1
 800463e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004640:	e007      	b.n	8004652 <HAL_TIM_PWM_Start_IT+0x1f6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681a      	ldr	r2, [r3, #0]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f042 0201 	orr.w	r2, r2, #1
 8004650:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004652:	2300      	movs	r3, #0
}
 8004654:	4618      	mov	r0, r3
 8004656:	3710      	adds	r7, #16
 8004658:	46bd      	mov	sp, r7
 800465a:	bd80      	pop	{r7, pc}
 800465c:	40010000 	.word	0x40010000
 8004660:	40010400 	.word	0x40010400
 8004664:	40000400 	.word	0x40000400
 8004668:	40000800 	.word	0x40000800
 800466c:	40000c00 	.word	0x40000c00
 8004670:	40014000 	.word	0x40014000
 8004674:	40001800 	.word	0x40001800

08004678 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004678:	b580      	push	{r7, lr}
 800467a:	b082      	sub	sp, #8
 800467c:	af00      	add	r7, sp, #0
 800467e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d101      	bne.n	800468a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004686:	2301      	movs	r3, #1
 8004688:	e041      	b.n	800470e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004690:	b2db      	uxtb	r3, r3
 8004692:	2b00      	cmp	r3, #0
 8004694:	d106      	bne.n	80046a4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	2200      	movs	r2, #0
 800469a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800469e:	6878      	ldr	r0, [r7, #4]
 80046a0:	f000 f839 	bl	8004716 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2202      	movs	r2, #2
 80046a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681a      	ldr	r2, [r3, #0]
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	3304      	adds	r3, #4
 80046b4:	4619      	mov	r1, r3
 80046b6:	4610      	mov	r0, r2
 80046b8:	f000 fe12 	bl	80052e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2201      	movs	r2, #1
 80046c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	2201      	movs	r2, #1
 80046c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2201      	movs	r2, #1
 80046d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2201      	movs	r2, #1
 80046d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2201      	movs	r2, #1
 80046e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2201      	movs	r2, #1
 80046e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	2201      	movs	r2, #1
 80046f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	2201      	movs	r2, #1
 80046f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	2201      	movs	r2, #1
 8004700:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2201      	movs	r2, #1
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800470c:	2300      	movs	r3, #0
}
 800470e:	4618      	mov	r0, r3
 8004710:	3708      	adds	r7, #8
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}

08004716 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004716:	b480      	push	{r7}
 8004718:	b083      	sub	sp, #12
 800471a:	af00      	add	r7, sp, #0
 800471c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800471e:	bf00      	nop
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
	...

0800472c <HAL_TIM_IC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from TIM peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_DMA(TIM_HandleTypeDef *htim, uint32_t Channel, uint32_t *pData, uint16_t Length)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b086      	sub	sp, #24
 8004730:	af00      	add	r7, sp, #0
 8004732:	60f8      	str	r0, [r7, #12]
 8004734:	60b9      	str	r1, [r7, #8]
 8004736:	607a      	str	r2, [r7, #4]
 8004738:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d104      	bne.n	800474a <HAL_TIM_IC_Start_DMA+0x1e>
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004746:	b2db      	uxtb	r3, r3
 8004748:	e013      	b.n	8004772 <HAL_TIM_IC_Start_DMA+0x46>
 800474a:	68bb      	ldr	r3, [r7, #8]
 800474c:	2b04      	cmp	r3, #4
 800474e:	d104      	bne.n	800475a <HAL_TIM_IC_Start_DMA+0x2e>
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004756:	b2db      	uxtb	r3, r3
 8004758:	e00b      	b.n	8004772 <HAL_TIM_IC_Start_DMA+0x46>
 800475a:	68bb      	ldr	r3, [r7, #8]
 800475c:	2b08      	cmp	r3, #8
 800475e:	d104      	bne.n	800476a <HAL_TIM_IC_Start_DMA+0x3e>
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004766:	b2db      	uxtb	r3, r3
 8004768:	e003      	b.n	8004772 <HAL_TIM_IC_Start_DMA+0x46>
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004770:	b2db      	uxtb	r3, r3
 8004772:	75fb      	strb	r3, [r7, #23]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d104      	bne.n	8004784 <HAL_TIM_IC_Start_DMA+0x58>
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004780:	b2db      	uxtb	r3, r3
 8004782:	e013      	b.n	80047ac <HAL_TIM_IC_Start_DMA+0x80>
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	2b04      	cmp	r3, #4
 8004788:	d104      	bne.n	8004794 <HAL_TIM_IC_Start_DMA+0x68>
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004790:	b2db      	uxtb	r3, r3
 8004792:	e00b      	b.n	80047ac <HAL_TIM_IC_Start_DMA+0x80>
 8004794:	68bb      	ldr	r3, [r7, #8]
 8004796:	2b08      	cmp	r3, #8
 8004798:	d104      	bne.n	80047a4 <HAL_TIM_IC_Start_DMA+0x78>
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047a0:	b2db      	uxtb	r3, r3
 80047a2:	e003      	b.n	80047ac <HAL_TIM_IC_Start_DMA+0x80>
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80047aa:	b2db      	uxtb	r3, r3
 80047ac:	75bb      	strb	r3, [r7, #22]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));
  assert_param(IS_TIM_DMA_CC_INSTANCE(htim->Instance));

  /* Set the TIM channel state */
  if ((channel_state == HAL_TIM_CHANNEL_STATE_BUSY)
 80047ae:	7dfb      	ldrb	r3, [r7, #23]
 80047b0:	2b02      	cmp	r3, #2
 80047b2:	d002      	beq.n	80047ba <HAL_TIM_IC_Start_DMA+0x8e>
      || (complementary_channel_state == HAL_TIM_CHANNEL_STATE_BUSY))
 80047b4:	7dbb      	ldrb	r3, [r7, #22]
 80047b6:	2b02      	cmp	r3, #2
 80047b8:	d101      	bne.n	80047be <HAL_TIM_IC_Start_DMA+0x92>
  {
    return HAL_BUSY;
 80047ba:	2302      	movs	r3, #2
 80047bc:	e145      	b.n	8004a4a <HAL_TIM_IC_Start_DMA+0x31e>
  }
  else if ((channel_state == HAL_TIM_CHANNEL_STATE_READY)
 80047be:	7dfb      	ldrb	r3, [r7, #23]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d143      	bne.n	800484c <HAL_TIM_IC_Start_DMA+0x120>
           && (complementary_channel_state == HAL_TIM_CHANNEL_STATE_READY))
 80047c4:	7dbb      	ldrb	r3, [r7, #22]
 80047c6:	2b01      	cmp	r3, #1
 80047c8:	d140      	bne.n	800484c <HAL_TIM_IC_Start_DMA+0x120>
  {
    if ((pData == NULL) && (Length > 0U))
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d104      	bne.n	80047da <HAL_TIM_IC_Start_DMA+0xae>
 80047d0:	887b      	ldrh	r3, [r7, #2]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d001      	beq.n	80047da <HAL_TIM_IC_Start_DMA+0xae>
    {
      return HAL_ERROR;
 80047d6:	2301      	movs	r3, #1
 80047d8:	e137      	b.n	8004a4a <HAL_TIM_IC_Start_DMA+0x31e>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d104      	bne.n	80047ea <HAL_TIM_IC_Start_DMA+0xbe>
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2202      	movs	r2, #2
 80047e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80047e8:	e013      	b.n	8004812 <HAL_TIM_IC_Start_DMA+0xe6>
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	2b04      	cmp	r3, #4
 80047ee:	d104      	bne.n	80047fa <HAL_TIM_IC_Start_DMA+0xce>
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	2202      	movs	r2, #2
 80047f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80047f8:	e00b      	b.n	8004812 <HAL_TIM_IC_Start_DMA+0xe6>
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	2b08      	cmp	r3, #8
 80047fe:	d104      	bne.n	800480a <HAL_TIM_IC_Start_DMA+0xde>
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	2202      	movs	r2, #2
 8004804:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004808:	e003      	b.n	8004812 <HAL_TIM_IC_Start_DMA+0xe6>
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	2202      	movs	r2, #2
 800480e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d104      	bne.n	8004822 <HAL_TIM_IC_Start_DMA+0xf6>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2202      	movs	r2, #2
 800481c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    if ((pData == NULL) && (Length > 0U))
 8004820:	e016      	b.n	8004850 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b04      	cmp	r3, #4
 8004826:	d104      	bne.n	8004832 <HAL_TIM_IC_Start_DMA+0x106>
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	2202      	movs	r2, #2
 800482c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    if ((pData == NULL) && (Length > 0U))
 8004830:	e00e      	b.n	8004850 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004832:	68bb      	ldr	r3, [r7, #8]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d104      	bne.n	8004842 <HAL_TIM_IC_Start_DMA+0x116>
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	2202      	movs	r2, #2
 800483c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
    if ((pData == NULL) && (Length > 0U))
 8004840:	e006      	b.n	8004850 <HAL_TIM_IC_Start_DMA+0x124>
      TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	2202      	movs	r2, #2
 8004846:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    if ((pData == NULL) && (Length > 0U))
 800484a:	e001      	b.n	8004850 <HAL_TIM_IC_Start_DMA+0x124>
    }
  }
  else
  {
    return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0fc      	b.n	8004a4a <HAL_TIM_IC_Start_DMA+0x31e>
 8004850:	68bb      	ldr	r3, [r7, #8]
 8004852:	2b0c      	cmp	r3, #12
 8004854:	f200 80ae 	bhi.w	80049b4 <HAL_TIM_IC_Start_DMA+0x288>
 8004858:	a201      	add	r2, pc, #4	; (adr r2, 8004860 <HAL_TIM_IC_Start_DMA+0x134>)
 800485a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800485e:	bf00      	nop
 8004860:	08004895 	.word	0x08004895
 8004864:	080049b5 	.word	0x080049b5
 8004868:	080049b5 	.word	0x080049b5
 800486c:	080049b5 	.word	0x080049b5
 8004870:	080048dd 	.word	0x080048dd
 8004874:	080049b5 	.word	0x080049b5
 8004878:	080049b5 	.word	0x080049b5
 800487c:	080049b5 	.word	0x080049b5
 8004880:	08004925 	.word	0x08004925
 8004884:	080049b5 	.word	0x080049b5
 8004888:	080049b5 	.word	0x080049b5
 800488c:	080049b5 	.word	0x080049b5
 8004890:	0800496d 	.word	0x0800496d
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC1]->XferCpltCallback = TIM_DMACaptureCplt;
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004898:	4a6e      	ldr	r2, [pc, #440]	; (8004a54 <HAL_TIM_IC_Start_DMA+0x328>)
 800489a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC1]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a0:	4a6d      	ldr	r2, [pc, #436]	; (8004a58 <HAL_TIM_IC_Start_DMA+0x32c>)
 80048a2:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC1]->XferErrorCallback = TIM_DMAError ;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048a8:	4a6c      	ldr	r2, [pc, #432]	; (8004a5c <HAL_TIM_IC_Start_DMA+0x330>)
 80048aa:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC1], (uint32_t)&htim->Instance->CCR1, (uint32_t)pData, Length) != HAL_OK)
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	3334      	adds	r3, #52	; 0x34
 80048b6:	4619      	mov	r1, r3
 80048b8:	687a      	ldr	r2, [r7, #4]
 80048ba:	887b      	ldrh	r3, [r7, #2]
 80048bc:	f7fe f9c8 	bl	8002c50 <HAL_DMA_Start_IT>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d001      	beq.n	80048ca <HAL_TIM_IC_Start_DMA+0x19e>
      {
        /* Return error status */
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e0bf      	b.n	8004a4a <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC1);
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	68da      	ldr	r2, [r3, #12]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048d8:	60da      	str	r2, [r3, #12]
      break;
 80048da:	e06c      	b.n	80049b6 <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_2:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC2]->XferCpltCallback = TIM_DMACaptureCplt;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e0:	4a5c      	ldr	r2, [pc, #368]	; (8004a54 <HAL_TIM_IC_Start_DMA+0x328>)
 80048e2:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC2]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e8:	4a5b      	ldr	r2, [pc, #364]	; (8004a58 <HAL_TIM_IC_Start_DMA+0x32c>)
 80048ea:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC2]->XferErrorCallback = TIM_DMAError ;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048f0:	4a5a      	ldr	r2, [pc, #360]	; (8004a5c <HAL_TIM_IC_Start_DMA+0x330>)
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC2], (uint32_t)&htim->Instance->CCR2, (uint32_t)pData, Length) != HAL_OK)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3338      	adds	r3, #56	; 0x38
 80048fe:	4619      	mov	r1, r3
 8004900:	687a      	ldr	r2, [r7, #4]
 8004902:	887b      	ldrh	r3, [r7, #2]
 8004904:	f7fe f9a4 	bl	8002c50 <HAL_DMA_Start_IT>
 8004908:	4603      	mov	r3, r0
 800490a:	2b00      	cmp	r3, #0
 800490c:	d001      	beq.n	8004912 <HAL_TIM_IC_Start_DMA+0x1e6>
      {
        /* Return error status */
        return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e09b      	b.n	8004a4a <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 2  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC2);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	68da      	ldr	r2, [r3, #12]
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004920:	60da      	str	r2, [r3, #12]
      break;
 8004922:	e048      	b.n	80049b6 <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_3:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC3]->XferCpltCallback = TIM_DMACaptureCplt;
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004928:	4a4a      	ldr	r2, [pc, #296]	; (8004a54 <HAL_TIM_IC_Start_DMA+0x328>)
 800492a:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC3]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004930:	4a49      	ldr	r2, [pc, #292]	; (8004a58 <HAL_TIM_IC_Start_DMA+0x32c>)
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC3]->XferErrorCallback = TIM_DMAError ;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004938:	4a48      	ldr	r2, [pc, #288]	; (8004a5c <HAL_TIM_IC_Start_DMA+0x330>)
 800493a:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC3], (uint32_t)&htim->Instance->CCR3, (uint32_t)pData, Length) != HAL_OK)
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	333c      	adds	r3, #60	; 0x3c
 8004946:	4619      	mov	r1, r3
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	887b      	ldrh	r3, [r7, #2]
 800494c:	f7fe f980 	bl	8002c50 <HAL_DMA_Start_IT>
 8004950:	4603      	mov	r3, r0
 8004952:	2b00      	cmp	r3, #0
 8004954:	d001      	beq.n	800495a <HAL_TIM_IC_Start_DMA+0x22e>
      {
        /* Return error status */
        return HAL_ERROR;
 8004956:	2301      	movs	r3, #1
 8004958:	e077      	b.n	8004a4a <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 3  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC3);
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68da      	ldr	r2, [r3, #12]
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004968:	60da      	str	r2, [r3, #12]
      break;
 800496a:	e024      	b.n	80049b6 <HAL_TIM_IC_Start_DMA+0x28a>
    }

    case TIM_CHANNEL_4:
    {
      /* Set the DMA capture callbacks */
      htim->hdma[TIM_DMA_ID_CC4]->XferCpltCallback = TIM_DMACaptureCplt;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004970:	4a38      	ldr	r2, [pc, #224]	; (8004a54 <HAL_TIM_IC_Start_DMA+0x328>)
 8004972:	63da      	str	r2, [r3, #60]	; 0x3c
      htim->hdma[TIM_DMA_ID_CC4]->XferHalfCpltCallback = TIM_DMACaptureHalfCplt;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004978:	4a37      	ldr	r2, [pc, #220]	; (8004a58 <HAL_TIM_IC_Start_DMA+0x32c>)
 800497a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      htim->hdma[TIM_DMA_ID_CC4]->XferErrorCallback = TIM_DMAError ;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004980:	4a36      	ldr	r2, [pc, #216]	; (8004a5c <HAL_TIM_IC_Start_DMA+0x330>)
 8004982:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Enable the DMA stream */
      if (HAL_DMA_Start_IT(htim->hdma[TIM_DMA_ID_CC4], (uint32_t)&htim->Instance->CCR4, (uint32_t)pData, Length) != HAL_OK)
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	3340      	adds	r3, #64	; 0x40
 800498e:	4619      	mov	r1, r3
 8004990:	687a      	ldr	r2, [r7, #4]
 8004992:	887b      	ldrh	r3, [r7, #2]
 8004994:	f7fe f95c 	bl	8002c50 <HAL_DMA_Start_IT>
 8004998:	4603      	mov	r3, r0
 800499a:	2b00      	cmp	r3, #0
 800499c:	d001      	beq.n	80049a2 <HAL_TIM_IC_Start_DMA+0x276>
      {
        /* Return error status */
        return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e053      	b.n	8004a4a <HAL_TIM_IC_Start_DMA+0x31e>
      }
      /* Enable the TIM Capture/Compare 4  DMA request */
      __HAL_TIM_ENABLE_DMA(htim, TIM_DMA_CC4);
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80049b0:	60da      	str	r2, [r3, #12]
      break;
 80049b2:	e000      	b.n	80049b6 <HAL_TIM_IC_Start_DMA+0x28a>
    }

    default:
      break;
 80049b4:	bf00      	nop
  }

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	2201      	movs	r2, #1
 80049bc:	68b9      	ldr	r1, [r7, #8]
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 f8a2 	bl	8005b08 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a25      	ldr	r2, [pc, #148]	; (8004a60 <HAL_TIM_IC_Start_DMA+0x334>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d022      	beq.n	8004a14 <HAL_TIM_IC_Start_DMA+0x2e8>
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80049d6:	d01d      	beq.n	8004a14 <HAL_TIM_IC_Start_DMA+0x2e8>
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	4a21      	ldr	r2, [pc, #132]	; (8004a64 <HAL_TIM_IC_Start_DMA+0x338>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d018      	beq.n	8004a14 <HAL_TIM_IC_Start_DMA+0x2e8>
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a20      	ldr	r2, [pc, #128]	; (8004a68 <HAL_TIM_IC_Start_DMA+0x33c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d013      	beq.n	8004a14 <HAL_TIM_IC_Start_DMA+0x2e8>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	4a1e      	ldr	r2, [pc, #120]	; (8004a6c <HAL_TIM_IC_Start_DMA+0x340>)
 80049f2:	4293      	cmp	r3, r2
 80049f4:	d00e      	beq.n	8004a14 <HAL_TIM_IC_Start_DMA+0x2e8>
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a1d      	ldr	r2, [pc, #116]	; (8004a70 <HAL_TIM_IC_Start_DMA+0x344>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d009      	beq.n	8004a14 <HAL_TIM_IC_Start_DMA+0x2e8>
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a1b      	ldr	r2, [pc, #108]	; (8004a74 <HAL_TIM_IC_Start_DMA+0x348>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_IC_Start_DMA+0x2e8>
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a1a      	ldr	r2, [pc, #104]	; (8004a78 <HAL_TIM_IC_Start_DMA+0x34c>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d111      	bne.n	8004a38 <HAL_TIM_IC_Start_DMA+0x30c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	f003 0307 	and.w	r3, r3, #7
 8004a1e:	613b      	str	r3, [r7, #16]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	2b06      	cmp	r3, #6
 8004a24:	d010      	beq.n	8004a48 <HAL_TIM_IC_Start_DMA+0x31c>
    {
      __HAL_TIM_ENABLE(htim);
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	681a      	ldr	r2, [r3, #0]
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0201 	orr.w	r2, r2, #1
 8004a34:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a36:	e007      	b.n	8004a48 <HAL_TIM_IC_Start_DMA+0x31c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0201 	orr.w	r2, r2, #1
 8004a46:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004a48:	2300      	movs	r3, #0
}
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	3718      	adds	r7, #24
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	080051af 	.word	0x080051af
 8004a58:	08005277 	.word	0x08005277
 8004a5c:	0800511d 	.word	0x0800511d
 8004a60:	40010000 	.word	0x40010000
 8004a64:	40000400 	.word	0x40000400
 8004a68:	40000800 	.word	0x40000800
 8004a6c:	40000c00 	.word	0x40000c00
 8004a70:	40010400 	.word	0x40010400
 8004a74:	40014000 	.word	0x40014000
 8004a78:	40001800 	.word	0x40001800

08004a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	f003 0302 	and.w	r3, r3, #2
 8004a8e:	2b02      	cmp	r3, #2
 8004a90:	d122      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	f003 0302 	and.w	r3, r3, #2
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d11b      	bne.n	8004ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f06f 0202 	mvn.w	r2, #2
 8004aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	699b      	ldr	r3, [r3, #24]
 8004ab6:	f003 0303 	and.w	r3, r3, #3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	f7fc fc16 	bl	80012f0 <HAL_TIM_IC_CaptureCallback>
 8004ac4:	e005      	b.n	8004ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f000 faf6 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004acc:	6878      	ldr	r0, [r7, #4]
 8004ace:	f000 fb07 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	f003 0304 	and.w	r3, r3, #4
 8004ae2:	2b04      	cmp	r3, #4
 8004ae4:	d122      	bne.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	68db      	ldr	r3, [r3, #12]
 8004aec:	f003 0304 	and.w	r3, r3, #4
 8004af0:	2b04      	cmp	r3, #4
 8004af2:	d11b      	bne.n	8004b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f06f 0204 	mvn.w	r2, #4
 8004afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2202      	movs	r2, #2
 8004b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699b      	ldr	r3, [r3, #24]
 8004b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7fc fbec 	bl	80012f0 <HAL_TIM_IC_CaptureCallback>
 8004b18:	e005      	b.n	8004b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 facc 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b20:	6878      	ldr	r0, [r7, #4]
 8004b22:	f000 fadd 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	2200      	movs	r2, #0
 8004b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	691b      	ldr	r3, [r3, #16]
 8004b32:	f003 0308 	and.w	r3, r3, #8
 8004b36:	2b08      	cmp	r3, #8
 8004b38:	d122      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	68db      	ldr	r3, [r3, #12]
 8004b40:	f003 0308 	and.w	r3, r3, #8
 8004b44:	2b08      	cmp	r3, #8
 8004b46:	d11b      	bne.n	8004b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f06f 0208 	mvn.w	r2, #8
 8004b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2204      	movs	r2, #4
 8004b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	69db      	ldr	r3, [r3, #28]
 8004b5e:	f003 0303 	and.w	r3, r3, #3
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d003      	beq.n	8004b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004b66:	6878      	ldr	r0, [r7, #4]
 8004b68:	f7fc fbc2 	bl	80012f0 <HAL_TIM_IC_CaptureCallback>
 8004b6c:	e005      	b.n	8004b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004b6e:	6878      	ldr	r0, [r7, #4]
 8004b70:	f000 faa2 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004b74:	6878      	ldr	r0, [r7, #4]
 8004b76:	f000 fab3 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2200      	movs	r2, #0
 8004b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	f003 0310 	and.w	r3, r3, #16
 8004b8a:	2b10      	cmp	r3, #16
 8004b8c:	d122      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	f003 0310 	and.w	r3, r3, #16
 8004b98:	2b10      	cmp	r3, #16
 8004b9a:	d11b      	bne.n	8004bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f06f 0210 	mvn.w	r2, #16
 8004ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2208      	movs	r2, #8
 8004baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	69db      	ldr	r3, [r3, #28]
 8004bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d003      	beq.n	8004bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004bba:	6878      	ldr	r0, [r7, #4]
 8004bbc:	f7fc fb98 	bl	80012f0 <HAL_TIM_IC_CaptureCallback>
 8004bc0:	e005      	b.n	8004bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004bc2:	6878      	ldr	r0, [r7, #4]
 8004bc4:	f000 fa78 	bl	80050b8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004bc8:	6878      	ldr	r0, [r7, #4]
 8004bca:	f000 fa89 	bl	80050e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	691b      	ldr	r3, [r3, #16]
 8004bda:	f003 0301 	and.w	r3, r3, #1
 8004bde:	2b01      	cmp	r3, #1
 8004be0:	d10e      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68db      	ldr	r3, [r3, #12]
 8004be8:	f003 0301 	and.w	r3, r3, #1
 8004bec:	2b01      	cmp	r3, #1
 8004bee:	d107      	bne.n	8004c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f06f 0201 	mvn.w	r2, #1
 8004bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f7fc fc28 	bl	8001450 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	691b      	ldr	r3, [r3, #16]
 8004c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c0a:	2b80      	cmp	r3, #128	; 0x80
 8004c0c:	d10e      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c18:	2b80      	cmp	r3, #128	; 0x80
 8004c1a:	d107      	bne.n	8004c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f001 f81a 	bl	8005c60 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	691b      	ldr	r3, [r3, #16]
 8004c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c36:	2b40      	cmp	r3, #64	; 0x40
 8004c38:	d10e      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	68db      	ldr	r3, [r3, #12]
 8004c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c44:	2b40      	cmp	r3, #64	; 0x40
 8004c46:	d107      	bne.n	8004c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f000 fa4e 	bl	80050f4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	691b      	ldr	r3, [r3, #16]
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b20      	cmp	r3, #32
 8004c64:	d10e      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	68db      	ldr	r3, [r3, #12]
 8004c6c:	f003 0320 	and.w	r3, r3, #32
 8004c70:	2b20      	cmp	r3, #32
 8004c72:	d107      	bne.n	8004c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f06f 0220 	mvn.w	r2, #32
 8004c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 ffe4 	bl	8005c4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004c84:	bf00      	nop
 8004c86:	3708      	adds	r7, #8
 8004c88:	46bd      	mov	sp, r7
 8004c8a:	bd80      	pop	{r7, pc}

08004c8c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	60f8      	str	r0, [r7, #12]
 8004c94:	60b9      	str	r1, [r7, #8]
 8004c96:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c9e:	2b01      	cmp	r3, #1
 8004ca0:	d101      	bne.n	8004ca6 <HAL_TIM_IC_ConfigChannel+0x1a>
 8004ca2:	2302      	movs	r3, #2
 8004ca4:	e082      	b.n	8004dac <HAL_TIM_IC_ConfigChannel+0x120>
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d11b      	bne.n	8004cec <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	68bb      	ldr	r3, [r7, #8]
 8004cba:	6819      	ldr	r1, [r3, #0]
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	685a      	ldr	r2, [r3, #4]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	68db      	ldr	r3, [r3, #12]
 8004cc4:	f000 fd5c 	bl	8005780 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	699a      	ldr	r2, [r3, #24]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 020c 	bic.w	r2, r2, #12
 8004cd6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	689a      	ldr	r2, [r3, #8]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	430a      	orrs	r2, r1
 8004ce8:	619a      	str	r2, [r3, #24]
 8004cea:	e05a      	b.n	8004da2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	2b04      	cmp	r3, #4
 8004cf0:	d11c      	bne.n	8004d2c <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6818      	ldr	r0, [r3, #0]
 8004cf6:	68bb      	ldr	r3, [r7, #8]
 8004cf8:	6819      	ldr	r1, [r3, #0]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	685a      	ldr	r2, [r3, #4]
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	f000 fde0 	bl	80058c6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	699a      	ldr	r2, [r3, #24]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d14:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6999      	ldr	r1, [r3, #24]
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	689b      	ldr	r3, [r3, #8]
 8004d20:	021a      	lsls	r2, r3, #8
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	430a      	orrs	r2, r1
 8004d28:	619a      	str	r2, [r3, #24]
 8004d2a:	e03a      	b.n	8004da2 <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	2b08      	cmp	r3, #8
 8004d30:	d11b      	bne.n	8004d6a <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	6818      	ldr	r0, [r3, #0]
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	6819      	ldr	r1, [r3, #0]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	685a      	ldr	r2, [r3, #4]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
 8004d40:	68db      	ldr	r3, [r3, #12]
 8004d42:	f000 fe2d 	bl	80059a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	69da      	ldr	r2, [r3, #28]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 020c 	bic.w	r2, r2, #12
 8004d54:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69d9      	ldr	r1, [r3, #28]
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	689a      	ldr	r2, [r3, #8]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	430a      	orrs	r2, r1
 8004d66:	61da      	str	r2, [r3, #28]
 8004d68:	e01b      	b.n	8004da2 <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	6818      	ldr	r0, [r3, #0]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	6819      	ldr	r1, [r3, #0]
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	68bb      	ldr	r3, [r7, #8]
 8004d78:	68db      	ldr	r3, [r3, #12]
 8004d7a:	f000 fe4d 	bl	8005a18 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	69da      	ldr	r2, [r3, #28]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004d8c:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	69d9      	ldr	r1, [r3, #28]
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	021a      	lsls	r2, r3, #8
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	430a      	orrs	r2, r1
 8004da0:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004daa:	2300      	movs	r3, #0
}
 8004dac:	4618      	mov	r0, r3
 8004dae:	3710      	adds	r7, #16
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dc6:	2b01      	cmp	r3, #1
 8004dc8:	d101      	bne.n	8004dce <HAL_TIM_PWM_ConfigChannel+0x1a>
 8004dca:	2302      	movs	r3, #2
 8004dcc:	e0ac      	b.n	8004f28 <HAL_TIM_PWM_ConfigChannel+0x174>
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2b0c      	cmp	r3, #12
 8004dda:	f200 809f 	bhi.w	8004f1c <HAL_TIM_PWM_ConfigChannel+0x168>
 8004dde:	a201      	add	r2, pc, #4	; (adr r2, 8004de4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8004de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004de4:	08004e19 	.word	0x08004e19
 8004de8:	08004f1d 	.word	0x08004f1d
 8004dec:	08004f1d 	.word	0x08004f1d
 8004df0:	08004f1d 	.word	0x08004f1d
 8004df4:	08004e59 	.word	0x08004e59
 8004df8:	08004f1d 	.word	0x08004f1d
 8004dfc:	08004f1d 	.word	0x08004f1d
 8004e00:	08004f1d 	.word	0x08004f1d
 8004e04:	08004e9b 	.word	0x08004e9b
 8004e08:	08004f1d 	.word	0x08004f1d
 8004e0c:	08004f1d 	.word	0x08004f1d
 8004e10:	08004f1d 	.word	0x08004f1d
 8004e14:	08004edb 	.word	0x08004edb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	4618      	mov	r0, r3
 8004e20:	f000 fafe 	bl	8005420 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	699a      	ldr	r2, [r3, #24]
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	f042 0208 	orr.w	r2, r2, #8
 8004e32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	699a      	ldr	r2, [r3, #24]
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f022 0204 	bic.w	r2, r2, #4
 8004e42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	6999      	ldr	r1, [r3, #24]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	691a      	ldr	r2, [r3, #16]
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	619a      	str	r2, [r3, #24]
      break;
 8004e56:	e062      	b.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	68b9      	ldr	r1, [r7, #8]
 8004e5e:	4618      	mov	r0, r3
 8004e60:	f000 fb4e 	bl	8005500 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	699a      	ldr	r2, [r3, #24]
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004e72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	699a      	ldr	r2, [r3, #24]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004e82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	6999      	ldr	r1, [r3, #24]
 8004e8a:	68bb      	ldr	r3, [r7, #8]
 8004e8c:	691b      	ldr	r3, [r3, #16]
 8004e8e:	021a      	lsls	r2, r3, #8
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	430a      	orrs	r2, r1
 8004e96:	619a      	str	r2, [r3, #24]
      break;
 8004e98:	e041      	b.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	4618      	mov	r0, r3
 8004ea2:	f000 fba3 	bl	80055ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	69da      	ldr	r2, [r3, #28]
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f042 0208 	orr.w	r2, r2, #8
 8004eb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	69da      	ldr	r2, [r3, #28]
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f022 0204 	bic.w	r2, r2, #4
 8004ec4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	69d9      	ldr	r1, [r3, #28]
 8004ecc:	68bb      	ldr	r3, [r7, #8]
 8004ece:	691a      	ldr	r2, [r3, #16]
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	61da      	str	r2, [r3, #28]
      break;
 8004ed8:	e021      	b.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	68b9      	ldr	r1, [r7, #8]
 8004ee0:	4618      	mov	r0, r3
 8004ee2:	f000 fbf7 	bl	80056d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	69da      	ldr	r2, [r3, #28]
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ef4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	69da      	ldr	r2, [r3, #28]
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004f04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	69d9      	ldr	r1, [r3, #28]
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	691b      	ldr	r3, [r3, #16]
 8004f10:	021a      	lsls	r2, r3, #8
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	430a      	orrs	r2, r1
 8004f18:	61da      	str	r2, [r3, #28]
      break;
 8004f1a:	e000      	b.n	8004f1e <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8004f1c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	2200      	movs	r2, #0
 8004f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f26:	2300      	movs	r3, #0
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f30:	b580      	push	{r7, lr}
 8004f32:	b084      	sub	sp, #16
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004f40:	2b01      	cmp	r3, #1
 8004f42:	d101      	bne.n	8004f48 <HAL_TIM_ConfigClockSource+0x18>
 8004f44:	2302      	movs	r3, #2
 8004f46:	e0b3      	b.n	80050b0 <HAL_TIM_ConfigClockSource+0x180>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004f6e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	68fa      	ldr	r2, [r7, #12]
 8004f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f80:	d03e      	beq.n	8005000 <HAL_TIM_ConfigClockSource+0xd0>
 8004f82:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f86:	f200 8087 	bhi.w	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004f8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f8e:	f000 8085 	beq.w	800509c <HAL_TIM_ConfigClockSource+0x16c>
 8004f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f96:	d87f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004f98:	2b70      	cmp	r3, #112	; 0x70
 8004f9a:	d01a      	beq.n	8004fd2 <HAL_TIM_ConfigClockSource+0xa2>
 8004f9c:	2b70      	cmp	r3, #112	; 0x70
 8004f9e:	d87b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fa0:	2b60      	cmp	r3, #96	; 0x60
 8004fa2:	d050      	beq.n	8005046 <HAL_TIM_ConfigClockSource+0x116>
 8004fa4:	2b60      	cmp	r3, #96	; 0x60
 8004fa6:	d877      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fa8:	2b50      	cmp	r3, #80	; 0x50
 8004faa:	d03c      	beq.n	8005026 <HAL_TIM_ConfigClockSource+0xf6>
 8004fac:	2b50      	cmp	r3, #80	; 0x50
 8004fae:	d873      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fb0:	2b40      	cmp	r3, #64	; 0x40
 8004fb2:	d058      	beq.n	8005066 <HAL_TIM_ConfigClockSource+0x136>
 8004fb4:	2b40      	cmp	r3, #64	; 0x40
 8004fb6:	d86f      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fb8:	2b30      	cmp	r3, #48	; 0x30
 8004fba:	d064      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x156>
 8004fbc:	2b30      	cmp	r3, #48	; 0x30
 8004fbe:	d86b      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fc0:	2b20      	cmp	r3, #32
 8004fc2:	d060      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x156>
 8004fc4:	2b20      	cmp	r3, #32
 8004fc6:	d867      	bhi.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d05c      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x156>
 8004fcc:	2b10      	cmp	r3, #16
 8004fce:	d05a      	beq.n	8005086 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004fd0:	e062      	b.n	8005098 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6818      	ldr	r0, [r3, #0]
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	6899      	ldr	r1, [r3, #8]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	68db      	ldr	r3, [r3, #12]
 8004fe2:	f000 fd71 	bl	8005ac8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004ff4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	609a      	str	r2, [r3, #8]
      break;
 8004ffe:	e04e      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	6818      	ldr	r0, [r3, #0]
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	6899      	ldr	r1, [r3, #8]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	685a      	ldr	r2, [r3, #4]
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	f000 fd5a 	bl	8005ac8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	689a      	ldr	r2, [r3, #8]
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005022:	609a      	str	r2, [r3, #8]
      break;
 8005024:	e03b      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6818      	ldr	r0, [r3, #0]
 800502a:	683b      	ldr	r3, [r7, #0]
 800502c:	6859      	ldr	r1, [r3, #4]
 800502e:	683b      	ldr	r3, [r7, #0]
 8005030:	68db      	ldr	r3, [r3, #12]
 8005032:	461a      	mov	r2, r3
 8005034:	f000 fc18 	bl	8005868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	2150      	movs	r1, #80	; 0x50
 800503e:	4618      	mov	r0, r3
 8005040:	f000 fd27 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 8005044:	e02b      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6818      	ldr	r0, [r3, #0]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	6859      	ldr	r1, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	461a      	mov	r2, r3
 8005054:	f000 fc74 	bl	8005940 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	2160      	movs	r1, #96	; 0x60
 800505e:	4618      	mov	r0, r3
 8005060:	f000 fd17 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 8005064:	e01b      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	6818      	ldr	r0, [r3, #0]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	6859      	ldr	r1, [r3, #4]
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	68db      	ldr	r3, [r3, #12]
 8005072:	461a      	mov	r2, r3
 8005074:	f000 fbf8 	bl	8005868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2140      	movs	r1, #64	; 0x40
 800507e:	4618      	mov	r0, r3
 8005080:	f000 fd07 	bl	8005a92 <TIM_ITRx_SetConfig>
      break;
 8005084:	e00b      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	683b      	ldr	r3, [r7, #0]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	4619      	mov	r1, r3
 8005090:	4610      	mov	r0, r2
 8005092:	f000 fcfe 	bl	8005a92 <TIM_ITRx_SetConfig>
        break;
 8005096:	e002      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005098:	bf00      	nop
 800509a:	e000      	b.n	800509e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800509c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2200      	movs	r2, #0
 80050aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80050ae:	2300      	movs	r3, #0
}
 80050b0:	4618      	mov	r0, r3
 80050b2:	3710      	adds	r7, #16
 80050b4:	46bd      	mov	sp, r7
 80050b6:	bd80      	pop	{r7, pc}

080050b8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80050c0:	bf00      	nop
 80050c2:	370c      	adds	r7, #12
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <HAL_TIM_IC_CaptureHalfCpltCallback>:
  * @brief  Input Capture half complete callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureHalfCpltCallback(TIM_HandleTypeDef *htim)
{
 80050cc:	b480      	push	{r7}
 80050ce:	b083      	sub	sp, #12
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureHalfCpltCallback could be implemented in the user file
   */
}
 80050d4:	bf00      	nop
 80050d6:	370c      	adds	r7, #12
 80050d8:	46bd      	mov	sp, r7
 80050da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050de:	4770      	bx	lr

080050e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80050e0:	b480      	push	{r7}
 80050e2:	b083      	sub	sp, #12
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80050e8:	bf00      	nop
 80050ea:	370c      	adds	r7, #12
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80050f4:	b480      	push	{r7}
 80050f6:	b083      	sub	sp, #12
 80050f8:	af00      	add	r7, sp, #0
 80050fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <HAL_TIM_ErrorCallback>:
  * @brief  Timer error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_ErrorCallback(TIM_HandleTypeDef *htim)
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_ErrorCallback could be implemented in the user file
   */
}
 8005110:	bf00      	nop
 8005112:	370c      	adds	r7, #12
 8005114:	46bd      	mov	sp, r7
 8005116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511a:	4770      	bx	lr

0800511c <TIM_DMAError>:
  * @brief  TIM DMA error callback
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMAError(DMA_HandleTypeDef *hdma)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005128:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800512e:	687a      	ldr	r2, [r7, #4]
 8005130:	429a      	cmp	r2, r3
 8005132:	d107      	bne.n	8005144 <TIM_DMAError+0x28>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2201      	movs	r2, #1
 8005138:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005142:	e02a      	b.n	800519a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005148:	687a      	ldr	r2, [r7, #4]
 800514a:	429a      	cmp	r2, r3
 800514c:	d107      	bne.n	800515e <TIM_DMAError+0x42>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	2202      	movs	r2, #2
 8005152:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	2201      	movs	r2, #1
 8005158:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800515c:	e01d      	b.n	800519a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005162:	687a      	ldr	r2, [r7, #4]
 8005164:	429a      	cmp	r2, r3
 8005166:	d107      	bne.n	8005178 <TIM_DMAError+0x5c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2204      	movs	r2, #4
 800516c:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	2201      	movs	r2, #1
 8005172:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005176:	e010      	b.n	800519a <TIM_DMAError+0x7e>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800517c:	687a      	ldr	r2, [r7, #4]
 800517e:	429a      	cmp	r2, r3
 8005180:	d107      	bne.n	8005192 <TIM_DMAError+0x76>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2208      	movs	r2, #8
 8005186:	771a      	strb	r2, [r3, #28]
    TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	2201      	movs	r2, #1
 800518c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005190:	e003      	b.n	800519a <TIM_DMAError+0x7e>
  }
  else
  {
    htim->State = HAL_TIM_STATE_READY;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	2201      	movs	r2, #1
 8005196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->ErrorCallback(htim);
#else
  HAL_TIM_ErrorCallback(htim);
 800519a:	68f8      	ldr	r0, [r7, #12]
 800519c:	f7ff ffb4 	bl	8005108 <HAL_TIM_ErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	2200      	movs	r2, #0
 80051a4:	771a      	strb	r2, [r3, #28]
}
 80051a6:	bf00      	nop
 80051a8:	3710      	adds	r7, #16
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}

080051ae <TIM_DMACaptureCplt>:
  * @brief  TIM DMA Capture complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureCplt(DMA_HandleTypeDef *hdma)
{
 80051ae:	b580      	push	{r7, lr}
 80051b0:	b084      	sub	sp, #16
 80051b2:	af00      	add	r7, sp, #0
 80051b4:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ba:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051c0:	687a      	ldr	r2, [r7, #4]
 80051c2:	429a      	cmp	r2, r3
 80051c4:	d10f      	bne.n	80051e6 <TIM_DMACaptureCplt+0x38>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	2201      	movs	r2, #1
 80051ca:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d146      	bne.n	8005262 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051e4:	e03d      	b.n	8005262 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	429a      	cmp	r2, r3
 80051ee:	d10f      	bne.n	8005210 <TIM_DMACaptureCplt+0x62>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2202      	movs	r2, #2
 80051f4:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d131      	bne.n	8005262 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	2201      	movs	r2, #1
 8005202:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800520e:	e028      	b.n	8005262 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005214:	687a      	ldr	r2, [r7, #4]
 8005216:	429a      	cmp	r2, r3
 8005218:	d10f      	bne.n	800523a <TIM_DMACaptureCplt+0x8c>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	2204      	movs	r2, #4
 800521e:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	69db      	ldr	r3, [r3, #28]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d11c      	bne.n	8005262 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	2201      	movs	r2, #1
 800522c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_3, HAL_TIM_CHANNEL_STATE_READY);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	2201      	movs	r2, #1
 8005234:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005238:	e013      	b.n	8005262 <TIM_DMACaptureCplt+0xb4>
    }
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800523e:	687a      	ldr	r2, [r7, #4]
 8005240:	429a      	cmp	r2, r3
 8005242:	d10e      	bne.n	8005262 <TIM_DMACaptureCplt+0xb4>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2208      	movs	r2, #8
 8005248:	771a      	strb	r2, [r3, #28]

    if (hdma->Init.Mode == DMA_NORMAL)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d107      	bne.n	8005262 <TIM_DMACaptureCplt+0xb4>
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	2201      	movs	r2, #1
 8005256:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_4, HAL_TIM_CHANNEL_STATE_READY);
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2201      	movs	r2, #1
 800525e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureCallback(htim);
#else
  HAL_TIM_IC_CaptureCallback(htim);
 8005262:	68f8      	ldr	r0, [r7, #12]
 8005264:	f7fc f844 	bl	80012f0 <HAL_TIM_IC_CaptureCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	2200      	movs	r2, #0
 800526c:	771a      	strb	r2, [r3, #28]
}
 800526e:	bf00      	nop
 8005270:	3710      	adds	r7, #16
 8005272:	46bd      	mov	sp, r7
 8005274:	bd80      	pop	{r7, pc}

08005276 <TIM_DMACaptureHalfCplt>:
  * @brief  TIM DMA Capture half complete callback.
  * @param  hdma pointer to DMA handle.
  * @retval None
  */
void TIM_DMACaptureHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005276:	b580      	push	{r7, lr}
 8005278:	b084      	sub	sp, #16
 800527a:	af00      	add	r7, sp, #0
 800527c:	6078      	str	r0, [r7, #4]
  TIM_HandleTypeDef *htim = (TIM_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005282:	60fb      	str	r3, [r7, #12]

  if (hdma == htim->hdma[TIM_DMA_ID_CC1])
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005288:	687a      	ldr	r2, [r7, #4]
 800528a:	429a      	cmp	r2, r3
 800528c:	d103      	bne.n	8005296 <TIM_DMACaptureHalfCplt+0x20>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2201      	movs	r2, #1
 8005292:	771a      	strb	r2, [r3, #28]
 8005294:	e019      	b.n	80052ca <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC2])
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529a:	687a      	ldr	r2, [r7, #4]
 800529c:	429a      	cmp	r2, r3
 800529e:	d103      	bne.n	80052a8 <TIM_DMACaptureHalfCplt+0x32>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2202      	movs	r2, #2
 80052a4:	771a      	strb	r2, [r3, #28]
 80052a6:	e010      	b.n	80052ca <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC3])
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ac:	687a      	ldr	r2, [r7, #4]
 80052ae:	429a      	cmp	r2, r3
 80052b0:	d103      	bne.n	80052ba <TIM_DMACaptureHalfCplt+0x44>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	2204      	movs	r2, #4
 80052b6:	771a      	strb	r2, [r3, #28]
 80052b8:	e007      	b.n	80052ca <TIM_DMACaptureHalfCplt+0x54>
  }
  else if (hdma == htim->hdma[TIM_DMA_ID_CC4])
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052be:	687a      	ldr	r2, [r7, #4]
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d102      	bne.n	80052ca <TIM_DMACaptureHalfCplt+0x54>
  {
    htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	2208      	movs	r2, #8
 80052c8:	771a      	strb	r2, [r3, #28]
  }

#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
  htim->IC_CaptureHalfCpltCallback(htim);
#else
  HAL_TIM_IC_CaptureHalfCpltCallback(htim);
 80052ca:	68f8      	ldr	r0, [r7, #12]
 80052cc:	f7ff fefe 	bl	80050cc <HAL_TIM_IC_CaptureHalfCpltCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */

  htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	771a      	strb	r2, [r3, #28]
}
 80052d6:	bf00      	nop
 80052d8:	3710      	adds	r7, #16
 80052da:	46bd      	mov	sp, r7
 80052dc:	bd80      	pop	{r7, pc}
	...

080052e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b085      	sub	sp, #20
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	4a40      	ldr	r2, [pc, #256]	; (80053f4 <TIM_Base_SetConfig+0x114>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	d013      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052fe:	d00f      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	4a3d      	ldr	r2, [pc, #244]	; (80053f8 <TIM_Base_SetConfig+0x118>)
 8005304:	4293      	cmp	r3, r2
 8005306:	d00b      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	4a3c      	ldr	r2, [pc, #240]	; (80053fc <TIM_Base_SetConfig+0x11c>)
 800530c:	4293      	cmp	r3, r2
 800530e:	d007      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	4a3b      	ldr	r2, [pc, #236]	; (8005400 <TIM_Base_SetConfig+0x120>)
 8005314:	4293      	cmp	r3, r2
 8005316:	d003      	beq.n	8005320 <TIM_Base_SetConfig+0x40>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4a3a      	ldr	r2, [pc, #232]	; (8005404 <TIM_Base_SetConfig+0x124>)
 800531c:	4293      	cmp	r3, r2
 800531e:	d108      	bne.n	8005332 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005326:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	685b      	ldr	r3, [r3, #4]
 800532c:	68fa      	ldr	r2, [r7, #12]
 800532e:	4313      	orrs	r3, r2
 8005330:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a2f      	ldr	r2, [pc, #188]	; (80053f4 <TIM_Base_SetConfig+0x114>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d02b      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005340:	d027      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a2c      	ldr	r2, [pc, #176]	; (80053f8 <TIM_Base_SetConfig+0x118>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d023      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a2b      	ldr	r2, [pc, #172]	; (80053fc <TIM_Base_SetConfig+0x11c>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d01f      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a2a      	ldr	r2, [pc, #168]	; (8005400 <TIM_Base_SetConfig+0x120>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d01b      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a29      	ldr	r2, [pc, #164]	; (8005404 <TIM_Base_SetConfig+0x124>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d017      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a28      	ldr	r2, [pc, #160]	; (8005408 <TIM_Base_SetConfig+0x128>)
 8005366:	4293      	cmp	r3, r2
 8005368:	d013      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	4a27      	ldr	r2, [pc, #156]	; (800540c <TIM_Base_SetConfig+0x12c>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d00f      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	4a26      	ldr	r2, [pc, #152]	; (8005410 <TIM_Base_SetConfig+0x130>)
 8005376:	4293      	cmp	r3, r2
 8005378:	d00b      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	4a25      	ldr	r2, [pc, #148]	; (8005414 <TIM_Base_SetConfig+0x134>)
 800537e:	4293      	cmp	r3, r2
 8005380:	d007      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	4a24      	ldr	r2, [pc, #144]	; (8005418 <TIM_Base_SetConfig+0x138>)
 8005386:	4293      	cmp	r3, r2
 8005388:	d003      	beq.n	8005392 <TIM_Base_SetConfig+0xb2>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	4a23      	ldr	r2, [pc, #140]	; (800541c <TIM_Base_SetConfig+0x13c>)
 800538e:	4293      	cmp	r3, r2
 8005390:	d108      	bne.n	80053a4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005398:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	68db      	ldr	r3, [r3, #12]
 800539e:	68fa      	ldr	r2, [r7, #12]
 80053a0:	4313      	orrs	r3, r2
 80053a2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80053aa:	683b      	ldr	r3, [r7, #0]
 80053ac:	695b      	ldr	r3, [r3, #20]
 80053ae:	4313      	orrs	r3, r2
 80053b0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68fa      	ldr	r2, [r7, #12]
 80053b6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80053b8:	683b      	ldr	r3, [r7, #0]
 80053ba:	689a      	ldr	r2, [r3, #8]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a0a      	ldr	r2, [pc, #40]	; (80053f4 <TIM_Base_SetConfig+0x114>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d003      	beq.n	80053d8 <TIM_Base_SetConfig+0xf8>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	4a0c      	ldr	r2, [pc, #48]	; (8005404 <TIM_Base_SetConfig+0x124>)
 80053d4:	4293      	cmp	r3, r2
 80053d6:	d103      	bne.n	80053e0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	691a      	ldr	r2, [r3, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2201      	movs	r2, #1
 80053e4:	615a      	str	r2, [r3, #20]
}
 80053e6:	bf00      	nop
 80053e8:	3714      	adds	r7, #20
 80053ea:	46bd      	mov	sp, r7
 80053ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f0:	4770      	bx	lr
 80053f2:	bf00      	nop
 80053f4:	40010000 	.word	0x40010000
 80053f8:	40000400 	.word	0x40000400
 80053fc:	40000800 	.word	0x40000800
 8005400:	40000c00 	.word	0x40000c00
 8005404:	40010400 	.word	0x40010400
 8005408:	40014000 	.word	0x40014000
 800540c:	40014400 	.word	0x40014400
 8005410:	40014800 	.word	0x40014800
 8005414:	40001800 	.word	0x40001800
 8005418:	40001c00 	.word	0x40001c00
 800541c:	40002000 	.word	0x40002000

08005420 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005420:	b480      	push	{r7}
 8005422:	b087      	sub	sp, #28
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
 8005428:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	6a1b      	ldr	r3, [r3, #32]
 800542e:	f023 0201 	bic.w	r2, r3, #1
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	6a1b      	ldr	r3, [r3, #32]
 800543a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	699b      	ldr	r3, [r3, #24]
 8005446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800544e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	f023 0303 	bic.w	r3, r3, #3
 8005456:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	4313      	orrs	r3, r2
 8005460:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	f023 0302 	bic.w	r3, r3, #2
 8005468:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800546a:	683b      	ldr	r3, [r7, #0]
 800546c:	689b      	ldr	r3, [r3, #8]
 800546e:	697a      	ldr	r2, [r7, #20]
 8005470:	4313      	orrs	r3, r2
 8005472:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a20      	ldr	r2, [pc, #128]	; (80054f8 <TIM_OC1_SetConfig+0xd8>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d003      	beq.n	8005484 <TIM_OC1_SetConfig+0x64>
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a1f      	ldr	r2, [pc, #124]	; (80054fc <TIM_OC1_SetConfig+0xdc>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d10c      	bne.n	800549e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	f023 0308 	bic.w	r3, r3, #8
 800548a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800548c:	683b      	ldr	r3, [r7, #0]
 800548e:	68db      	ldr	r3, [r3, #12]
 8005490:	697a      	ldr	r2, [r7, #20]
 8005492:	4313      	orrs	r3, r2
 8005494:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f023 0304 	bic.w	r3, r3, #4
 800549c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	4a15      	ldr	r2, [pc, #84]	; (80054f8 <TIM_OC1_SetConfig+0xd8>)
 80054a2:	4293      	cmp	r3, r2
 80054a4:	d003      	beq.n	80054ae <TIM_OC1_SetConfig+0x8e>
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	4a14      	ldr	r2, [pc, #80]	; (80054fc <TIM_OC1_SetConfig+0xdc>)
 80054aa:	4293      	cmp	r3, r2
 80054ac:	d111      	bne.n	80054d2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80054ae:	693b      	ldr	r3, [r7, #16]
 80054b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80054bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	695b      	ldr	r3, [r3, #20]
 80054c2:	693a      	ldr	r2, [r7, #16]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80054c8:	683b      	ldr	r3, [r7, #0]
 80054ca:	699b      	ldr	r3, [r3, #24]
 80054cc:	693a      	ldr	r2, [r7, #16]
 80054ce:	4313      	orrs	r3, r2
 80054d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	693a      	ldr	r2, [r7, #16]
 80054d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	697a      	ldr	r2, [r7, #20]
 80054ea:	621a      	str	r2, [r3, #32]
}
 80054ec:	bf00      	nop
 80054ee:	371c      	adds	r7, #28
 80054f0:	46bd      	mov	sp, r7
 80054f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f6:	4770      	bx	lr
 80054f8:	40010000 	.word	0x40010000
 80054fc:	40010400 	.word	0x40010400

08005500 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005500:	b480      	push	{r7}
 8005502:	b087      	sub	sp, #28
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]
 8005508:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	6a1b      	ldr	r3, [r3, #32]
 800550e:	f023 0210 	bic.w	r2, r3, #16
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	6a1b      	ldr	r3, [r3, #32]
 800551a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	685b      	ldr	r3, [r3, #4]
 8005520:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	699b      	ldr	r3, [r3, #24]
 8005526:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800552e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005536:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	021b      	lsls	r3, r3, #8
 800553e:	68fa      	ldr	r2, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005544:	697b      	ldr	r3, [r7, #20]
 8005546:	f023 0320 	bic.w	r3, r3, #32
 800554a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	011b      	lsls	r3, r3, #4
 8005552:	697a      	ldr	r2, [r7, #20]
 8005554:	4313      	orrs	r3, r2
 8005556:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	4a22      	ldr	r2, [pc, #136]	; (80055e4 <TIM_OC2_SetConfig+0xe4>)
 800555c:	4293      	cmp	r3, r2
 800555e:	d003      	beq.n	8005568 <TIM_OC2_SetConfig+0x68>
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	4a21      	ldr	r2, [pc, #132]	; (80055e8 <TIM_OC2_SetConfig+0xe8>)
 8005564:	4293      	cmp	r3, r2
 8005566:	d10d      	bne.n	8005584 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005568:	697b      	ldr	r3, [r7, #20]
 800556a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800556e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	68db      	ldr	r3, [r3, #12]
 8005574:	011b      	lsls	r3, r3, #4
 8005576:	697a      	ldr	r2, [r7, #20]
 8005578:	4313      	orrs	r3, r2
 800557a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800557c:	697b      	ldr	r3, [r7, #20]
 800557e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005582:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	4a17      	ldr	r2, [pc, #92]	; (80055e4 <TIM_OC2_SetConfig+0xe4>)
 8005588:	4293      	cmp	r3, r2
 800558a:	d003      	beq.n	8005594 <TIM_OC2_SetConfig+0x94>
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	4a16      	ldr	r2, [pc, #88]	; (80055e8 <TIM_OC2_SetConfig+0xe8>)
 8005590:	4293      	cmp	r3, r2
 8005592:	d113      	bne.n	80055bc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800559a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800559c:	693b      	ldr	r3, [r7, #16]
 800559e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	009b      	lsls	r3, r3, #2
 80055aa:	693a      	ldr	r2, [r7, #16]
 80055ac:	4313      	orrs	r3, r2
 80055ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80055b0:	683b      	ldr	r3, [r7, #0]
 80055b2:	699b      	ldr	r3, [r3, #24]
 80055b4:	009b      	lsls	r3, r3, #2
 80055b6:	693a      	ldr	r2, [r7, #16]
 80055b8:	4313      	orrs	r3, r2
 80055ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	693a      	ldr	r2, [r7, #16]
 80055c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	68fa      	ldr	r2, [r7, #12]
 80055c6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80055c8:	683b      	ldr	r3, [r7, #0]
 80055ca:	685a      	ldr	r2, [r3, #4]
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	697a      	ldr	r2, [r7, #20]
 80055d4:	621a      	str	r2, [r3, #32]
}
 80055d6:	bf00      	nop
 80055d8:	371c      	adds	r7, #28
 80055da:	46bd      	mov	sp, r7
 80055dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e0:	4770      	bx	lr
 80055e2:	bf00      	nop
 80055e4:	40010000 	.word	0x40010000
 80055e8:	40010400 	.word	0x40010400

080055ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ec:	b480      	push	{r7}
 80055ee:	b087      	sub	sp, #28
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6a1b      	ldr	r3, [r3, #32]
 80055fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	69db      	ldr	r3, [r3, #28]
 8005612:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800561a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	f023 0303 	bic.w	r3, r3, #3
 8005622:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005624:	683b      	ldr	r3, [r7, #0]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	68fa      	ldr	r2, [r7, #12]
 800562a:	4313      	orrs	r3, r2
 800562c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800562e:	697b      	ldr	r3, [r7, #20]
 8005630:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005634:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	689b      	ldr	r3, [r3, #8]
 800563a:	021b      	lsls	r3, r3, #8
 800563c:	697a      	ldr	r2, [r7, #20]
 800563e:	4313      	orrs	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a21      	ldr	r2, [pc, #132]	; (80056cc <TIM_OC3_SetConfig+0xe0>)
 8005646:	4293      	cmp	r3, r2
 8005648:	d003      	beq.n	8005652 <TIM_OC3_SetConfig+0x66>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	4a20      	ldr	r2, [pc, #128]	; (80056d0 <TIM_OC3_SetConfig+0xe4>)
 800564e:	4293      	cmp	r3, r2
 8005650:	d10d      	bne.n	800566e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005658:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	021b      	lsls	r3, r3, #8
 8005660:	697a      	ldr	r2, [r7, #20]
 8005662:	4313      	orrs	r3, r2
 8005664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005666:	697b      	ldr	r3, [r7, #20]
 8005668:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800566c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a16      	ldr	r2, [pc, #88]	; (80056cc <TIM_OC3_SetConfig+0xe0>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d003      	beq.n	800567e <TIM_OC3_SetConfig+0x92>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	4a15      	ldr	r2, [pc, #84]	; (80056d0 <TIM_OC3_SetConfig+0xe4>)
 800567a:	4293      	cmp	r3, r2
 800567c:	d113      	bne.n	80056a6 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800567e:	693b      	ldr	r3, [r7, #16]
 8005680:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005686:	693b      	ldr	r3, [r7, #16]
 8005688:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800568c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	695b      	ldr	r3, [r3, #20]
 8005692:	011b      	lsls	r3, r3, #4
 8005694:	693a      	ldr	r2, [r7, #16]
 8005696:	4313      	orrs	r3, r2
 8005698:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800569a:	683b      	ldr	r3, [r7, #0]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	011b      	lsls	r3, r3, #4
 80056a0:	693a      	ldr	r2, [r7, #16]
 80056a2:	4313      	orrs	r3, r2
 80056a4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	693a      	ldr	r2, [r7, #16]
 80056aa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	68fa      	ldr	r2, [r7, #12]
 80056b0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	685a      	ldr	r2, [r3, #4]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	621a      	str	r2, [r3, #32]
}
 80056c0:	bf00      	nop
 80056c2:	371c      	adds	r7, #28
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr
 80056cc:	40010000 	.word	0x40010000
 80056d0:	40010400 	.word	0x40010400

080056d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80056d4:	b480      	push	{r7}
 80056d6:	b087      	sub	sp, #28
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
 80056dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	6a1b      	ldr	r3, [r3, #32]
 80056ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	69db      	ldr	r3, [r3, #28]
 80056fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005702:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800570a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	021b      	lsls	r3, r3, #8
 8005712:	68fa      	ldr	r2, [r7, #12]
 8005714:	4313      	orrs	r3, r2
 8005716:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800571e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005720:	683b      	ldr	r3, [r7, #0]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	031b      	lsls	r3, r3, #12
 8005726:	693a      	ldr	r2, [r7, #16]
 8005728:	4313      	orrs	r3, r2
 800572a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	4a12      	ldr	r2, [pc, #72]	; (8005778 <TIM_OC4_SetConfig+0xa4>)
 8005730:	4293      	cmp	r3, r2
 8005732:	d003      	beq.n	800573c <TIM_OC4_SetConfig+0x68>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	4a11      	ldr	r2, [pc, #68]	; (800577c <TIM_OC4_SetConfig+0xa8>)
 8005738:	4293      	cmp	r3, r2
 800573a:	d109      	bne.n	8005750 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800573c:	697b      	ldr	r3, [r7, #20]
 800573e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005742:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005744:	683b      	ldr	r3, [r7, #0]
 8005746:	695b      	ldr	r3, [r3, #20]
 8005748:	019b      	lsls	r3, r3, #6
 800574a:	697a      	ldr	r2, [r7, #20]
 800574c:	4313      	orrs	r3, r2
 800574e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	697a      	ldr	r2, [r7, #20]
 8005754:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	68fa      	ldr	r2, [r7, #12]
 800575a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800575c:	683b      	ldr	r3, [r7, #0]
 800575e:	685a      	ldr	r2, [r3, #4]
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	693a      	ldr	r2, [r7, #16]
 8005768:	621a      	str	r2, [r3, #32]
}
 800576a:	bf00      	nop
 800576c:	371c      	adds	r7, #28
 800576e:	46bd      	mov	sp, r7
 8005770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	40010000 	.word	0x40010000
 800577c:	40010400 	.word	0x40010400

08005780 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005780:	b480      	push	{r7}
 8005782:	b087      	sub	sp, #28
 8005784:	af00      	add	r7, sp, #0
 8005786:	60f8      	str	r0, [r7, #12]
 8005788:	60b9      	str	r1, [r7, #8]
 800578a:	607a      	str	r2, [r7, #4]
 800578c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	f023 0201 	bic.w	r2, r3, #1
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	699b      	ldr	r3, [r3, #24]
 800579e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	6a1b      	ldr	r3, [r3, #32]
 80057a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	4a28      	ldr	r2, [pc, #160]	; (800584c <TIM_TI1_SetConfig+0xcc>)
 80057aa:	4293      	cmp	r3, r2
 80057ac:	d01b      	beq.n	80057e6 <TIM_TI1_SetConfig+0x66>
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057b4:	d017      	beq.n	80057e6 <TIM_TI1_SetConfig+0x66>
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	4a25      	ldr	r2, [pc, #148]	; (8005850 <TIM_TI1_SetConfig+0xd0>)
 80057ba:	4293      	cmp	r3, r2
 80057bc:	d013      	beq.n	80057e6 <TIM_TI1_SetConfig+0x66>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	4a24      	ldr	r2, [pc, #144]	; (8005854 <TIM_TI1_SetConfig+0xd4>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d00f      	beq.n	80057e6 <TIM_TI1_SetConfig+0x66>
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	4a23      	ldr	r2, [pc, #140]	; (8005858 <TIM_TI1_SetConfig+0xd8>)
 80057ca:	4293      	cmp	r3, r2
 80057cc:	d00b      	beq.n	80057e6 <TIM_TI1_SetConfig+0x66>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	4a22      	ldr	r2, [pc, #136]	; (800585c <TIM_TI1_SetConfig+0xdc>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d007      	beq.n	80057e6 <TIM_TI1_SetConfig+0x66>
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	4a21      	ldr	r2, [pc, #132]	; (8005860 <TIM_TI1_SetConfig+0xe0>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d003      	beq.n	80057e6 <TIM_TI1_SetConfig+0x66>
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	4a20      	ldr	r2, [pc, #128]	; (8005864 <TIM_TI1_SetConfig+0xe4>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d101      	bne.n	80057ea <TIM_TI1_SetConfig+0x6a>
 80057e6:	2301      	movs	r3, #1
 80057e8:	e000      	b.n	80057ec <TIM_TI1_SetConfig+0x6c>
 80057ea:	2300      	movs	r3, #0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d008      	beq.n	8005802 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	f023 0303 	bic.w	r3, r3, #3
 80057f6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80057f8:	697a      	ldr	r2, [r7, #20]
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4313      	orrs	r3, r2
 80057fe:	617b      	str	r3, [r7, #20]
 8005800:	e003      	b.n	800580a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005802:	697b      	ldr	r3, [r7, #20]
 8005804:	f043 0301 	orr.w	r3, r3, #1
 8005808:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005810:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	011b      	lsls	r3, r3, #4
 8005816:	b2db      	uxtb	r3, r3
 8005818:	697a      	ldr	r2, [r7, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800581e:	693b      	ldr	r3, [r7, #16]
 8005820:	f023 030a 	bic.w	r3, r3, #10
 8005824:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f003 030a 	and.w	r3, r3, #10
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	697a      	ldr	r2, [r7, #20]
 8005836:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	693a      	ldr	r2, [r7, #16]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
 800584a:	bf00      	nop
 800584c:	40010000 	.word	0x40010000
 8005850:	40000400 	.word	0x40000400
 8005854:	40000800 	.word	0x40000800
 8005858:	40000c00 	.word	0x40000c00
 800585c:	40010400 	.word	0x40010400
 8005860:	40014000 	.word	0x40014000
 8005864:	40001800 	.word	0x40001800

08005868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005868:	b480      	push	{r7}
 800586a:	b087      	sub	sp, #28
 800586c:	af00      	add	r7, sp, #0
 800586e:	60f8      	str	r0, [r7, #12]
 8005870:	60b9      	str	r1, [r7, #8]
 8005872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	6a1b      	ldr	r3, [r3, #32]
 8005878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6a1b      	ldr	r3, [r3, #32]
 800587e:	f023 0201 	bic.w	r2, r3, #1
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	699b      	ldr	r3, [r3, #24]
 800588a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	011b      	lsls	r3, r3, #4
 8005898:	693a      	ldr	r2, [r7, #16]
 800589a:	4313      	orrs	r3, r2
 800589c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f023 030a 	bic.w	r3, r3, #10
 80058a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	68bb      	ldr	r3, [r7, #8]
 80058aa:	4313      	orrs	r3, r2
 80058ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	693a      	ldr	r2, [r7, #16]
 80058b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	697a      	ldr	r2, [r7, #20]
 80058b8:	621a      	str	r2, [r3, #32]
}
 80058ba:	bf00      	nop
 80058bc:	371c      	adds	r7, #28
 80058be:	46bd      	mov	sp, r7
 80058c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c4:	4770      	bx	lr

080058c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80058c6:	b480      	push	{r7}
 80058c8:	b087      	sub	sp, #28
 80058ca:	af00      	add	r7, sp, #0
 80058cc:	60f8      	str	r0, [r7, #12]
 80058ce:	60b9      	str	r1, [r7, #8]
 80058d0:	607a      	str	r2, [r7, #4]
 80058d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6a1b      	ldr	r3, [r3, #32]
 80058d8:	f023 0210 	bic.w	r2, r3, #16
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80058ec:	697b      	ldr	r3, [r7, #20]
 80058ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	021b      	lsls	r3, r3, #8
 80058f8:	697a      	ldr	r2, [r7, #20]
 80058fa:	4313      	orrs	r3, r2
 80058fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005904:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	031b      	lsls	r3, r3, #12
 800590a:	b29b      	uxth	r3, r3
 800590c:	697a      	ldr	r2, [r7, #20]
 800590e:	4313      	orrs	r3, r2
 8005910:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005912:	693b      	ldr	r3, [r7, #16]
 8005914:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005918:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800591a:	68bb      	ldr	r3, [r7, #8]
 800591c:	011b      	lsls	r3, r3, #4
 800591e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	697a      	ldr	r2, [r7, #20]
 800592c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	693a      	ldr	r2, [r7, #16]
 8005932:	621a      	str	r2, [r3, #32]
}
 8005934:	bf00      	nop
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005940:	b480      	push	{r7}
 8005942:	b087      	sub	sp, #28
 8005944:	af00      	add	r7, sp, #0
 8005946:	60f8      	str	r0, [r7, #12]
 8005948:	60b9      	str	r1, [r7, #8]
 800594a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	6a1b      	ldr	r3, [r3, #32]
 8005950:	f023 0210 	bic.w	r2, r3, #16
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	699b      	ldr	r3, [r3, #24]
 800595c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6a1b      	ldr	r3, [r3, #32]
 8005962:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800596a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	031b      	lsls	r3, r3, #12
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800597c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	011b      	lsls	r3, r3, #4
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	697a      	ldr	r2, [r7, #20]
 800598c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	693a      	ldr	r2, [r7, #16]
 8005992:	621a      	str	r2, [r3, #32]
}
 8005994:	bf00      	nop
 8005996:	371c      	adds	r7, #28
 8005998:	46bd      	mov	sp, r7
 800599a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599e:	4770      	bx	lr

080059a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b087      	sub	sp, #28
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	60f8      	str	r0, [r7, #12]
 80059a8:	60b9      	str	r1, [r7, #8]
 80059aa:	607a      	str	r2, [r7, #4]
 80059ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	6a1b      	ldr	r3, [r3, #32]
 80059b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	69db      	ldr	r3, [r3, #28]
 80059be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6a1b      	ldr	r3, [r3, #32]
 80059c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f023 0303 	bic.w	r3, r3, #3
 80059cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80059ce:	697a      	ldr	r2, [r7, #20]
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	4313      	orrs	r3, r2
 80059d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80059d6:	697b      	ldr	r3, [r7, #20]
 80059d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80059dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	011b      	lsls	r3, r3, #4
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	697a      	ldr	r2, [r7, #20]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80059ea:	693b      	ldr	r3, [r7, #16]
 80059ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80059f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	021b      	lsls	r3, r3, #8
 80059f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80059fa:	693a      	ldr	r2, [r7, #16]
 80059fc:	4313      	orrs	r3, r2
 80059fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	697a      	ldr	r2, [r7, #20]
 8005a04:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	693a      	ldr	r2, [r7, #16]
 8005a0a:	621a      	str	r2, [r3, #32]
}
 8005a0c:	bf00      	nop
 8005a0e:	371c      	adds	r7, #28
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b087      	sub	sp, #28
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	607a      	str	r2, [r7, #4]
 8005a24:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	6a1b      	ldr	r3, [r3, #32]
 8005a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	69db      	ldr	r3, [r3, #28]
 8005a36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	6a1b      	ldr	r3, [r3, #32]
 8005a3c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a44:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	021b      	lsls	r3, r3, #8
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	4313      	orrs	r3, r2
 8005a4e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005a50:	697b      	ldr	r3, [r7, #20]
 8005a52:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005a56:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	031b      	lsls	r3, r3, #12
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	697a      	ldr	r2, [r7, #20]
 8005a60:	4313      	orrs	r3, r2
 8005a62:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005a64:	693b      	ldr	r3, [r7, #16]
 8005a66:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005a6a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	031b      	lsls	r3, r3, #12
 8005a70:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005a74:	693a      	ldr	r2, [r7, #16]
 8005a76:	4313      	orrs	r3, r2
 8005a78:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	697a      	ldr	r2, [r7, #20]
 8005a7e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	693a      	ldr	r2, [r7, #16]
 8005a84:	621a      	str	r2, [r3, #32]
}
 8005a86:	bf00      	nop
 8005a88:	371c      	adds	r7, #28
 8005a8a:	46bd      	mov	sp, r7
 8005a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a90:	4770      	bx	lr

08005a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005a92:	b480      	push	{r7}
 8005a94:	b085      	sub	sp, #20
 8005a96:	af00      	add	r7, sp, #0
 8005a98:	6078      	str	r0, [r7, #4]
 8005a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	689b      	ldr	r3, [r3, #8]
 8005aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005aaa:	683a      	ldr	r2, [r7, #0]
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	4313      	orrs	r3, r2
 8005ab0:	f043 0307 	orr.w	r3, r3, #7
 8005ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	609a      	str	r2, [r3, #8]
}
 8005abc:	bf00      	nop
 8005abe:	3714      	adds	r7, #20
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b087      	sub	sp, #28
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	60f8      	str	r0, [r7, #12]
 8005ad0:	60b9      	str	r1, [r7, #8]
 8005ad2:	607a      	str	r2, [r7, #4]
 8005ad4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	689b      	ldr	r3, [r3, #8]
 8005ada:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005adc:	697b      	ldr	r3, [r7, #20]
 8005ade:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005ae2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	021a      	lsls	r2, r3, #8
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	431a      	orrs	r2, r3
 8005aec:	68bb      	ldr	r3, [r7, #8]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	697a      	ldr	r2, [r7, #20]
 8005af2:	4313      	orrs	r3, r2
 8005af4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	609a      	str	r2, [r3, #8]
}
 8005afc:	bf00      	nop
 8005afe:	371c      	adds	r7, #28
 8005b00:	46bd      	mov	sp, r7
 8005b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b06:	4770      	bx	lr

08005b08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005b08:	b480      	push	{r7}
 8005b0a:	b087      	sub	sp, #28
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	60f8      	str	r0, [r7, #12]
 8005b10:	60b9      	str	r1, [r7, #8]
 8005b12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005b14:	68bb      	ldr	r3, [r7, #8]
 8005b16:	f003 031f 	and.w	r3, r3, #31
 8005b1a:	2201      	movs	r2, #1
 8005b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1a      	ldr	r2, [r3, #32]
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	43db      	mvns	r3, r3
 8005b2a:	401a      	ands	r2, r3
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	6a1a      	ldr	r2, [r3, #32]
 8005b34:	68bb      	ldr	r3, [r7, #8]
 8005b36:	f003 031f 	and.w	r3, r3, #31
 8005b3a:	6879      	ldr	r1, [r7, #4]
 8005b3c:	fa01 f303 	lsl.w	r3, r1, r3
 8005b40:	431a      	orrs	r2, r3
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	621a      	str	r2, [r3, #32]
}
 8005b46:	bf00      	nop
 8005b48:	371c      	adds	r7, #28
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
	...

08005b54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
 8005b5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b64:	2b01      	cmp	r3, #1
 8005b66:	d101      	bne.n	8005b6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005b68:	2302      	movs	r3, #2
 8005b6a:	e05a      	b.n	8005c22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2201      	movs	r2, #1
 8005b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	2202      	movs	r2, #2
 8005b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	685b      	ldr	r3, [r3, #4]
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	68fa      	ldr	r2, [r7, #12]
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68fa      	ldr	r2, [r7, #12]
 8005ba4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	4a21      	ldr	r2, [pc, #132]	; (8005c30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005bac:	4293      	cmp	r3, r2
 8005bae:	d022      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bb8:	d01d      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	4a1d      	ldr	r2, [pc, #116]	; (8005c34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005bc0:	4293      	cmp	r3, r2
 8005bc2:	d018      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	4a1b      	ldr	r2, [pc, #108]	; (8005c38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a1a      	ldr	r2, [pc, #104]	; (8005c3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d00e      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4a18      	ldr	r2, [pc, #96]	; (8005c40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d009      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	4a17      	ldr	r2, [pc, #92]	; (8005c44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005be8:	4293      	cmp	r3, r2
 8005bea:	d004      	beq.n	8005bf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a15      	ldr	r2, [pc, #84]	; (8005c48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d10c      	bne.n	8005c10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	685b      	ldr	r3, [r3, #4]
 8005c02:	68ba      	ldr	r2, [r7, #8]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	68ba      	ldr	r2, [r7, #8]
 8005c0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2201      	movs	r2, #1
 8005c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c20:	2300      	movs	r3, #0
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3714      	adds	r7, #20
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40000400 	.word	0x40000400
 8005c38:	40000800 	.word	0x40000800
 8005c3c:	40000c00 	.word	0x40000c00
 8005c40:	40010400 	.word	0x40010400
 8005c44:	40014000 	.word	0x40014000
 8005c48:	40001800 	.word	0x40001800

08005c4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b083      	sub	sp, #12
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c54:	bf00      	nop
 8005c56:	370c      	adds	r7, #12
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5e:	4770      	bx	lr

08005c60 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c60:	b480      	push	{r7}
 8005c62:	b083      	sub	sp, #12
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c68:	bf00      	nop
 8005c6a:	370c      	adds	r7, #12
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c72:	4770      	bx	lr

08005c74 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b082      	sub	sp, #8
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2b00      	cmp	r3, #0
 8005c80:	d101      	bne.n	8005c86 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c82:	2301      	movs	r3, #1
 8005c84:	e03f      	b.n	8005d06 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d106      	bne.n	8005ca0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	2200      	movs	r2, #0
 8005c96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f7fc f8e2 	bl	8001e64 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2224      	movs	r2, #36	; 0x24
 8005ca4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	68da      	ldr	r2, [r3, #12]
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005cb6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f000 fb83 	bl	80063c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	691a      	ldr	r2, [r3, #16]
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ccc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	695a      	ldr	r2, [r3, #20]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cdc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	68da      	ldr	r2, [r3, #12]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cec:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2220      	movs	r2, #32
 8005cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005d04:	2300      	movs	r3, #0
}
 8005d06:	4618      	mov	r0, r3
 8005d08:	3708      	adds	r7, #8
 8005d0a:	46bd      	mov	sp, r7
 8005d0c:	bd80      	pop	{r7, pc}

08005d0e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d0e:	b480      	push	{r7}
 8005d10:	b085      	sub	sp, #20
 8005d12:	af00      	add	r7, sp, #0
 8005d14:	60f8      	str	r0, [r7, #12]
 8005d16:	60b9      	str	r1, [r7, #8]
 8005d18:	4613      	mov	r3, r2
 8005d1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d22:	b2db      	uxtb	r3, r3
 8005d24:	2b20      	cmp	r3, #32
 8005d26:	d130      	bne.n	8005d8a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d28:	68bb      	ldr	r3, [r7, #8]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d002      	beq.n	8005d34 <HAL_UART_Transmit_IT+0x26>
 8005d2e:	88fb      	ldrh	r3, [r7, #6]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d101      	bne.n	8005d38 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005d34:	2301      	movs	r3, #1
 8005d36:	e029      	b.n	8005d8c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d101      	bne.n	8005d46 <HAL_UART_Transmit_IT+0x38>
 8005d42:	2302      	movs	r3, #2
 8005d44:	e022      	b.n	8005d8c <HAL_UART_Transmit_IT+0x7e>
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2201      	movs	r2, #1
 8005d4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	88fa      	ldrh	r2, [r7, #6]
 8005d58:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	88fa      	ldrh	r2, [r7, #6]
 8005d5e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2200      	movs	r2, #0
 8005d64:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	2221      	movs	r2, #33	; 0x21
 8005d6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	2200      	movs	r2, #0
 8005d72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	68da      	ldr	r2, [r3, #12]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005d84:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005d86:	2300      	movs	r3, #0
 8005d88:	e000      	b.n	8005d8c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005d8a:	2302      	movs	r3, #2
  }
}
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	3714      	adds	r7, #20
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b08a      	sub	sp, #40	; 0x28
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	68db      	ldr	r3, [r3, #12]
 8005dae:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	695b      	ldr	r3, [r3, #20]
 8005db6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dc2:	f003 030f 	and.w	r3, r3, #15
 8005dc6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10d      	bne.n	8005dea <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd0:	f003 0320 	and.w	r3, r3, #32
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	d008      	beq.n	8005dea <HAL_UART_IRQHandler+0x52>
 8005dd8:	6a3b      	ldr	r3, [r7, #32]
 8005dda:	f003 0320 	and.w	r3, r3, #32
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d003      	beq.n	8005dea <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fa57 	bl	8006296 <UART_Receive_IT>
      return;
 8005de8:	e17c      	b.n	80060e4 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005dea:	69bb      	ldr	r3, [r7, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	f000 80b1 	beq.w	8005f54 <HAL_UART_IRQHandler+0x1bc>
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	f003 0301 	and.w	r3, r3, #1
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d105      	bne.n	8005e08 <HAL_UART_IRQHandler+0x70>
 8005dfc:	6a3b      	ldr	r3, [r7, #32]
 8005dfe:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	f000 80a6 	beq.w	8005f54 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005e08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e0a:	f003 0301 	and.w	r3, r3, #1
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00a      	beq.n	8005e28 <HAL_UART_IRQHandler+0x90>
 8005e12:	6a3b      	ldr	r3, [r7, #32]
 8005e14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d005      	beq.n	8005e28 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	f043 0201 	orr.w	r2, r3, #1
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	f003 0304 	and.w	r3, r3, #4
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d00a      	beq.n	8005e48 <HAL_UART_IRQHandler+0xb0>
 8005e32:	69fb      	ldr	r3, [r7, #28]
 8005e34:	f003 0301 	and.w	r3, r3, #1
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d005      	beq.n	8005e48 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e40:	f043 0202 	orr.w	r2, r3, #2
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	f003 0302 	and.w	r3, r3, #2
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d00a      	beq.n	8005e68 <HAL_UART_IRQHandler+0xd0>
 8005e52:	69fb      	ldr	r3, [r7, #28]
 8005e54:	f003 0301 	and.w	r3, r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	d005      	beq.n	8005e68 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e60:	f043 0204 	orr.w	r2, r3, #4
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6a:	f003 0308 	and.w	r3, r3, #8
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d00f      	beq.n	8005e92 <HAL_UART_IRQHandler+0xfa>
 8005e72:	6a3b      	ldr	r3, [r7, #32]
 8005e74:	f003 0320 	and.w	r3, r3, #32
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d104      	bne.n	8005e86 <HAL_UART_IRQHandler+0xee>
 8005e7c:	69fb      	ldr	r3, [r7, #28]
 8005e7e:	f003 0301 	and.w	r3, r3, #1
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d005      	beq.n	8005e92 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e8a:	f043 0208 	orr.w	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	f000 811f 	beq.w	80060da <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9e:	f003 0320 	and.w	r3, r3, #32
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d007      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x11e>
 8005ea6:	6a3b      	ldr	r3, [r7, #32]
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d002      	beq.n	8005eb6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f000 f9f0 	bl	8006296 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	695b      	ldr	r3, [r3, #20]
 8005ebc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec0:	2b40      	cmp	r3, #64	; 0x40
 8005ec2:	bf0c      	ite	eq
 8005ec4:	2301      	moveq	r3, #1
 8005ec6:	2300      	movne	r3, #0
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed0:	f003 0308 	and.w	r3, r3, #8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <HAL_UART_IRQHandler+0x146>
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d031      	beq.n	8005f42 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 f930 	bl	8006144 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	695b      	ldr	r3, [r3, #20]
 8005eea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eee:	2b40      	cmp	r3, #64	; 0x40
 8005ef0:	d123      	bne.n	8005f3a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	695a      	ldr	r2, [r3, #20]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f00:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d013      	beq.n	8005f32 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f0e:	4a77      	ldr	r2, [pc, #476]	; (80060ec <HAL_UART_IRQHandler+0x354>)
 8005f10:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f16:	4618      	mov	r0, r3
 8005f18:	f7fc ff62 	bl	8002de0 <HAL_DMA_Abort_IT>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d016      	beq.n	8005f50 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f28:	687a      	ldr	r2, [r7, #4]
 8005f2a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	e00e      	b.n	8005f50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f8f0 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f38:	e00a      	b.n	8005f50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f8ec 	bl	8006118 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f40:	e006      	b.n	8005f50 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 f8e8 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005f4e:	e0c4      	b.n	80060da <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f50:	bf00      	nop
    return;
 8005f52:	e0c2      	b.n	80060da <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f58:	2b01      	cmp	r3, #1
 8005f5a:	f040 80a2 	bne.w	80060a2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005f5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f60:	f003 0310 	and.w	r3, r3, #16
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f000 809c 	beq.w	80060a2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005f6a:	6a3b      	ldr	r3, [r7, #32]
 8005f6c:	f003 0310 	and.w	r3, r3, #16
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	f000 8096 	beq.w	80060a2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f76:	2300      	movs	r3, #0
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	60fb      	str	r3, [r7, #12]
 8005f8a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	695b      	ldr	r3, [r3, #20]
 8005f92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f96:	2b40      	cmp	r3, #64	; 0x40
 8005f98:	d14f      	bne.n	800603a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	685b      	ldr	r3, [r3, #4]
 8005fa2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005fa4:	8a3b      	ldrh	r3, [r7, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f000 8099 	beq.w	80060de <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005fb0:	8a3a      	ldrh	r2, [r7, #16]
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	f080 8093 	bcs.w	80060de <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	8a3a      	ldrh	r2, [r7, #16]
 8005fbc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fc2:	69db      	ldr	r3, [r3, #28]
 8005fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fc8:	d02b      	beq.n	8006022 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	68da      	ldr	r2, [r3, #12]
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005fd8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	695a      	ldr	r2, [r3, #20]
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f022 0201 	bic.w	r2, r2, #1
 8005fe8:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	695a      	ldr	r2, [r3, #20]
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ff8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68da      	ldr	r2, [r3, #12]
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	f022 0210 	bic.w	r2, r2, #16
 8006016:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800601c:	4618      	mov	r0, r3
 800601e:	f7fc fe6f 	bl	8002d00 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800602a:	b29b      	uxth	r3, r3
 800602c:	1ad3      	subs	r3, r2, r3
 800602e:	b29b      	uxth	r3, r3
 8006030:	4619      	mov	r1, r3
 8006032:	6878      	ldr	r0, [r7, #4]
 8006034:	f000 f87a 	bl	800612c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006038:	e051      	b.n	80060de <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006042:	b29b      	uxth	r3, r3
 8006044:	1ad3      	subs	r3, r2, r3
 8006046:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800604c:	b29b      	uxth	r3, r3
 800604e:	2b00      	cmp	r3, #0
 8006050:	d047      	beq.n	80060e2 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8006052:	8a7b      	ldrh	r3, [r7, #18]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d044      	beq.n	80060e2 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	68da      	ldr	r2, [r3, #12]
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006066:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695a      	ldr	r2, [r3, #20]
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0201 	bic.w	r2, r2, #1
 8006076:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2220      	movs	r2, #32
 800607c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2200      	movs	r2, #0
 8006084:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f022 0210 	bic.w	r2, r2, #16
 8006094:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006096:	8a7b      	ldrh	r3, [r7, #18]
 8006098:	4619      	mov	r1, r3
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f000 f846 	bl	800612c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80060a0:	e01f      	b.n	80060e2 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80060a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d008      	beq.n	80060be <HAL_UART_IRQHandler+0x326>
 80060ac:	6a3b      	ldr	r3, [r7, #32]
 80060ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 f885 	bl	80061c6 <UART_Transmit_IT>
    return;
 80060bc:	e012      	b.n	80060e4 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80060be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d00d      	beq.n	80060e4 <HAL_UART_IRQHandler+0x34c>
 80060c8:	6a3b      	ldr	r3, [r7, #32]
 80060ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d008      	beq.n	80060e4 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 f8c7 	bl	8006266 <UART_EndTransmit_IT>
    return;
 80060d8:	e004      	b.n	80060e4 <HAL_UART_IRQHandler+0x34c>
    return;
 80060da:	bf00      	nop
 80060dc:	e002      	b.n	80060e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80060de:	bf00      	nop
 80060e0:	e000      	b.n	80060e4 <HAL_UART_IRQHandler+0x34c>
      return;
 80060e2:	bf00      	nop
  }
}
 80060e4:	3728      	adds	r7, #40	; 0x28
 80060e6:	46bd      	mov	sp, r7
 80060e8:	bd80      	pop	{r7, pc}
 80060ea:	bf00      	nop
 80060ec:	0800619f 	.word	0x0800619f

080060f0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80060f0:	b480      	push	{r7}
 80060f2:	b083      	sub	sp, #12
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80060f8:	bf00      	nop
 80060fa:	370c      	adds	r7, #12
 80060fc:	46bd      	mov	sp, r7
 80060fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006102:	4770      	bx	lr

08006104 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006104:	b480      	push	{r7}
 8006106:	b083      	sub	sp, #12
 8006108:	af00      	add	r7, sp, #0
 800610a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800610c:	bf00      	nop
 800610e:	370c      	adds	r7, #12
 8006110:	46bd      	mov	sp, r7
 8006112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006116:	4770      	bx	lr

08006118 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006118:	b480      	push	{r7}
 800611a:	b083      	sub	sp, #12
 800611c:	af00      	add	r7, sp, #0
 800611e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006120:	bf00      	nop
 8006122:	370c      	adds	r7, #12
 8006124:	46bd      	mov	sp, r7
 8006126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800612a:	4770      	bx	lr

0800612c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800612c:	b480      	push	{r7}
 800612e:	b083      	sub	sp, #12
 8006130:	af00      	add	r7, sp, #0
 8006132:	6078      	str	r0, [r7, #4]
 8006134:	460b      	mov	r3, r1
 8006136:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006138:	bf00      	nop
 800613a:	370c      	adds	r7, #12
 800613c:	46bd      	mov	sp, r7
 800613e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006142:	4770      	bx	lr

08006144 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006144:	b480      	push	{r7}
 8006146:	b083      	sub	sp, #12
 8006148:	af00      	add	r7, sp, #0
 800614a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	68da      	ldr	r2, [r3, #12]
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800615a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695a      	ldr	r2, [r3, #20]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f022 0201 	bic.w	r2, r2, #1
 800616a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006170:	2b01      	cmp	r3, #1
 8006172:	d107      	bne.n	8006184 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	68da      	ldr	r2, [r3, #12]
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f022 0210 	bic.w	r2, r2, #16
 8006182:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2220      	movs	r2, #32
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2200      	movs	r2, #0
 8006190:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006192:	bf00      	nop
 8006194:	370c      	adds	r7, #12
 8006196:	46bd      	mov	sp, r7
 8006198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800619c:	4770      	bx	lr

0800619e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800619e:	b580      	push	{r7, lr}
 80061a0:	b084      	sub	sp, #16
 80061a2:	af00      	add	r7, sp, #0
 80061a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	2200      	movs	r2, #0
 80061b0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80061b8:	68f8      	ldr	r0, [r7, #12]
 80061ba:	f7ff ffad 	bl	8006118 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}

080061c6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80061c6:	b480      	push	{r7}
 80061c8:	b085      	sub	sp, #20
 80061ca:	af00      	add	r7, sp, #0
 80061cc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061d4:	b2db      	uxtb	r3, r3
 80061d6:	2b21      	cmp	r3, #33	; 0x21
 80061d8:	d13e      	bne.n	8006258 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	689b      	ldr	r3, [r3, #8]
 80061de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061e2:	d114      	bne.n	800620e <UART_Transmit_IT+0x48>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d110      	bne.n	800620e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	6a1b      	ldr	r3, [r3, #32]
 80061f0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	881b      	ldrh	r3, [r3, #0]
 80061f6:	461a      	mov	r2, r3
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006200:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	6a1b      	ldr	r3, [r3, #32]
 8006206:	1c9a      	adds	r2, r3, #2
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	621a      	str	r2, [r3, #32]
 800620c:	e008      	b.n	8006220 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6a1b      	ldr	r3, [r3, #32]
 8006212:	1c59      	adds	r1, r3, #1
 8006214:	687a      	ldr	r2, [r7, #4]
 8006216:	6211      	str	r1, [r2, #32]
 8006218:	781a      	ldrb	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006224:	b29b      	uxth	r3, r3
 8006226:	3b01      	subs	r3, #1
 8006228:	b29b      	uxth	r3, r3
 800622a:	687a      	ldr	r2, [r7, #4]
 800622c:	4619      	mov	r1, r3
 800622e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006230:	2b00      	cmp	r3, #0
 8006232:	d10f      	bne.n	8006254 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	68da      	ldr	r2, [r3, #12]
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006242:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	68da      	ldr	r2, [r3, #12]
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006252:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006254:	2300      	movs	r3, #0
 8006256:	e000      	b.n	800625a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006258:	2302      	movs	r3, #2
  }
}
 800625a:	4618      	mov	r0, r3
 800625c:	3714      	adds	r7, #20
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr

08006266 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006266:	b580      	push	{r7, lr}
 8006268:	b082      	sub	sp, #8
 800626a:	af00      	add	r7, sp, #0
 800626c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68da      	ldr	r2, [r3, #12]
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800627c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2220      	movs	r2, #32
 8006282:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f7ff ff32 	bl	80060f0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800628c:	2300      	movs	r3, #0
}
 800628e:	4618      	mov	r0, r3
 8006290:	3708      	adds	r7, #8
 8006292:	46bd      	mov	sp, r7
 8006294:	bd80      	pop	{r7, pc}

08006296 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006296:	b580      	push	{r7, lr}
 8006298:	b084      	sub	sp, #16
 800629a:	af00      	add	r7, sp, #0
 800629c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062a4:	b2db      	uxtb	r3, r3
 80062a6:	2b22      	cmp	r3, #34	; 0x22
 80062a8:	f040 8087 	bne.w	80063ba <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062b4:	d117      	bne.n	80062e6 <UART_Receive_IT+0x50>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d113      	bne.n	80062e6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80062be:	2300      	movs	r3, #0
 80062c0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062c6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	b29b      	uxth	r3, r3
 80062d0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062d4:	b29a      	uxth	r2, r3
 80062d6:	68bb      	ldr	r3, [r7, #8]
 80062d8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062de:	1c9a      	adds	r2, r3, #2
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	629a      	str	r2, [r3, #40]	; 0x28
 80062e4:	e026      	b.n	8006334 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ea:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	689b      	ldr	r3, [r3, #8]
 80062f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80062f8:	d007      	beq.n	800630a <UART_Receive_IT+0x74>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	689b      	ldr	r3, [r3, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d10a      	bne.n	8006318 <UART_Receive_IT+0x82>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	691b      	ldr	r3, [r3, #16]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d106      	bne.n	8006318 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	b2da      	uxtb	r2, r3
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	701a      	strb	r2, [r3, #0]
 8006316:	e008      	b.n	800632a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	685b      	ldr	r3, [r3, #4]
 800631e:	b2db      	uxtb	r3, r3
 8006320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006324:	b2da      	uxtb	r2, r3
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006338:	b29b      	uxth	r3, r3
 800633a:	3b01      	subs	r3, #1
 800633c:	b29b      	uxth	r3, r3
 800633e:	687a      	ldr	r2, [r7, #4]
 8006340:	4619      	mov	r1, r3
 8006342:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006344:	2b00      	cmp	r3, #0
 8006346:	d136      	bne.n	80063b6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	68da      	ldr	r2, [r3, #12]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	f022 0220 	bic.w	r2, r2, #32
 8006356:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006366:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	695a      	ldr	r2, [r3, #20]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f022 0201 	bic.w	r2, r2, #1
 8006376:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2220      	movs	r2, #32
 800637c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006384:	2b01      	cmp	r3, #1
 8006386:	d10e      	bne.n	80063a6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	68da      	ldr	r2, [r3, #12]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f022 0210 	bic.w	r2, r2, #16
 8006396:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800639c:	4619      	mov	r1, r3
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f7ff fec4 	bl	800612c <HAL_UARTEx_RxEventCallback>
 80063a4:	e002      	b.n	80063ac <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f7ff feac 	bl	8006104 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	2200      	movs	r2, #0
 80063b0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	e002      	b.n	80063bc <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	e000      	b.n	80063bc <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80063ba:	2302      	movs	r3, #2
  }
}
 80063bc:	4618      	mov	r0, r3
 80063be:	3710      	adds	r7, #16
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bd80      	pop	{r7, pc}

080063c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063c8:	b09f      	sub	sp, #124	; 0x7c
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80063d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063da:	68d9      	ldr	r1, [r3, #12]
 80063dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063de:	681a      	ldr	r2, [r3, #0]
 80063e0:	ea40 0301 	orr.w	r3, r0, r1
 80063e4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80063e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063e8:	689a      	ldr	r2, [r3, #8]
 80063ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	431a      	orrs	r2, r3
 80063f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f2:	695b      	ldr	r3, [r3, #20]
 80063f4:	431a      	orrs	r2, r3
 80063f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80063f8:	69db      	ldr	r3, [r3, #28]
 80063fa:	4313      	orrs	r3, r2
 80063fc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80063fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68db      	ldr	r3, [r3, #12]
 8006404:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006408:	f021 010c 	bic.w	r1, r1, #12
 800640c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800640e:	681a      	ldr	r2, [r3, #0]
 8006410:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006412:	430b      	orrs	r3, r1
 8006414:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	695b      	ldr	r3, [r3, #20]
 800641c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006422:	6999      	ldr	r1, [r3, #24]
 8006424:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006426:	681a      	ldr	r2, [r3, #0]
 8006428:	ea40 0301 	orr.w	r3, r0, r1
 800642c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800642e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006430:	681a      	ldr	r2, [r3, #0]
 8006432:	4bc5      	ldr	r3, [pc, #788]	; (8006748 <UART_SetConfig+0x384>)
 8006434:	429a      	cmp	r2, r3
 8006436:	d004      	beq.n	8006442 <UART_SetConfig+0x7e>
 8006438:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	4bc3      	ldr	r3, [pc, #780]	; (800674c <UART_SetConfig+0x388>)
 800643e:	429a      	cmp	r2, r3
 8006440:	d103      	bne.n	800644a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006442:	f7fd fa25 	bl	8003890 <HAL_RCC_GetPCLK2Freq>
 8006446:	6778      	str	r0, [r7, #116]	; 0x74
 8006448:	e002      	b.n	8006450 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800644a:	f7fd fa0d 	bl	8003868 <HAL_RCC_GetPCLK1Freq>
 800644e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006452:	69db      	ldr	r3, [r3, #28]
 8006454:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006458:	f040 80b6 	bne.w	80065c8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800645c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800645e:	461c      	mov	r4, r3
 8006460:	f04f 0500 	mov.w	r5, #0
 8006464:	4622      	mov	r2, r4
 8006466:	462b      	mov	r3, r5
 8006468:	1891      	adds	r1, r2, r2
 800646a:	6439      	str	r1, [r7, #64]	; 0x40
 800646c:	415b      	adcs	r3, r3
 800646e:	647b      	str	r3, [r7, #68]	; 0x44
 8006470:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006474:	1912      	adds	r2, r2, r4
 8006476:	eb45 0303 	adc.w	r3, r5, r3
 800647a:	f04f 0000 	mov.w	r0, #0
 800647e:	f04f 0100 	mov.w	r1, #0
 8006482:	00d9      	lsls	r1, r3, #3
 8006484:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006488:	00d0      	lsls	r0, r2, #3
 800648a:	4602      	mov	r2, r0
 800648c:	460b      	mov	r3, r1
 800648e:	1911      	adds	r1, r2, r4
 8006490:	6639      	str	r1, [r7, #96]	; 0x60
 8006492:	416b      	adcs	r3, r5
 8006494:	667b      	str	r3, [r7, #100]	; 0x64
 8006496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006498:	685b      	ldr	r3, [r3, #4]
 800649a:	461a      	mov	r2, r3
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	1891      	adds	r1, r2, r2
 80064a2:	63b9      	str	r1, [r7, #56]	; 0x38
 80064a4:	415b      	adcs	r3, r3
 80064a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80064a8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80064ac:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80064b0:	f7fa fa74 	bl	800099c <__aeabi_uldivmod>
 80064b4:	4602      	mov	r2, r0
 80064b6:	460b      	mov	r3, r1
 80064b8:	4ba5      	ldr	r3, [pc, #660]	; (8006750 <UART_SetConfig+0x38c>)
 80064ba:	fba3 2302 	umull	r2, r3, r3, r2
 80064be:	095b      	lsrs	r3, r3, #5
 80064c0:	011e      	lsls	r6, r3, #4
 80064c2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80064c4:	461c      	mov	r4, r3
 80064c6:	f04f 0500 	mov.w	r5, #0
 80064ca:	4622      	mov	r2, r4
 80064cc:	462b      	mov	r3, r5
 80064ce:	1891      	adds	r1, r2, r2
 80064d0:	6339      	str	r1, [r7, #48]	; 0x30
 80064d2:	415b      	adcs	r3, r3
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80064da:	1912      	adds	r2, r2, r4
 80064dc:	eb45 0303 	adc.w	r3, r5, r3
 80064e0:	f04f 0000 	mov.w	r0, #0
 80064e4:	f04f 0100 	mov.w	r1, #0
 80064e8:	00d9      	lsls	r1, r3, #3
 80064ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064ee:	00d0      	lsls	r0, r2, #3
 80064f0:	4602      	mov	r2, r0
 80064f2:	460b      	mov	r3, r1
 80064f4:	1911      	adds	r1, r2, r4
 80064f6:	65b9      	str	r1, [r7, #88]	; 0x58
 80064f8:	416b      	adcs	r3, r5
 80064fa:	65fb      	str	r3, [r7, #92]	; 0x5c
 80064fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80064fe:	685b      	ldr	r3, [r3, #4]
 8006500:	461a      	mov	r2, r3
 8006502:	f04f 0300 	mov.w	r3, #0
 8006506:	1891      	adds	r1, r2, r2
 8006508:	62b9      	str	r1, [r7, #40]	; 0x28
 800650a:	415b      	adcs	r3, r3
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800650e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006512:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006516:	f7fa fa41 	bl	800099c <__aeabi_uldivmod>
 800651a:	4602      	mov	r2, r0
 800651c:	460b      	mov	r3, r1
 800651e:	4b8c      	ldr	r3, [pc, #560]	; (8006750 <UART_SetConfig+0x38c>)
 8006520:	fba3 1302 	umull	r1, r3, r3, r2
 8006524:	095b      	lsrs	r3, r3, #5
 8006526:	2164      	movs	r1, #100	; 0x64
 8006528:	fb01 f303 	mul.w	r3, r1, r3
 800652c:	1ad3      	subs	r3, r2, r3
 800652e:	00db      	lsls	r3, r3, #3
 8006530:	3332      	adds	r3, #50	; 0x32
 8006532:	4a87      	ldr	r2, [pc, #540]	; (8006750 <UART_SetConfig+0x38c>)
 8006534:	fba2 2303 	umull	r2, r3, r2, r3
 8006538:	095b      	lsrs	r3, r3, #5
 800653a:	005b      	lsls	r3, r3, #1
 800653c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006540:	441e      	add	r6, r3
 8006542:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006544:	4618      	mov	r0, r3
 8006546:	f04f 0100 	mov.w	r1, #0
 800654a:	4602      	mov	r2, r0
 800654c:	460b      	mov	r3, r1
 800654e:	1894      	adds	r4, r2, r2
 8006550:	623c      	str	r4, [r7, #32]
 8006552:	415b      	adcs	r3, r3
 8006554:	627b      	str	r3, [r7, #36]	; 0x24
 8006556:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800655a:	1812      	adds	r2, r2, r0
 800655c:	eb41 0303 	adc.w	r3, r1, r3
 8006560:	f04f 0400 	mov.w	r4, #0
 8006564:	f04f 0500 	mov.w	r5, #0
 8006568:	00dd      	lsls	r5, r3, #3
 800656a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800656e:	00d4      	lsls	r4, r2, #3
 8006570:	4622      	mov	r2, r4
 8006572:	462b      	mov	r3, r5
 8006574:	1814      	adds	r4, r2, r0
 8006576:	653c      	str	r4, [r7, #80]	; 0x50
 8006578:	414b      	adcs	r3, r1
 800657a:	657b      	str	r3, [r7, #84]	; 0x54
 800657c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800657e:	685b      	ldr	r3, [r3, #4]
 8006580:	461a      	mov	r2, r3
 8006582:	f04f 0300 	mov.w	r3, #0
 8006586:	1891      	adds	r1, r2, r2
 8006588:	61b9      	str	r1, [r7, #24]
 800658a:	415b      	adcs	r3, r3
 800658c:	61fb      	str	r3, [r7, #28]
 800658e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006592:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006596:	f7fa fa01 	bl	800099c <__aeabi_uldivmod>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4b6c      	ldr	r3, [pc, #432]	; (8006750 <UART_SetConfig+0x38c>)
 80065a0:	fba3 1302 	umull	r1, r3, r3, r2
 80065a4:	095b      	lsrs	r3, r3, #5
 80065a6:	2164      	movs	r1, #100	; 0x64
 80065a8:	fb01 f303 	mul.w	r3, r1, r3
 80065ac:	1ad3      	subs	r3, r2, r3
 80065ae:	00db      	lsls	r3, r3, #3
 80065b0:	3332      	adds	r3, #50	; 0x32
 80065b2:	4a67      	ldr	r2, [pc, #412]	; (8006750 <UART_SetConfig+0x38c>)
 80065b4:	fba2 2303 	umull	r2, r3, r2, r3
 80065b8:	095b      	lsrs	r3, r3, #5
 80065ba:	f003 0207 	and.w	r2, r3, #7
 80065be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4432      	add	r2, r6
 80065c4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065c6:	e0b9      	b.n	800673c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065c8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80065ca:	461c      	mov	r4, r3
 80065cc:	f04f 0500 	mov.w	r5, #0
 80065d0:	4622      	mov	r2, r4
 80065d2:	462b      	mov	r3, r5
 80065d4:	1891      	adds	r1, r2, r2
 80065d6:	6139      	str	r1, [r7, #16]
 80065d8:	415b      	adcs	r3, r3
 80065da:	617b      	str	r3, [r7, #20]
 80065dc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80065e0:	1912      	adds	r2, r2, r4
 80065e2:	eb45 0303 	adc.w	r3, r5, r3
 80065e6:	f04f 0000 	mov.w	r0, #0
 80065ea:	f04f 0100 	mov.w	r1, #0
 80065ee:	00d9      	lsls	r1, r3, #3
 80065f0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80065f4:	00d0      	lsls	r0, r2, #3
 80065f6:	4602      	mov	r2, r0
 80065f8:	460b      	mov	r3, r1
 80065fa:	eb12 0804 	adds.w	r8, r2, r4
 80065fe:	eb43 0905 	adc.w	r9, r3, r5
 8006602:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006604:	685b      	ldr	r3, [r3, #4]
 8006606:	4618      	mov	r0, r3
 8006608:	f04f 0100 	mov.w	r1, #0
 800660c:	f04f 0200 	mov.w	r2, #0
 8006610:	f04f 0300 	mov.w	r3, #0
 8006614:	008b      	lsls	r3, r1, #2
 8006616:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800661a:	0082      	lsls	r2, r0, #2
 800661c:	4640      	mov	r0, r8
 800661e:	4649      	mov	r1, r9
 8006620:	f7fa f9bc 	bl	800099c <__aeabi_uldivmod>
 8006624:	4602      	mov	r2, r0
 8006626:	460b      	mov	r3, r1
 8006628:	4b49      	ldr	r3, [pc, #292]	; (8006750 <UART_SetConfig+0x38c>)
 800662a:	fba3 2302 	umull	r2, r3, r3, r2
 800662e:	095b      	lsrs	r3, r3, #5
 8006630:	011e      	lsls	r6, r3, #4
 8006632:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006634:	4618      	mov	r0, r3
 8006636:	f04f 0100 	mov.w	r1, #0
 800663a:	4602      	mov	r2, r0
 800663c:	460b      	mov	r3, r1
 800663e:	1894      	adds	r4, r2, r2
 8006640:	60bc      	str	r4, [r7, #8]
 8006642:	415b      	adcs	r3, r3
 8006644:	60fb      	str	r3, [r7, #12]
 8006646:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800664a:	1812      	adds	r2, r2, r0
 800664c:	eb41 0303 	adc.w	r3, r1, r3
 8006650:	f04f 0400 	mov.w	r4, #0
 8006654:	f04f 0500 	mov.w	r5, #0
 8006658:	00dd      	lsls	r5, r3, #3
 800665a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800665e:	00d4      	lsls	r4, r2, #3
 8006660:	4622      	mov	r2, r4
 8006662:	462b      	mov	r3, r5
 8006664:	1814      	adds	r4, r2, r0
 8006666:	64bc      	str	r4, [r7, #72]	; 0x48
 8006668:	414b      	adcs	r3, r1
 800666a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800666c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	4618      	mov	r0, r3
 8006672:	f04f 0100 	mov.w	r1, #0
 8006676:	f04f 0200 	mov.w	r2, #0
 800667a:	f04f 0300 	mov.w	r3, #0
 800667e:	008b      	lsls	r3, r1, #2
 8006680:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006684:	0082      	lsls	r2, r0, #2
 8006686:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800668a:	f7fa f987 	bl	800099c <__aeabi_uldivmod>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	4b2f      	ldr	r3, [pc, #188]	; (8006750 <UART_SetConfig+0x38c>)
 8006694:	fba3 1302 	umull	r1, r3, r3, r2
 8006698:	095b      	lsrs	r3, r3, #5
 800669a:	2164      	movs	r1, #100	; 0x64
 800669c:	fb01 f303 	mul.w	r3, r1, r3
 80066a0:	1ad3      	subs	r3, r2, r3
 80066a2:	011b      	lsls	r3, r3, #4
 80066a4:	3332      	adds	r3, #50	; 0x32
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <UART_SetConfig+0x38c>)
 80066a8:	fba2 2303 	umull	r2, r3, r2, r3
 80066ac:	095b      	lsrs	r3, r3, #5
 80066ae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066b2:	441e      	add	r6, r3
 80066b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80066b6:	4618      	mov	r0, r3
 80066b8:	f04f 0100 	mov.w	r1, #0
 80066bc:	4602      	mov	r2, r0
 80066be:	460b      	mov	r3, r1
 80066c0:	1894      	adds	r4, r2, r2
 80066c2:	603c      	str	r4, [r7, #0]
 80066c4:	415b      	adcs	r3, r3
 80066c6:	607b      	str	r3, [r7, #4]
 80066c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066cc:	1812      	adds	r2, r2, r0
 80066ce:	eb41 0303 	adc.w	r3, r1, r3
 80066d2:	f04f 0400 	mov.w	r4, #0
 80066d6:	f04f 0500 	mov.w	r5, #0
 80066da:	00dd      	lsls	r5, r3, #3
 80066dc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80066e0:	00d4      	lsls	r4, r2, #3
 80066e2:	4622      	mov	r2, r4
 80066e4:	462b      	mov	r3, r5
 80066e6:	eb12 0a00 	adds.w	sl, r2, r0
 80066ea:	eb43 0b01 	adc.w	fp, r3, r1
 80066ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80066f0:	685b      	ldr	r3, [r3, #4]
 80066f2:	4618      	mov	r0, r3
 80066f4:	f04f 0100 	mov.w	r1, #0
 80066f8:	f04f 0200 	mov.w	r2, #0
 80066fc:	f04f 0300 	mov.w	r3, #0
 8006700:	008b      	lsls	r3, r1, #2
 8006702:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006706:	0082      	lsls	r2, r0, #2
 8006708:	4650      	mov	r0, sl
 800670a:	4659      	mov	r1, fp
 800670c:	f7fa f946 	bl	800099c <__aeabi_uldivmod>
 8006710:	4602      	mov	r2, r0
 8006712:	460b      	mov	r3, r1
 8006714:	4b0e      	ldr	r3, [pc, #56]	; (8006750 <UART_SetConfig+0x38c>)
 8006716:	fba3 1302 	umull	r1, r3, r3, r2
 800671a:	095b      	lsrs	r3, r3, #5
 800671c:	2164      	movs	r1, #100	; 0x64
 800671e:	fb01 f303 	mul.w	r3, r1, r3
 8006722:	1ad3      	subs	r3, r2, r3
 8006724:	011b      	lsls	r3, r3, #4
 8006726:	3332      	adds	r3, #50	; 0x32
 8006728:	4a09      	ldr	r2, [pc, #36]	; (8006750 <UART_SetConfig+0x38c>)
 800672a:	fba2 2303 	umull	r2, r3, r2, r3
 800672e:	095b      	lsrs	r3, r3, #5
 8006730:	f003 020f 	and.w	r2, r3, #15
 8006734:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	4432      	add	r2, r6
 800673a:	609a      	str	r2, [r3, #8]
}
 800673c:	bf00      	nop
 800673e:	377c      	adds	r7, #124	; 0x7c
 8006740:	46bd      	mov	sp, r7
 8006742:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006746:	bf00      	nop
 8006748:	40011000 	.word	0x40011000
 800674c:	40011400 	.word	0x40011400
 8006750:	51eb851f 	.word	0x51eb851f

08006754 <__errno>:
 8006754:	4b01      	ldr	r3, [pc, #4]	; (800675c <__errno+0x8>)
 8006756:	6818      	ldr	r0, [r3, #0]
 8006758:	4770      	bx	lr
 800675a:	bf00      	nop
 800675c:	20000014 	.word	0x20000014

08006760 <__libc_init_array>:
 8006760:	b570      	push	{r4, r5, r6, lr}
 8006762:	4d0d      	ldr	r5, [pc, #52]	; (8006798 <__libc_init_array+0x38>)
 8006764:	4c0d      	ldr	r4, [pc, #52]	; (800679c <__libc_init_array+0x3c>)
 8006766:	1b64      	subs	r4, r4, r5
 8006768:	10a4      	asrs	r4, r4, #2
 800676a:	2600      	movs	r6, #0
 800676c:	42a6      	cmp	r6, r4
 800676e:	d109      	bne.n	8006784 <__libc_init_array+0x24>
 8006770:	4d0b      	ldr	r5, [pc, #44]	; (80067a0 <__libc_init_array+0x40>)
 8006772:	4c0c      	ldr	r4, [pc, #48]	; (80067a4 <__libc_init_array+0x44>)
 8006774:	f000 fc4e 	bl	8007014 <_init>
 8006778:	1b64      	subs	r4, r4, r5
 800677a:	10a4      	asrs	r4, r4, #2
 800677c:	2600      	movs	r6, #0
 800677e:	42a6      	cmp	r6, r4
 8006780:	d105      	bne.n	800678e <__libc_init_array+0x2e>
 8006782:	bd70      	pop	{r4, r5, r6, pc}
 8006784:	f855 3b04 	ldr.w	r3, [r5], #4
 8006788:	4798      	blx	r3
 800678a:	3601      	adds	r6, #1
 800678c:	e7ee      	b.n	800676c <__libc_init_array+0xc>
 800678e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006792:	4798      	blx	r3
 8006794:	3601      	adds	r6, #1
 8006796:	e7f2      	b.n	800677e <__libc_init_array+0x1e>
 8006798:	080070e8 	.word	0x080070e8
 800679c:	080070e8 	.word	0x080070e8
 80067a0:	080070e8 	.word	0x080070e8
 80067a4:	080070ec 	.word	0x080070ec

080067a8 <memset>:
 80067a8:	4402      	add	r2, r0
 80067aa:	4603      	mov	r3, r0
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d100      	bne.n	80067b2 <memset+0xa>
 80067b0:	4770      	bx	lr
 80067b2:	f803 1b01 	strb.w	r1, [r3], #1
 80067b6:	e7f9      	b.n	80067ac <memset+0x4>

080067b8 <siprintf>:
 80067b8:	b40e      	push	{r1, r2, r3}
 80067ba:	b500      	push	{lr}
 80067bc:	b09c      	sub	sp, #112	; 0x70
 80067be:	ab1d      	add	r3, sp, #116	; 0x74
 80067c0:	9002      	str	r0, [sp, #8]
 80067c2:	9006      	str	r0, [sp, #24]
 80067c4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80067c8:	4809      	ldr	r0, [pc, #36]	; (80067f0 <siprintf+0x38>)
 80067ca:	9107      	str	r1, [sp, #28]
 80067cc:	9104      	str	r1, [sp, #16]
 80067ce:	4909      	ldr	r1, [pc, #36]	; (80067f4 <siprintf+0x3c>)
 80067d0:	f853 2b04 	ldr.w	r2, [r3], #4
 80067d4:	9105      	str	r1, [sp, #20]
 80067d6:	6800      	ldr	r0, [r0, #0]
 80067d8:	9301      	str	r3, [sp, #4]
 80067da:	a902      	add	r1, sp, #8
 80067dc:	f000 f868 	bl	80068b0 <_svfiprintf_r>
 80067e0:	9b02      	ldr	r3, [sp, #8]
 80067e2:	2200      	movs	r2, #0
 80067e4:	701a      	strb	r2, [r3, #0]
 80067e6:	b01c      	add	sp, #112	; 0x70
 80067e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80067ec:	b003      	add	sp, #12
 80067ee:	4770      	bx	lr
 80067f0:	20000014 	.word	0x20000014
 80067f4:	ffff0208 	.word	0xffff0208

080067f8 <__ssputs_r>:
 80067f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067fc:	688e      	ldr	r6, [r1, #8]
 80067fe:	429e      	cmp	r6, r3
 8006800:	4682      	mov	sl, r0
 8006802:	460c      	mov	r4, r1
 8006804:	4690      	mov	r8, r2
 8006806:	461f      	mov	r7, r3
 8006808:	d838      	bhi.n	800687c <__ssputs_r+0x84>
 800680a:	898a      	ldrh	r2, [r1, #12]
 800680c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006810:	d032      	beq.n	8006878 <__ssputs_r+0x80>
 8006812:	6825      	ldr	r5, [r4, #0]
 8006814:	6909      	ldr	r1, [r1, #16]
 8006816:	eba5 0901 	sub.w	r9, r5, r1
 800681a:	6965      	ldr	r5, [r4, #20]
 800681c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006820:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006824:	3301      	adds	r3, #1
 8006826:	444b      	add	r3, r9
 8006828:	106d      	asrs	r5, r5, #1
 800682a:	429d      	cmp	r5, r3
 800682c:	bf38      	it	cc
 800682e:	461d      	movcc	r5, r3
 8006830:	0553      	lsls	r3, r2, #21
 8006832:	d531      	bpl.n	8006898 <__ssputs_r+0xa0>
 8006834:	4629      	mov	r1, r5
 8006836:	f000 fb47 	bl	8006ec8 <_malloc_r>
 800683a:	4606      	mov	r6, r0
 800683c:	b950      	cbnz	r0, 8006854 <__ssputs_r+0x5c>
 800683e:	230c      	movs	r3, #12
 8006840:	f8ca 3000 	str.w	r3, [sl]
 8006844:	89a3      	ldrh	r3, [r4, #12]
 8006846:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800684a:	81a3      	strh	r3, [r4, #12]
 800684c:	f04f 30ff 	mov.w	r0, #4294967295
 8006850:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006854:	6921      	ldr	r1, [r4, #16]
 8006856:	464a      	mov	r2, r9
 8006858:	f000 fabe 	bl	8006dd8 <memcpy>
 800685c:	89a3      	ldrh	r3, [r4, #12]
 800685e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006862:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006866:	81a3      	strh	r3, [r4, #12]
 8006868:	6126      	str	r6, [r4, #16]
 800686a:	6165      	str	r5, [r4, #20]
 800686c:	444e      	add	r6, r9
 800686e:	eba5 0509 	sub.w	r5, r5, r9
 8006872:	6026      	str	r6, [r4, #0]
 8006874:	60a5      	str	r5, [r4, #8]
 8006876:	463e      	mov	r6, r7
 8006878:	42be      	cmp	r6, r7
 800687a:	d900      	bls.n	800687e <__ssputs_r+0x86>
 800687c:	463e      	mov	r6, r7
 800687e:	4632      	mov	r2, r6
 8006880:	6820      	ldr	r0, [r4, #0]
 8006882:	4641      	mov	r1, r8
 8006884:	f000 fab6 	bl	8006df4 <memmove>
 8006888:	68a3      	ldr	r3, [r4, #8]
 800688a:	6822      	ldr	r2, [r4, #0]
 800688c:	1b9b      	subs	r3, r3, r6
 800688e:	4432      	add	r2, r6
 8006890:	60a3      	str	r3, [r4, #8]
 8006892:	6022      	str	r2, [r4, #0]
 8006894:	2000      	movs	r0, #0
 8006896:	e7db      	b.n	8006850 <__ssputs_r+0x58>
 8006898:	462a      	mov	r2, r5
 800689a:	f000 fb6f 	bl	8006f7c <_realloc_r>
 800689e:	4606      	mov	r6, r0
 80068a0:	2800      	cmp	r0, #0
 80068a2:	d1e1      	bne.n	8006868 <__ssputs_r+0x70>
 80068a4:	6921      	ldr	r1, [r4, #16]
 80068a6:	4650      	mov	r0, sl
 80068a8:	f000 fabe 	bl	8006e28 <_free_r>
 80068ac:	e7c7      	b.n	800683e <__ssputs_r+0x46>
	...

080068b0 <_svfiprintf_r>:
 80068b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068b4:	4698      	mov	r8, r3
 80068b6:	898b      	ldrh	r3, [r1, #12]
 80068b8:	061b      	lsls	r3, r3, #24
 80068ba:	b09d      	sub	sp, #116	; 0x74
 80068bc:	4607      	mov	r7, r0
 80068be:	460d      	mov	r5, r1
 80068c0:	4614      	mov	r4, r2
 80068c2:	d50e      	bpl.n	80068e2 <_svfiprintf_r+0x32>
 80068c4:	690b      	ldr	r3, [r1, #16]
 80068c6:	b963      	cbnz	r3, 80068e2 <_svfiprintf_r+0x32>
 80068c8:	2140      	movs	r1, #64	; 0x40
 80068ca:	f000 fafd 	bl	8006ec8 <_malloc_r>
 80068ce:	6028      	str	r0, [r5, #0]
 80068d0:	6128      	str	r0, [r5, #16]
 80068d2:	b920      	cbnz	r0, 80068de <_svfiprintf_r+0x2e>
 80068d4:	230c      	movs	r3, #12
 80068d6:	603b      	str	r3, [r7, #0]
 80068d8:	f04f 30ff 	mov.w	r0, #4294967295
 80068dc:	e0d1      	b.n	8006a82 <_svfiprintf_r+0x1d2>
 80068de:	2340      	movs	r3, #64	; 0x40
 80068e0:	616b      	str	r3, [r5, #20]
 80068e2:	2300      	movs	r3, #0
 80068e4:	9309      	str	r3, [sp, #36]	; 0x24
 80068e6:	2320      	movs	r3, #32
 80068e8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068ec:	f8cd 800c 	str.w	r8, [sp, #12]
 80068f0:	2330      	movs	r3, #48	; 0x30
 80068f2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006a9c <_svfiprintf_r+0x1ec>
 80068f6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068fa:	f04f 0901 	mov.w	r9, #1
 80068fe:	4623      	mov	r3, r4
 8006900:	469a      	mov	sl, r3
 8006902:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006906:	b10a      	cbz	r2, 800690c <_svfiprintf_r+0x5c>
 8006908:	2a25      	cmp	r2, #37	; 0x25
 800690a:	d1f9      	bne.n	8006900 <_svfiprintf_r+0x50>
 800690c:	ebba 0b04 	subs.w	fp, sl, r4
 8006910:	d00b      	beq.n	800692a <_svfiprintf_r+0x7a>
 8006912:	465b      	mov	r3, fp
 8006914:	4622      	mov	r2, r4
 8006916:	4629      	mov	r1, r5
 8006918:	4638      	mov	r0, r7
 800691a:	f7ff ff6d 	bl	80067f8 <__ssputs_r>
 800691e:	3001      	adds	r0, #1
 8006920:	f000 80aa 	beq.w	8006a78 <_svfiprintf_r+0x1c8>
 8006924:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006926:	445a      	add	r2, fp
 8006928:	9209      	str	r2, [sp, #36]	; 0x24
 800692a:	f89a 3000 	ldrb.w	r3, [sl]
 800692e:	2b00      	cmp	r3, #0
 8006930:	f000 80a2 	beq.w	8006a78 <_svfiprintf_r+0x1c8>
 8006934:	2300      	movs	r3, #0
 8006936:	f04f 32ff 	mov.w	r2, #4294967295
 800693a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800693e:	f10a 0a01 	add.w	sl, sl, #1
 8006942:	9304      	str	r3, [sp, #16]
 8006944:	9307      	str	r3, [sp, #28]
 8006946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800694a:	931a      	str	r3, [sp, #104]	; 0x68
 800694c:	4654      	mov	r4, sl
 800694e:	2205      	movs	r2, #5
 8006950:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006954:	4851      	ldr	r0, [pc, #324]	; (8006a9c <_svfiprintf_r+0x1ec>)
 8006956:	f7f9 fc63 	bl	8000220 <memchr>
 800695a:	9a04      	ldr	r2, [sp, #16]
 800695c:	b9d8      	cbnz	r0, 8006996 <_svfiprintf_r+0xe6>
 800695e:	06d0      	lsls	r0, r2, #27
 8006960:	bf44      	itt	mi
 8006962:	2320      	movmi	r3, #32
 8006964:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006968:	0711      	lsls	r1, r2, #28
 800696a:	bf44      	itt	mi
 800696c:	232b      	movmi	r3, #43	; 0x2b
 800696e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006972:	f89a 3000 	ldrb.w	r3, [sl]
 8006976:	2b2a      	cmp	r3, #42	; 0x2a
 8006978:	d015      	beq.n	80069a6 <_svfiprintf_r+0xf6>
 800697a:	9a07      	ldr	r2, [sp, #28]
 800697c:	4654      	mov	r4, sl
 800697e:	2000      	movs	r0, #0
 8006980:	f04f 0c0a 	mov.w	ip, #10
 8006984:	4621      	mov	r1, r4
 8006986:	f811 3b01 	ldrb.w	r3, [r1], #1
 800698a:	3b30      	subs	r3, #48	; 0x30
 800698c:	2b09      	cmp	r3, #9
 800698e:	d94e      	bls.n	8006a2e <_svfiprintf_r+0x17e>
 8006990:	b1b0      	cbz	r0, 80069c0 <_svfiprintf_r+0x110>
 8006992:	9207      	str	r2, [sp, #28]
 8006994:	e014      	b.n	80069c0 <_svfiprintf_r+0x110>
 8006996:	eba0 0308 	sub.w	r3, r0, r8
 800699a:	fa09 f303 	lsl.w	r3, r9, r3
 800699e:	4313      	orrs	r3, r2
 80069a0:	9304      	str	r3, [sp, #16]
 80069a2:	46a2      	mov	sl, r4
 80069a4:	e7d2      	b.n	800694c <_svfiprintf_r+0x9c>
 80069a6:	9b03      	ldr	r3, [sp, #12]
 80069a8:	1d19      	adds	r1, r3, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	9103      	str	r1, [sp, #12]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	bfbb      	ittet	lt
 80069b2:	425b      	neglt	r3, r3
 80069b4:	f042 0202 	orrlt.w	r2, r2, #2
 80069b8:	9307      	strge	r3, [sp, #28]
 80069ba:	9307      	strlt	r3, [sp, #28]
 80069bc:	bfb8      	it	lt
 80069be:	9204      	strlt	r2, [sp, #16]
 80069c0:	7823      	ldrb	r3, [r4, #0]
 80069c2:	2b2e      	cmp	r3, #46	; 0x2e
 80069c4:	d10c      	bne.n	80069e0 <_svfiprintf_r+0x130>
 80069c6:	7863      	ldrb	r3, [r4, #1]
 80069c8:	2b2a      	cmp	r3, #42	; 0x2a
 80069ca:	d135      	bne.n	8006a38 <_svfiprintf_r+0x188>
 80069cc:	9b03      	ldr	r3, [sp, #12]
 80069ce:	1d1a      	adds	r2, r3, #4
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	9203      	str	r2, [sp, #12]
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	bfb8      	it	lt
 80069d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80069dc:	3402      	adds	r4, #2
 80069de:	9305      	str	r3, [sp, #20]
 80069e0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006aac <_svfiprintf_r+0x1fc>
 80069e4:	7821      	ldrb	r1, [r4, #0]
 80069e6:	2203      	movs	r2, #3
 80069e8:	4650      	mov	r0, sl
 80069ea:	f7f9 fc19 	bl	8000220 <memchr>
 80069ee:	b140      	cbz	r0, 8006a02 <_svfiprintf_r+0x152>
 80069f0:	2340      	movs	r3, #64	; 0x40
 80069f2:	eba0 000a 	sub.w	r0, r0, sl
 80069f6:	fa03 f000 	lsl.w	r0, r3, r0
 80069fa:	9b04      	ldr	r3, [sp, #16]
 80069fc:	4303      	orrs	r3, r0
 80069fe:	3401      	adds	r4, #1
 8006a00:	9304      	str	r3, [sp, #16]
 8006a02:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a06:	4826      	ldr	r0, [pc, #152]	; (8006aa0 <_svfiprintf_r+0x1f0>)
 8006a08:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a0c:	2206      	movs	r2, #6
 8006a0e:	f7f9 fc07 	bl	8000220 <memchr>
 8006a12:	2800      	cmp	r0, #0
 8006a14:	d038      	beq.n	8006a88 <_svfiprintf_r+0x1d8>
 8006a16:	4b23      	ldr	r3, [pc, #140]	; (8006aa4 <_svfiprintf_r+0x1f4>)
 8006a18:	bb1b      	cbnz	r3, 8006a62 <_svfiprintf_r+0x1b2>
 8006a1a:	9b03      	ldr	r3, [sp, #12]
 8006a1c:	3307      	adds	r3, #7
 8006a1e:	f023 0307 	bic.w	r3, r3, #7
 8006a22:	3308      	adds	r3, #8
 8006a24:	9303      	str	r3, [sp, #12]
 8006a26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006a28:	4433      	add	r3, r6
 8006a2a:	9309      	str	r3, [sp, #36]	; 0x24
 8006a2c:	e767      	b.n	80068fe <_svfiprintf_r+0x4e>
 8006a2e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a32:	460c      	mov	r4, r1
 8006a34:	2001      	movs	r0, #1
 8006a36:	e7a5      	b.n	8006984 <_svfiprintf_r+0xd4>
 8006a38:	2300      	movs	r3, #0
 8006a3a:	3401      	adds	r4, #1
 8006a3c:	9305      	str	r3, [sp, #20]
 8006a3e:	4619      	mov	r1, r3
 8006a40:	f04f 0c0a 	mov.w	ip, #10
 8006a44:	4620      	mov	r0, r4
 8006a46:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a4a:	3a30      	subs	r2, #48	; 0x30
 8006a4c:	2a09      	cmp	r2, #9
 8006a4e:	d903      	bls.n	8006a58 <_svfiprintf_r+0x1a8>
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d0c5      	beq.n	80069e0 <_svfiprintf_r+0x130>
 8006a54:	9105      	str	r1, [sp, #20]
 8006a56:	e7c3      	b.n	80069e0 <_svfiprintf_r+0x130>
 8006a58:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a5c:	4604      	mov	r4, r0
 8006a5e:	2301      	movs	r3, #1
 8006a60:	e7f0      	b.n	8006a44 <_svfiprintf_r+0x194>
 8006a62:	ab03      	add	r3, sp, #12
 8006a64:	9300      	str	r3, [sp, #0]
 8006a66:	462a      	mov	r2, r5
 8006a68:	4b0f      	ldr	r3, [pc, #60]	; (8006aa8 <_svfiprintf_r+0x1f8>)
 8006a6a:	a904      	add	r1, sp, #16
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f3af 8000 	nop.w
 8006a72:	1c42      	adds	r2, r0, #1
 8006a74:	4606      	mov	r6, r0
 8006a76:	d1d6      	bne.n	8006a26 <_svfiprintf_r+0x176>
 8006a78:	89ab      	ldrh	r3, [r5, #12]
 8006a7a:	065b      	lsls	r3, r3, #25
 8006a7c:	f53f af2c 	bmi.w	80068d8 <_svfiprintf_r+0x28>
 8006a80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a82:	b01d      	add	sp, #116	; 0x74
 8006a84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a88:	ab03      	add	r3, sp, #12
 8006a8a:	9300      	str	r3, [sp, #0]
 8006a8c:	462a      	mov	r2, r5
 8006a8e:	4b06      	ldr	r3, [pc, #24]	; (8006aa8 <_svfiprintf_r+0x1f8>)
 8006a90:	a904      	add	r1, sp, #16
 8006a92:	4638      	mov	r0, r7
 8006a94:	f000 f87a 	bl	8006b8c <_printf_i>
 8006a98:	e7eb      	b.n	8006a72 <_svfiprintf_r+0x1c2>
 8006a9a:	bf00      	nop
 8006a9c:	080070ac 	.word	0x080070ac
 8006aa0:	080070b6 	.word	0x080070b6
 8006aa4:	00000000 	.word	0x00000000
 8006aa8:	080067f9 	.word	0x080067f9
 8006aac:	080070b2 	.word	0x080070b2

08006ab0 <_printf_common>:
 8006ab0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ab4:	4616      	mov	r6, r2
 8006ab6:	4699      	mov	r9, r3
 8006ab8:	688a      	ldr	r2, [r1, #8]
 8006aba:	690b      	ldr	r3, [r1, #16]
 8006abc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ac0:	4293      	cmp	r3, r2
 8006ac2:	bfb8      	it	lt
 8006ac4:	4613      	movlt	r3, r2
 8006ac6:	6033      	str	r3, [r6, #0]
 8006ac8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006acc:	4607      	mov	r7, r0
 8006ace:	460c      	mov	r4, r1
 8006ad0:	b10a      	cbz	r2, 8006ad6 <_printf_common+0x26>
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	6033      	str	r3, [r6, #0]
 8006ad6:	6823      	ldr	r3, [r4, #0]
 8006ad8:	0699      	lsls	r1, r3, #26
 8006ada:	bf42      	ittt	mi
 8006adc:	6833      	ldrmi	r3, [r6, #0]
 8006ade:	3302      	addmi	r3, #2
 8006ae0:	6033      	strmi	r3, [r6, #0]
 8006ae2:	6825      	ldr	r5, [r4, #0]
 8006ae4:	f015 0506 	ands.w	r5, r5, #6
 8006ae8:	d106      	bne.n	8006af8 <_printf_common+0x48>
 8006aea:	f104 0a19 	add.w	sl, r4, #25
 8006aee:	68e3      	ldr	r3, [r4, #12]
 8006af0:	6832      	ldr	r2, [r6, #0]
 8006af2:	1a9b      	subs	r3, r3, r2
 8006af4:	42ab      	cmp	r3, r5
 8006af6:	dc26      	bgt.n	8006b46 <_printf_common+0x96>
 8006af8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006afc:	1e13      	subs	r3, r2, #0
 8006afe:	6822      	ldr	r2, [r4, #0]
 8006b00:	bf18      	it	ne
 8006b02:	2301      	movne	r3, #1
 8006b04:	0692      	lsls	r2, r2, #26
 8006b06:	d42b      	bmi.n	8006b60 <_printf_common+0xb0>
 8006b08:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b0c:	4649      	mov	r1, r9
 8006b0e:	4638      	mov	r0, r7
 8006b10:	47c0      	blx	r8
 8006b12:	3001      	adds	r0, #1
 8006b14:	d01e      	beq.n	8006b54 <_printf_common+0xa4>
 8006b16:	6823      	ldr	r3, [r4, #0]
 8006b18:	68e5      	ldr	r5, [r4, #12]
 8006b1a:	6832      	ldr	r2, [r6, #0]
 8006b1c:	f003 0306 	and.w	r3, r3, #6
 8006b20:	2b04      	cmp	r3, #4
 8006b22:	bf08      	it	eq
 8006b24:	1aad      	subeq	r5, r5, r2
 8006b26:	68a3      	ldr	r3, [r4, #8]
 8006b28:	6922      	ldr	r2, [r4, #16]
 8006b2a:	bf0c      	ite	eq
 8006b2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b30:	2500      	movne	r5, #0
 8006b32:	4293      	cmp	r3, r2
 8006b34:	bfc4      	itt	gt
 8006b36:	1a9b      	subgt	r3, r3, r2
 8006b38:	18ed      	addgt	r5, r5, r3
 8006b3a:	2600      	movs	r6, #0
 8006b3c:	341a      	adds	r4, #26
 8006b3e:	42b5      	cmp	r5, r6
 8006b40:	d11a      	bne.n	8006b78 <_printf_common+0xc8>
 8006b42:	2000      	movs	r0, #0
 8006b44:	e008      	b.n	8006b58 <_printf_common+0xa8>
 8006b46:	2301      	movs	r3, #1
 8006b48:	4652      	mov	r2, sl
 8006b4a:	4649      	mov	r1, r9
 8006b4c:	4638      	mov	r0, r7
 8006b4e:	47c0      	blx	r8
 8006b50:	3001      	adds	r0, #1
 8006b52:	d103      	bne.n	8006b5c <_printf_common+0xac>
 8006b54:	f04f 30ff 	mov.w	r0, #4294967295
 8006b58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b5c:	3501      	adds	r5, #1
 8006b5e:	e7c6      	b.n	8006aee <_printf_common+0x3e>
 8006b60:	18e1      	adds	r1, r4, r3
 8006b62:	1c5a      	adds	r2, r3, #1
 8006b64:	2030      	movs	r0, #48	; 0x30
 8006b66:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b6a:	4422      	add	r2, r4
 8006b6c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b70:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b74:	3302      	adds	r3, #2
 8006b76:	e7c7      	b.n	8006b08 <_printf_common+0x58>
 8006b78:	2301      	movs	r3, #1
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	4649      	mov	r1, r9
 8006b7e:	4638      	mov	r0, r7
 8006b80:	47c0      	blx	r8
 8006b82:	3001      	adds	r0, #1
 8006b84:	d0e6      	beq.n	8006b54 <_printf_common+0xa4>
 8006b86:	3601      	adds	r6, #1
 8006b88:	e7d9      	b.n	8006b3e <_printf_common+0x8e>
	...

08006b8c <_printf_i>:
 8006b8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b90:	460c      	mov	r4, r1
 8006b92:	4691      	mov	r9, r2
 8006b94:	7e27      	ldrb	r7, [r4, #24]
 8006b96:	990c      	ldr	r1, [sp, #48]	; 0x30
 8006b98:	2f78      	cmp	r7, #120	; 0x78
 8006b9a:	4680      	mov	r8, r0
 8006b9c:	469a      	mov	sl, r3
 8006b9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006ba2:	d807      	bhi.n	8006bb4 <_printf_i+0x28>
 8006ba4:	2f62      	cmp	r7, #98	; 0x62
 8006ba6:	d80a      	bhi.n	8006bbe <_printf_i+0x32>
 8006ba8:	2f00      	cmp	r7, #0
 8006baa:	f000 80d8 	beq.w	8006d5e <_printf_i+0x1d2>
 8006bae:	2f58      	cmp	r7, #88	; 0x58
 8006bb0:	f000 80a3 	beq.w	8006cfa <_printf_i+0x16e>
 8006bb4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006bb8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bbc:	e03a      	b.n	8006c34 <_printf_i+0xa8>
 8006bbe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bc2:	2b15      	cmp	r3, #21
 8006bc4:	d8f6      	bhi.n	8006bb4 <_printf_i+0x28>
 8006bc6:	a001      	add	r0, pc, #4	; (adr r0, 8006bcc <_printf_i+0x40>)
 8006bc8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006bcc:	08006c25 	.word	0x08006c25
 8006bd0:	08006c39 	.word	0x08006c39
 8006bd4:	08006bb5 	.word	0x08006bb5
 8006bd8:	08006bb5 	.word	0x08006bb5
 8006bdc:	08006bb5 	.word	0x08006bb5
 8006be0:	08006bb5 	.word	0x08006bb5
 8006be4:	08006c39 	.word	0x08006c39
 8006be8:	08006bb5 	.word	0x08006bb5
 8006bec:	08006bb5 	.word	0x08006bb5
 8006bf0:	08006bb5 	.word	0x08006bb5
 8006bf4:	08006bb5 	.word	0x08006bb5
 8006bf8:	08006d45 	.word	0x08006d45
 8006bfc:	08006c69 	.word	0x08006c69
 8006c00:	08006d27 	.word	0x08006d27
 8006c04:	08006bb5 	.word	0x08006bb5
 8006c08:	08006bb5 	.word	0x08006bb5
 8006c0c:	08006d67 	.word	0x08006d67
 8006c10:	08006bb5 	.word	0x08006bb5
 8006c14:	08006c69 	.word	0x08006c69
 8006c18:	08006bb5 	.word	0x08006bb5
 8006c1c:	08006bb5 	.word	0x08006bb5
 8006c20:	08006d2f 	.word	0x08006d2f
 8006c24:	680b      	ldr	r3, [r1, #0]
 8006c26:	1d1a      	adds	r2, r3, #4
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	600a      	str	r2, [r1, #0]
 8006c2c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006c30:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c34:	2301      	movs	r3, #1
 8006c36:	e0a3      	b.n	8006d80 <_printf_i+0x1f4>
 8006c38:	6825      	ldr	r5, [r4, #0]
 8006c3a:	6808      	ldr	r0, [r1, #0]
 8006c3c:	062e      	lsls	r6, r5, #24
 8006c3e:	f100 0304 	add.w	r3, r0, #4
 8006c42:	d50a      	bpl.n	8006c5a <_printf_i+0xce>
 8006c44:	6805      	ldr	r5, [r0, #0]
 8006c46:	600b      	str	r3, [r1, #0]
 8006c48:	2d00      	cmp	r5, #0
 8006c4a:	da03      	bge.n	8006c54 <_printf_i+0xc8>
 8006c4c:	232d      	movs	r3, #45	; 0x2d
 8006c4e:	426d      	negs	r5, r5
 8006c50:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c54:	485e      	ldr	r0, [pc, #376]	; (8006dd0 <_printf_i+0x244>)
 8006c56:	230a      	movs	r3, #10
 8006c58:	e019      	b.n	8006c8e <_printf_i+0x102>
 8006c5a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8006c5e:	6805      	ldr	r5, [r0, #0]
 8006c60:	600b      	str	r3, [r1, #0]
 8006c62:	bf18      	it	ne
 8006c64:	b22d      	sxthne	r5, r5
 8006c66:	e7ef      	b.n	8006c48 <_printf_i+0xbc>
 8006c68:	680b      	ldr	r3, [r1, #0]
 8006c6a:	6825      	ldr	r5, [r4, #0]
 8006c6c:	1d18      	adds	r0, r3, #4
 8006c6e:	6008      	str	r0, [r1, #0]
 8006c70:	0628      	lsls	r0, r5, #24
 8006c72:	d501      	bpl.n	8006c78 <_printf_i+0xec>
 8006c74:	681d      	ldr	r5, [r3, #0]
 8006c76:	e002      	b.n	8006c7e <_printf_i+0xf2>
 8006c78:	0669      	lsls	r1, r5, #25
 8006c7a:	d5fb      	bpl.n	8006c74 <_printf_i+0xe8>
 8006c7c:	881d      	ldrh	r5, [r3, #0]
 8006c7e:	4854      	ldr	r0, [pc, #336]	; (8006dd0 <_printf_i+0x244>)
 8006c80:	2f6f      	cmp	r7, #111	; 0x6f
 8006c82:	bf0c      	ite	eq
 8006c84:	2308      	moveq	r3, #8
 8006c86:	230a      	movne	r3, #10
 8006c88:	2100      	movs	r1, #0
 8006c8a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c8e:	6866      	ldr	r6, [r4, #4]
 8006c90:	60a6      	str	r6, [r4, #8]
 8006c92:	2e00      	cmp	r6, #0
 8006c94:	bfa2      	ittt	ge
 8006c96:	6821      	ldrge	r1, [r4, #0]
 8006c98:	f021 0104 	bicge.w	r1, r1, #4
 8006c9c:	6021      	strge	r1, [r4, #0]
 8006c9e:	b90d      	cbnz	r5, 8006ca4 <_printf_i+0x118>
 8006ca0:	2e00      	cmp	r6, #0
 8006ca2:	d04d      	beq.n	8006d40 <_printf_i+0x1b4>
 8006ca4:	4616      	mov	r6, r2
 8006ca6:	fbb5 f1f3 	udiv	r1, r5, r3
 8006caa:	fb03 5711 	mls	r7, r3, r1, r5
 8006cae:	5dc7      	ldrb	r7, [r0, r7]
 8006cb0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cb4:	462f      	mov	r7, r5
 8006cb6:	42bb      	cmp	r3, r7
 8006cb8:	460d      	mov	r5, r1
 8006cba:	d9f4      	bls.n	8006ca6 <_printf_i+0x11a>
 8006cbc:	2b08      	cmp	r3, #8
 8006cbe:	d10b      	bne.n	8006cd8 <_printf_i+0x14c>
 8006cc0:	6823      	ldr	r3, [r4, #0]
 8006cc2:	07df      	lsls	r7, r3, #31
 8006cc4:	d508      	bpl.n	8006cd8 <_printf_i+0x14c>
 8006cc6:	6923      	ldr	r3, [r4, #16]
 8006cc8:	6861      	ldr	r1, [r4, #4]
 8006cca:	4299      	cmp	r1, r3
 8006ccc:	bfde      	ittt	le
 8006cce:	2330      	movle	r3, #48	; 0x30
 8006cd0:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006cd4:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cd8:	1b92      	subs	r2, r2, r6
 8006cda:	6122      	str	r2, [r4, #16]
 8006cdc:	f8cd a000 	str.w	sl, [sp]
 8006ce0:	464b      	mov	r3, r9
 8006ce2:	aa03      	add	r2, sp, #12
 8006ce4:	4621      	mov	r1, r4
 8006ce6:	4640      	mov	r0, r8
 8006ce8:	f7ff fee2 	bl	8006ab0 <_printf_common>
 8006cec:	3001      	adds	r0, #1
 8006cee:	d14c      	bne.n	8006d8a <_printf_i+0x1fe>
 8006cf0:	f04f 30ff 	mov.w	r0, #4294967295
 8006cf4:	b004      	add	sp, #16
 8006cf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006cfa:	4835      	ldr	r0, [pc, #212]	; (8006dd0 <_printf_i+0x244>)
 8006cfc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006d00:	6823      	ldr	r3, [r4, #0]
 8006d02:	680e      	ldr	r6, [r1, #0]
 8006d04:	061f      	lsls	r7, r3, #24
 8006d06:	f856 5b04 	ldr.w	r5, [r6], #4
 8006d0a:	600e      	str	r6, [r1, #0]
 8006d0c:	d514      	bpl.n	8006d38 <_printf_i+0x1ac>
 8006d0e:	07d9      	lsls	r1, r3, #31
 8006d10:	bf44      	itt	mi
 8006d12:	f043 0320 	orrmi.w	r3, r3, #32
 8006d16:	6023      	strmi	r3, [r4, #0]
 8006d18:	b91d      	cbnz	r5, 8006d22 <_printf_i+0x196>
 8006d1a:	6823      	ldr	r3, [r4, #0]
 8006d1c:	f023 0320 	bic.w	r3, r3, #32
 8006d20:	6023      	str	r3, [r4, #0]
 8006d22:	2310      	movs	r3, #16
 8006d24:	e7b0      	b.n	8006c88 <_printf_i+0xfc>
 8006d26:	6823      	ldr	r3, [r4, #0]
 8006d28:	f043 0320 	orr.w	r3, r3, #32
 8006d2c:	6023      	str	r3, [r4, #0]
 8006d2e:	2378      	movs	r3, #120	; 0x78
 8006d30:	4828      	ldr	r0, [pc, #160]	; (8006dd4 <_printf_i+0x248>)
 8006d32:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d36:	e7e3      	b.n	8006d00 <_printf_i+0x174>
 8006d38:	065e      	lsls	r6, r3, #25
 8006d3a:	bf48      	it	mi
 8006d3c:	b2ad      	uxthmi	r5, r5
 8006d3e:	e7e6      	b.n	8006d0e <_printf_i+0x182>
 8006d40:	4616      	mov	r6, r2
 8006d42:	e7bb      	b.n	8006cbc <_printf_i+0x130>
 8006d44:	680b      	ldr	r3, [r1, #0]
 8006d46:	6826      	ldr	r6, [r4, #0]
 8006d48:	6960      	ldr	r0, [r4, #20]
 8006d4a:	1d1d      	adds	r5, r3, #4
 8006d4c:	600d      	str	r5, [r1, #0]
 8006d4e:	0635      	lsls	r5, r6, #24
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	d501      	bpl.n	8006d58 <_printf_i+0x1cc>
 8006d54:	6018      	str	r0, [r3, #0]
 8006d56:	e002      	b.n	8006d5e <_printf_i+0x1d2>
 8006d58:	0671      	lsls	r1, r6, #25
 8006d5a:	d5fb      	bpl.n	8006d54 <_printf_i+0x1c8>
 8006d5c:	8018      	strh	r0, [r3, #0]
 8006d5e:	2300      	movs	r3, #0
 8006d60:	6123      	str	r3, [r4, #16]
 8006d62:	4616      	mov	r6, r2
 8006d64:	e7ba      	b.n	8006cdc <_printf_i+0x150>
 8006d66:	680b      	ldr	r3, [r1, #0]
 8006d68:	1d1a      	adds	r2, r3, #4
 8006d6a:	600a      	str	r2, [r1, #0]
 8006d6c:	681e      	ldr	r6, [r3, #0]
 8006d6e:	6862      	ldr	r2, [r4, #4]
 8006d70:	2100      	movs	r1, #0
 8006d72:	4630      	mov	r0, r6
 8006d74:	f7f9 fa54 	bl	8000220 <memchr>
 8006d78:	b108      	cbz	r0, 8006d7e <_printf_i+0x1f2>
 8006d7a:	1b80      	subs	r0, r0, r6
 8006d7c:	6060      	str	r0, [r4, #4]
 8006d7e:	6863      	ldr	r3, [r4, #4]
 8006d80:	6123      	str	r3, [r4, #16]
 8006d82:	2300      	movs	r3, #0
 8006d84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d88:	e7a8      	b.n	8006cdc <_printf_i+0x150>
 8006d8a:	6923      	ldr	r3, [r4, #16]
 8006d8c:	4632      	mov	r2, r6
 8006d8e:	4649      	mov	r1, r9
 8006d90:	4640      	mov	r0, r8
 8006d92:	47d0      	blx	sl
 8006d94:	3001      	adds	r0, #1
 8006d96:	d0ab      	beq.n	8006cf0 <_printf_i+0x164>
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	079b      	lsls	r3, r3, #30
 8006d9c:	d413      	bmi.n	8006dc6 <_printf_i+0x23a>
 8006d9e:	68e0      	ldr	r0, [r4, #12]
 8006da0:	9b03      	ldr	r3, [sp, #12]
 8006da2:	4298      	cmp	r0, r3
 8006da4:	bfb8      	it	lt
 8006da6:	4618      	movlt	r0, r3
 8006da8:	e7a4      	b.n	8006cf4 <_printf_i+0x168>
 8006daa:	2301      	movs	r3, #1
 8006dac:	4632      	mov	r2, r6
 8006dae:	4649      	mov	r1, r9
 8006db0:	4640      	mov	r0, r8
 8006db2:	47d0      	blx	sl
 8006db4:	3001      	adds	r0, #1
 8006db6:	d09b      	beq.n	8006cf0 <_printf_i+0x164>
 8006db8:	3501      	adds	r5, #1
 8006dba:	68e3      	ldr	r3, [r4, #12]
 8006dbc:	9903      	ldr	r1, [sp, #12]
 8006dbe:	1a5b      	subs	r3, r3, r1
 8006dc0:	42ab      	cmp	r3, r5
 8006dc2:	dcf2      	bgt.n	8006daa <_printf_i+0x21e>
 8006dc4:	e7eb      	b.n	8006d9e <_printf_i+0x212>
 8006dc6:	2500      	movs	r5, #0
 8006dc8:	f104 0619 	add.w	r6, r4, #25
 8006dcc:	e7f5      	b.n	8006dba <_printf_i+0x22e>
 8006dce:	bf00      	nop
 8006dd0:	080070bd 	.word	0x080070bd
 8006dd4:	080070ce 	.word	0x080070ce

08006dd8 <memcpy>:
 8006dd8:	440a      	add	r2, r1
 8006dda:	4291      	cmp	r1, r2
 8006ddc:	f100 33ff 	add.w	r3, r0, #4294967295
 8006de0:	d100      	bne.n	8006de4 <memcpy+0xc>
 8006de2:	4770      	bx	lr
 8006de4:	b510      	push	{r4, lr}
 8006de6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dee:	4291      	cmp	r1, r2
 8006df0:	d1f9      	bne.n	8006de6 <memcpy+0xe>
 8006df2:	bd10      	pop	{r4, pc}

08006df4 <memmove>:
 8006df4:	4288      	cmp	r0, r1
 8006df6:	b510      	push	{r4, lr}
 8006df8:	eb01 0402 	add.w	r4, r1, r2
 8006dfc:	d902      	bls.n	8006e04 <memmove+0x10>
 8006dfe:	4284      	cmp	r4, r0
 8006e00:	4623      	mov	r3, r4
 8006e02:	d807      	bhi.n	8006e14 <memmove+0x20>
 8006e04:	1e43      	subs	r3, r0, #1
 8006e06:	42a1      	cmp	r1, r4
 8006e08:	d008      	beq.n	8006e1c <memmove+0x28>
 8006e0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006e0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006e12:	e7f8      	b.n	8006e06 <memmove+0x12>
 8006e14:	4402      	add	r2, r0
 8006e16:	4601      	mov	r1, r0
 8006e18:	428a      	cmp	r2, r1
 8006e1a:	d100      	bne.n	8006e1e <memmove+0x2a>
 8006e1c:	bd10      	pop	{r4, pc}
 8006e1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006e22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006e26:	e7f7      	b.n	8006e18 <memmove+0x24>

08006e28 <_free_r>:
 8006e28:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006e2a:	2900      	cmp	r1, #0
 8006e2c:	d048      	beq.n	8006ec0 <_free_r+0x98>
 8006e2e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006e32:	9001      	str	r0, [sp, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f1a1 0404 	sub.w	r4, r1, #4
 8006e3a:	bfb8      	it	lt
 8006e3c:	18e4      	addlt	r4, r4, r3
 8006e3e:	f000 f8d3 	bl	8006fe8 <__malloc_lock>
 8006e42:	4a20      	ldr	r2, [pc, #128]	; (8006ec4 <_free_r+0x9c>)
 8006e44:	9801      	ldr	r0, [sp, #4]
 8006e46:	6813      	ldr	r3, [r2, #0]
 8006e48:	4615      	mov	r5, r2
 8006e4a:	b933      	cbnz	r3, 8006e5a <_free_r+0x32>
 8006e4c:	6063      	str	r3, [r4, #4]
 8006e4e:	6014      	str	r4, [r2, #0]
 8006e50:	b003      	add	sp, #12
 8006e52:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006e56:	f000 b8cd 	b.w	8006ff4 <__malloc_unlock>
 8006e5a:	42a3      	cmp	r3, r4
 8006e5c:	d90b      	bls.n	8006e76 <_free_r+0x4e>
 8006e5e:	6821      	ldr	r1, [r4, #0]
 8006e60:	1862      	adds	r2, r4, r1
 8006e62:	4293      	cmp	r3, r2
 8006e64:	bf04      	itt	eq
 8006e66:	681a      	ldreq	r2, [r3, #0]
 8006e68:	685b      	ldreq	r3, [r3, #4]
 8006e6a:	6063      	str	r3, [r4, #4]
 8006e6c:	bf04      	itt	eq
 8006e6e:	1852      	addeq	r2, r2, r1
 8006e70:	6022      	streq	r2, [r4, #0]
 8006e72:	602c      	str	r4, [r5, #0]
 8006e74:	e7ec      	b.n	8006e50 <_free_r+0x28>
 8006e76:	461a      	mov	r2, r3
 8006e78:	685b      	ldr	r3, [r3, #4]
 8006e7a:	b10b      	cbz	r3, 8006e80 <_free_r+0x58>
 8006e7c:	42a3      	cmp	r3, r4
 8006e7e:	d9fa      	bls.n	8006e76 <_free_r+0x4e>
 8006e80:	6811      	ldr	r1, [r2, #0]
 8006e82:	1855      	adds	r5, r2, r1
 8006e84:	42a5      	cmp	r5, r4
 8006e86:	d10b      	bne.n	8006ea0 <_free_r+0x78>
 8006e88:	6824      	ldr	r4, [r4, #0]
 8006e8a:	4421      	add	r1, r4
 8006e8c:	1854      	adds	r4, r2, r1
 8006e8e:	42a3      	cmp	r3, r4
 8006e90:	6011      	str	r1, [r2, #0]
 8006e92:	d1dd      	bne.n	8006e50 <_free_r+0x28>
 8006e94:	681c      	ldr	r4, [r3, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	6053      	str	r3, [r2, #4]
 8006e9a:	4421      	add	r1, r4
 8006e9c:	6011      	str	r1, [r2, #0]
 8006e9e:	e7d7      	b.n	8006e50 <_free_r+0x28>
 8006ea0:	d902      	bls.n	8006ea8 <_free_r+0x80>
 8006ea2:	230c      	movs	r3, #12
 8006ea4:	6003      	str	r3, [r0, #0]
 8006ea6:	e7d3      	b.n	8006e50 <_free_r+0x28>
 8006ea8:	6825      	ldr	r5, [r4, #0]
 8006eaa:	1961      	adds	r1, r4, r5
 8006eac:	428b      	cmp	r3, r1
 8006eae:	bf04      	itt	eq
 8006eb0:	6819      	ldreq	r1, [r3, #0]
 8006eb2:	685b      	ldreq	r3, [r3, #4]
 8006eb4:	6063      	str	r3, [r4, #4]
 8006eb6:	bf04      	itt	eq
 8006eb8:	1949      	addeq	r1, r1, r5
 8006eba:	6021      	streq	r1, [r4, #0]
 8006ebc:	6054      	str	r4, [r2, #4]
 8006ebe:	e7c7      	b.n	8006e50 <_free_r+0x28>
 8006ec0:	b003      	add	sp, #12
 8006ec2:	bd30      	pop	{r4, r5, pc}
 8006ec4:	200000bc 	.word	0x200000bc

08006ec8 <_malloc_r>:
 8006ec8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eca:	1ccd      	adds	r5, r1, #3
 8006ecc:	f025 0503 	bic.w	r5, r5, #3
 8006ed0:	3508      	adds	r5, #8
 8006ed2:	2d0c      	cmp	r5, #12
 8006ed4:	bf38      	it	cc
 8006ed6:	250c      	movcc	r5, #12
 8006ed8:	2d00      	cmp	r5, #0
 8006eda:	4606      	mov	r6, r0
 8006edc:	db01      	blt.n	8006ee2 <_malloc_r+0x1a>
 8006ede:	42a9      	cmp	r1, r5
 8006ee0:	d903      	bls.n	8006eea <_malloc_r+0x22>
 8006ee2:	230c      	movs	r3, #12
 8006ee4:	6033      	str	r3, [r6, #0]
 8006ee6:	2000      	movs	r0, #0
 8006ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006eea:	f000 f87d 	bl	8006fe8 <__malloc_lock>
 8006eee:	4921      	ldr	r1, [pc, #132]	; (8006f74 <_malloc_r+0xac>)
 8006ef0:	680a      	ldr	r2, [r1, #0]
 8006ef2:	4614      	mov	r4, r2
 8006ef4:	b99c      	cbnz	r4, 8006f1e <_malloc_r+0x56>
 8006ef6:	4f20      	ldr	r7, [pc, #128]	; (8006f78 <_malloc_r+0xb0>)
 8006ef8:	683b      	ldr	r3, [r7, #0]
 8006efa:	b923      	cbnz	r3, 8006f06 <_malloc_r+0x3e>
 8006efc:	4621      	mov	r1, r4
 8006efe:	4630      	mov	r0, r6
 8006f00:	f000 f862 	bl	8006fc8 <_sbrk_r>
 8006f04:	6038      	str	r0, [r7, #0]
 8006f06:	4629      	mov	r1, r5
 8006f08:	4630      	mov	r0, r6
 8006f0a:	f000 f85d 	bl	8006fc8 <_sbrk_r>
 8006f0e:	1c43      	adds	r3, r0, #1
 8006f10:	d123      	bne.n	8006f5a <_malloc_r+0x92>
 8006f12:	230c      	movs	r3, #12
 8006f14:	6033      	str	r3, [r6, #0]
 8006f16:	4630      	mov	r0, r6
 8006f18:	f000 f86c 	bl	8006ff4 <__malloc_unlock>
 8006f1c:	e7e3      	b.n	8006ee6 <_malloc_r+0x1e>
 8006f1e:	6823      	ldr	r3, [r4, #0]
 8006f20:	1b5b      	subs	r3, r3, r5
 8006f22:	d417      	bmi.n	8006f54 <_malloc_r+0x8c>
 8006f24:	2b0b      	cmp	r3, #11
 8006f26:	d903      	bls.n	8006f30 <_malloc_r+0x68>
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	441c      	add	r4, r3
 8006f2c:	6025      	str	r5, [r4, #0]
 8006f2e:	e004      	b.n	8006f3a <_malloc_r+0x72>
 8006f30:	6863      	ldr	r3, [r4, #4]
 8006f32:	42a2      	cmp	r2, r4
 8006f34:	bf0c      	ite	eq
 8006f36:	600b      	streq	r3, [r1, #0]
 8006f38:	6053      	strne	r3, [r2, #4]
 8006f3a:	4630      	mov	r0, r6
 8006f3c:	f000 f85a 	bl	8006ff4 <__malloc_unlock>
 8006f40:	f104 000b 	add.w	r0, r4, #11
 8006f44:	1d23      	adds	r3, r4, #4
 8006f46:	f020 0007 	bic.w	r0, r0, #7
 8006f4a:	1ac2      	subs	r2, r0, r3
 8006f4c:	d0cc      	beq.n	8006ee8 <_malloc_r+0x20>
 8006f4e:	1a1b      	subs	r3, r3, r0
 8006f50:	50a3      	str	r3, [r4, r2]
 8006f52:	e7c9      	b.n	8006ee8 <_malloc_r+0x20>
 8006f54:	4622      	mov	r2, r4
 8006f56:	6864      	ldr	r4, [r4, #4]
 8006f58:	e7cc      	b.n	8006ef4 <_malloc_r+0x2c>
 8006f5a:	1cc4      	adds	r4, r0, #3
 8006f5c:	f024 0403 	bic.w	r4, r4, #3
 8006f60:	42a0      	cmp	r0, r4
 8006f62:	d0e3      	beq.n	8006f2c <_malloc_r+0x64>
 8006f64:	1a21      	subs	r1, r4, r0
 8006f66:	4630      	mov	r0, r6
 8006f68:	f000 f82e 	bl	8006fc8 <_sbrk_r>
 8006f6c:	3001      	adds	r0, #1
 8006f6e:	d1dd      	bne.n	8006f2c <_malloc_r+0x64>
 8006f70:	e7cf      	b.n	8006f12 <_malloc_r+0x4a>
 8006f72:	bf00      	nop
 8006f74:	200000bc 	.word	0x200000bc
 8006f78:	200000c0 	.word	0x200000c0

08006f7c <_realloc_r>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	4607      	mov	r7, r0
 8006f80:	4614      	mov	r4, r2
 8006f82:	460e      	mov	r6, r1
 8006f84:	b921      	cbnz	r1, 8006f90 <_realloc_r+0x14>
 8006f86:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8006f8a:	4611      	mov	r1, r2
 8006f8c:	f7ff bf9c 	b.w	8006ec8 <_malloc_r>
 8006f90:	b922      	cbnz	r2, 8006f9c <_realloc_r+0x20>
 8006f92:	f7ff ff49 	bl	8006e28 <_free_r>
 8006f96:	4625      	mov	r5, r4
 8006f98:	4628      	mov	r0, r5
 8006f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f9c:	f000 f830 	bl	8007000 <_malloc_usable_size_r>
 8006fa0:	42a0      	cmp	r0, r4
 8006fa2:	d20f      	bcs.n	8006fc4 <_realloc_r+0x48>
 8006fa4:	4621      	mov	r1, r4
 8006fa6:	4638      	mov	r0, r7
 8006fa8:	f7ff ff8e 	bl	8006ec8 <_malloc_r>
 8006fac:	4605      	mov	r5, r0
 8006fae:	2800      	cmp	r0, #0
 8006fb0:	d0f2      	beq.n	8006f98 <_realloc_r+0x1c>
 8006fb2:	4631      	mov	r1, r6
 8006fb4:	4622      	mov	r2, r4
 8006fb6:	f7ff ff0f 	bl	8006dd8 <memcpy>
 8006fba:	4631      	mov	r1, r6
 8006fbc:	4638      	mov	r0, r7
 8006fbe:	f7ff ff33 	bl	8006e28 <_free_r>
 8006fc2:	e7e9      	b.n	8006f98 <_realloc_r+0x1c>
 8006fc4:	4635      	mov	r5, r6
 8006fc6:	e7e7      	b.n	8006f98 <_realloc_r+0x1c>

08006fc8 <_sbrk_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d06      	ldr	r5, [pc, #24]	; (8006fe4 <_sbrk_r+0x1c>)
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4604      	mov	r4, r0
 8006fd0:	4608      	mov	r0, r1
 8006fd2:	602b      	str	r3, [r5, #0]
 8006fd4:	f7fa fc0e 	bl	80017f4 <_sbrk>
 8006fd8:	1c43      	adds	r3, r0, #1
 8006fda:	d102      	bne.n	8006fe2 <_sbrk_r+0x1a>
 8006fdc:	682b      	ldr	r3, [r5, #0]
 8006fde:	b103      	cbz	r3, 8006fe2 <_sbrk_r+0x1a>
 8006fe0:	6023      	str	r3, [r4, #0]
 8006fe2:	bd38      	pop	{r3, r4, r5, pc}
 8006fe4:	20000428 	.word	0x20000428

08006fe8 <__malloc_lock>:
 8006fe8:	4801      	ldr	r0, [pc, #4]	; (8006ff0 <__malloc_lock+0x8>)
 8006fea:	f000 b811 	b.w	8007010 <__retarget_lock_acquire_recursive>
 8006fee:	bf00      	nop
 8006ff0:	20000430 	.word	0x20000430

08006ff4 <__malloc_unlock>:
 8006ff4:	4801      	ldr	r0, [pc, #4]	; (8006ffc <__malloc_unlock+0x8>)
 8006ff6:	f000 b80c 	b.w	8007012 <__retarget_lock_release_recursive>
 8006ffa:	bf00      	nop
 8006ffc:	20000430 	.word	0x20000430

08007000 <_malloc_usable_size_r>:
 8007000:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007004:	1f18      	subs	r0, r3, #4
 8007006:	2b00      	cmp	r3, #0
 8007008:	bfbc      	itt	lt
 800700a:	580b      	ldrlt	r3, [r1, r0]
 800700c:	18c0      	addlt	r0, r0, r3
 800700e:	4770      	bx	lr

08007010 <__retarget_lock_acquire_recursive>:
 8007010:	4770      	bx	lr

08007012 <__retarget_lock_release_recursive>:
 8007012:	4770      	bx	lr

08007014 <_init>:
 8007014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007016:	bf00      	nop
 8007018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800701a:	bc08      	pop	{r3}
 800701c:	469e      	mov	lr, r3
 800701e:	4770      	bx	lr

08007020 <_fini>:
 8007020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007022:	bf00      	nop
 8007024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007026:	bc08      	pop	{r3}
 8007028:	469e      	mov	lr, r3
 800702a:	4770      	bx	lr
