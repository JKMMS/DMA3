
DMA3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053dc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000006c  080055ac  080055ac  000155ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005618  08005618  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08005618  08005618  00015618  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005620  08005620  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005620  08005620  00015620  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005624  08005624  00015624  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08005628  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002f8  20000078  080056a0  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000370  080056a0  00020370  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ed2c  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000023f6  00000000  00000000  0002edd4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d58  00000000  00000000  000311d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c60  00000000  00000000  00031f28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b31  00000000  00000000  00032b88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fcf0  00000000  00000000  000546b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ce968  00000000  00000000  000643a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00132d11  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a7c  00000000  00000000  00132d64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000078 	.word	0x20000078
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005594 	.word	0x08005594

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000007c 	.word	0x2000007c
 800020c:	08005594 	.word	0x08005594

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b082      	sub	sp, #8
 80005bc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80005be:	2300      	movs	r3, #0
 80005c0:	607b      	str	r3, [r7, #4]
 80005c2:	4b10      	ldr	r3, [pc, #64]	; (8000604 <MX_DMA_Init+0x4c>)
 80005c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c6:	4a0f      	ldr	r2, [pc, #60]	; (8000604 <MX_DMA_Init+0x4c>)
 80005c8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80005cc:	6313      	str	r3, [r2, #48]	; 0x30
 80005ce:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <MX_DMA_Init+0x4c>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80005d6:	607b      	str	r3, [r7, #4]
 80005d8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80005da:	2200      	movs	r2, #0
 80005dc:	2100      	movs	r1, #0
 80005de:	2010      	movs	r0, #16
 80005e0:	f000 ff71 	bl	80014c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005e4:	2010      	movs	r0, #16
 80005e6:	f000 ff8a 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80005ea:	2200      	movs	r2, #0
 80005ec:	2100      	movs	r1, #0
 80005ee:	2011      	movs	r0, #17
 80005f0:	f000 ff69 	bl	80014c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80005f4:	2011      	movs	r0, #17
 80005f6:	f000 ff82 	bl	80014fe <HAL_NVIC_EnableIRQ>

}
 80005fa:	bf00      	nop
 80005fc:	3708      	adds	r7, #8
 80005fe:	46bd      	mov	sp, r7
 8000600:	bd80      	pop	{r7, pc}
 8000602:	bf00      	nop
 8000604:	40023800 	.word	0x40023800

08000608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b08a      	sub	sp, #40	; 0x28
 800060c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800060e:	f107 0314 	add.w	r3, r7, #20
 8000612:	2200      	movs	r2, #0
 8000614:	601a      	str	r2, [r3, #0]
 8000616:	605a      	str	r2, [r3, #4]
 8000618:	609a      	str	r2, [r3, #8]
 800061a:	60da      	str	r2, [r3, #12]
 800061c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800061e:	2300      	movs	r3, #0
 8000620:	613b      	str	r3, [r7, #16]
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <MX_GPIO_Init+0xd0>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <MX_GPIO_Init+0xd0>)
 8000628:	f043 0304 	orr.w	r3, r3, #4
 800062c:	6313      	str	r3, [r2, #48]	; 0x30
 800062e:	4b2a      	ldr	r3, [pc, #168]	; (80006d8 <MX_GPIO_Init+0xd0>)
 8000630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000632:	f003 0304 	and.w	r3, r3, #4
 8000636:	613b      	str	r3, [r7, #16]
 8000638:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800063a:	2300      	movs	r3, #0
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	4b26      	ldr	r3, [pc, #152]	; (80006d8 <MX_GPIO_Init+0xd0>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <MX_GPIO_Init+0xd0>)
 8000644:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000648:	6313      	str	r3, [r2, #48]	; 0x30
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <MX_GPIO_Init+0xd0>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000652:	60fb      	str	r3, [r7, #12]
 8000654:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000656:	2300      	movs	r3, #0
 8000658:	60bb      	str	r3, [r7, #8]
 800065a:	4b1f      	ldr	r3, [pc, #124]	; (80006d8 <MX_GPIO_Init+0xd0>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	4a1e      	ldr	r2, [pc, #120]	; (80006d8 <MX_GPIO_Init+0xd0>)
 8000660:	f043 0301 	orr.w	r3, r3, #1
 8000664:	6313      	str	r3, [r2, #48]	; 0x30
 8000666:	4b1c      	ldr	r3, [pc, #112]	; (80006d8 <MX_GPIO_Init+0xd0>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	60bb      	str	r3, [r7, #8]
 8000670:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000672:	2300      	movs	r3, #0
 8000674:	607b      	str	r3, [r7, #4]
 8000676:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <MX_GPIO_Init+0xd0>)
 8000678:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067a:	4a17      	ldr	r2, [pc, #92]	; (80006d8 <MX_GPIO_Init+0xd0>)
 800067c:	f043 0302 	orr.w	r3, r3, #2
 8000680:	6313      	str	r3, [r2, #48]	; 0x30
 8000682:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <MX_GPIO_Init+0xd0>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	f003 0302 	and.w	r3, r3, #2
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800068e:	2200      	movs	r2, #0
 8000690:	2120      	movs	r1, #32
 8000692:	4812      	ldr	r0, [pc, #72]	; (80006dc <MX_GPIO_Init+0xd4>)
 8000694:	f001 fc5e 	bl	8001f54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000698:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800069c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800069e:	4b10      	ldr	r3, [pc, #64]	; (80006e0 <MX_GPIO_Init+0xd8>)
 80006a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a2:	2300      	movs	r3, #0
 80006a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	480d      	ldr	r0, [pc, #52]	; (80006e4 <MX_GPIO_Init+0xdc>)
 80006ae:	f001 fabd 	bl	8001c2c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006b2:	2320      	movs	r3, #32
 80006b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b6:	2301      	movs	r3, #1
 80006b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	2300      	movs	r3, #0
 80006c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006c2:	f107 0314 	add.w	r3, r7, #20
 80006c6:	4619      	mov	r1, r3
 80006c8:	4804      	ldr	r0, [pc, #16]	; (80006dc <MX_GPIO_Init+0xd4>)
 80006ca:	f001 faaf 	bl	8001c2c <HAL_GPIO_Init>

}
 80006ce:	bf00      	nop
 80006d0:	3728      	adds	r7, #40	; 0x28
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	40023800 	.word	0x40023800
 80006dc:	40020000 	.word	0x40020000
 80006e0:	10210000 	.word	0x10210000
 80006e4:	40020800 	.word	0x40020800

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fd9e 	bl	800122c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f84c 	bl	800078c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f7ff ff88 	bl	8000608 <MX_GPIO_Init>
  MX_DMA_Init();
 80006f8:	f7ff ff5e 	bl	80005b8 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80006fc:	f000 fcc0 	bl	8001080 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000700:	f000 fa78 	bl	8000bf4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000704:	f000 fae6 	bl	8000cd4 <MX_TIM3_Init>
  MX_TIM10_Init();
 8000708:	f000 fb5c 	bl	8000dc4 <MX_TIM10_Init>
  MX_TIM11_Init();
 800070c:	f000 fb7e 	bl	8000e0c <MX_TIM11_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim11); ///habilita o timer 2
 8000710:	4816      	ldr	r0, [pc, #88]	; (800076c <main+0x84>)
 8000712:	f002 f9f3 	bl	8002afc <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start_IT(&htim10);
 8000716:	4816      	ldr	r0, [pc, #88]	; (8000770 <main+0x88>)
 8000718:	f002 fa58 	bl	8002bcc <HAL_TIM_Base_Start_IT>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); ///Habilita o Input Capture com Interrupção do Timer2 → PA0 → canal 1
 800071c:	2100      	movs	r1, #0
 800071e:	4815      	ldr	r0, [pc, #84]	; (8000774 <main+0x8c>)
 8000720:	f002 fc40 	bl	8002fa4 <HAL_TIM_IC_Start_IT>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000724:	2100      	movs	r1, #0
 8000726:	4814      	ldr	r0, [pc, #80]	; (8000778 <main+0x90>)
 8000728:	f002 fb1a 	bl	8002d60 <HAL_TIM_PWM_Start>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE)){ ///verifica se passou 1 segundo do Timer11 para imprimir a mensagem na tela (a mensagem é mostrada de 1 em 1 segundo para não ficar muito poluído)
 800072c:	4b0f      	ldr	r3, [pc, #60]	; (800076c <main+0x84>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	691b      	ldr	r3, [r3, #16]
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	2b01      	cmp	r3, #1
 8000738:	d1f8      	bne.n	800072c <main+0x44>
		sprintf(msg, "Periodo medido: %uus\n\r",(uint64_t)(periodo)); ///faz o cálculo da frequência 1 dividindo o CLOCK do ARM pela multiplicação do período medido + 1 e o valor de PSC (que nesse caso é 47)
 800073a:	4b10      	ldr	r3, [pc, #64]	; (800077c <main+0x94>)
 800073c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000740:	490f      	ldr	r1, [pc, #60]	; (8000780 <main+0x98>)
 8000742:	4810      	ldr	r0, [pc, #64]	; (8000784 <main+0x9c>)
 8000744:	f004 faf8 	bl	8004d38 <siprintf>
		HAL_UART_Transmit_IT(&huart2, msg, strlen(msg)); ///Usando a usart2, trasmite a mensagem
 8000748:	480e      	ldr	r0, [pc, #56]	; (8000784 <main+0x9c>)
 800074a:	f7ff fd61 	bl	8000210 <strlen>
 800074e:	4603      	mov	r3, r0
 8000750:	b29b      	uxth	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	490b      	ldr	r1, [pc, #44]	; (8000784 <main+0x9c>)
 8000756:	480c      	ldr	r0, [pc, #48]	; (8000788 <main+0xa0>)
 8000758:	f003 fd99 	bl	800428e <HAL_UART_Transmit_IT>
		periodo = 0; ///iguala o periodo a zero para a próxima medição
 800075c:	4907      	ldr	r1, [pc, #28]	; (800077c <main+0x94>)
 800075e:	f04f 0200 	mov.w	r2, #0
 8000762:	f04f 0300 	mov.w	r3, #0
 8000766:	e9c1 2300 	strd	r2, r3, [r1]
	  if(__HAL_TIM_GET_FLAG(&htim11, TIM_FLAG_UPDATE)){ ///verifica se passou 1 segundo do Timer11 para imprimir a mensagem na tela (a mensagem é mostrada de 1 em 1 segundo para não ficar muito poluído)
 800076a:	e7df      	b.n	800072c <main+0x44>
 800076c:	20000228 	.word	0x20000228
 8000770:	20000198 	.word	0x20000198
 8000774:	20000270 	.word	0x20000270
 8000778:	200001e0 	.word	0x200001e0
 800077c:	200000b8 	.word	0x200000b8
 8000780:	080055ac 	.word	0x080055ac
 8000784:	200000d4 	.word	0x200000d4
 8000788:	20000318 	.word	0x20000318

0800078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800078c:	b580      	push	{r7, lr}
 800078e:	b094      	sub	sp, #80	; 0x50
 8000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000792:	f107 031c 	add.w	r3, r7, #28
 8000796:	2234      	movs	r2, #52	; 0x34
 8000798:	2100      	movs	r1, #0
 800079a:	4618      	mov	r0, r3
 800079c:	f004 fac4 	bl	8004d28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a0:	f107 0308 	add.w	r3, r7, #8
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80007b0:	2300      	movs	r3, #0
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	4b2a      	ldr	r3, [pc, #168]	; (8000860 <SystemClock_Config+0xd4>)
 80007b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007b8:	4a29      	ldr	r2, [pc, #164]	; (8000860 <SystemClock_Config+0xd4>)
 80007ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007be:	6413      	str	r3, [r2, #64]	; 0x40
 80007c0:	4b27      	ldr	r3, [pc, #156]	; (8000860 <SystemClock_Config+0xd4>)
 80007c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80007cc:	2300      	movs	r3, #0
 80007ce:	603b      	str	r3, [r7, #0]
 80007d0:	4b24      	ldr	r3, [pc, #144]	; (8000864 <SystemClock_Config+0xd8>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007d8:	4a22      	ldr	r2, [pc, #136]	; (8000864 <SystemClock_Config+0xd8>)
 80007da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007de:	6013      	str	r3, [r2, #0]
 80007e0:	4b20      	ldr	r3, [pc, #128]	; (8000864 <SystemClock_Config+0xd8>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007e8:	603b      	str	r3, [r7, #0]
 80007ea:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007ec:	2302      	movs	r3, #2
 80007ee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007f0:	2301      	movs	r3, #1
 80007f2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007f4:	2310      	movs	r3, #16
 80007f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007f8:	2302      	movs	r3, #2
 80007fa:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007fc:	2300      	movs	r3, #0
 80007fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000800:	2310      	movs	r3, #16
 8000802:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000804:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000808:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800080a:	2304      	movs	r3, #4
 800080c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800080e:	2302      	movs	r3, #2
 8000810:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000812:	2302      	movs	r3, #2
 8000814:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000816:	f107 031c 	add.w	r3, r7, #28
 800081a:	4618      	mov	r0, r3
 800081c:	f001 fe80 	bl	8002520 <HAL_RCC_OscConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000826:	f000 f8ff 	bl	8000a28 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800082a:	230f      	movs	r3, #15
 800082c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800082e:	2302      	movs	r3, #2
 8000830:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000832:	2300      	movs	r3, #0
 8000834:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000836:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800083a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800083c:	2300      	movs	r3, #0
 800083e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	2102      	movs	r1, #2
 8000846:	4618      	mov	r0, r3
 8000848:	f001 fb9e 	bl	8001f88 <HAL_RCC_ClockConfig>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000852:	f000 f8e9 	bl	8000a28 <Error_Handler>
  }
}
 8000856:	bf00      	nop
 8000858:	3750      	adds	r7, #80	; 0x50
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	40023800 	.word	0x40023800
 8000864:	40007000 	.word	0x40007000

08000868 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim){
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
	uint64_t calc(long a, long b, long c, long ARR);

	if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1){ ///interrupção do canal 1 do timer 3
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7f1b      	ldrb	r3, [r3, #28]
 8000874:	2b01      	cmp	r3, #1
 8000876:	d162      	bne.n	800093e <HAL_TIM_IC_CaptureCallback+0xd6>
		if (initVal == -1) { ///se initVal estiver com seu valor inicial, que é -1
 8000878:	4b33      	ldr	r3, [pc, #204]	; (8000948 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800087a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800087e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000882:	bf08      	it	eq
 8000884:	f1b2 3fff 	cmpeq.w	r2, #4294967295
 8000888:	d109      	bne.n	800089e <HAL_TIM_IC_CaptureCallback+0x36>
			initVal = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1); ///com o estouro, salva o valor que estava no contador
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	681b      	ldr	r3, [r3, #0]
 800088e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000890:	461a      	mov	r2, r3
 8000892:	f04f 0300 	mov.w	r3, #0
 8000896:	492c      	ldr	r1, [pc, #176]	; (8000948 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000898:	e9c1 2300 	strd	r2, r3, [r1]
				valE = 0; ///valE volta ao seu valor inicial
				flag = 0;
			}
		}
	}
}
 800089c:	e04f      	b.n	800093e <HAL_TIM_IC_CaptureCallback+0xd6>
			if(flag == 0){
 800089e:	4b2b      	ldr	r3, [pc, #172]	; (800094c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d11f      	bne.n	80008e6 <HAL_TIM_IC_CaptureCallback+0x7e>
				bordaM = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1); ///salva o valor que está agora
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ac:	461a      	mov	r2, r3
 80008ae:	f04f 0300 	mov.w	r3, #0
 80008b2:	4927      	ldr	r1, [pc, #156]	; (8000950 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80008b4:	e9c1 2300 	strd	r2, r3, [r1]
				periodoI = calc(initVal, bordaM, valE, 999999); ///calcula o periodo utilizando a função criada calc
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80008ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008be:	4610      	mov	r0, r2
 80008c0:	4b23      	ldr	r3, [pc, #140]	; (8000950 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80008c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008c6:	4611      	mov	r1, r2
 80008c8:	4b22      	ldr	r3, [pc, #136]	; (8000954 <HAL_TIM_IC_CaptureCallback+0xec>)
 80008ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008ce:	4b22      	ldr	r3, [pc, #136]	; (8000958 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80008d0:	f000 f84a 	bl	8000968 <calc>
 80008d4:	4602      	mov	r2, r0
 80008d6:	460b      	mov	r3, r1
 80008d8:	4920      	ldr	r1, [pc, #128]	; (800095c <HAL_TIM_IC_CaptureCallback+0xf4>)
 80008da:	e9c1 2300 	strd	r2, r3, [r1]
				flag = 1;
 80008de:	4b1b      	ldr	r3, [pc, #108]	; (800094c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80008e0:	2201      	movs	r2, #1
 80008e2:	701a      	strb	r2, [r3, #0]
}
 80008e4:	e02b      	b.n	800093e <HAL_TIM_IC_CaptureCallback+0xd6>
				valI = __HAL_TIM_GET_COMPARE(htim, TIM_CHANNEL_1); ///salva o valor que está agora
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008ec:	461a      	mov	r2, r3
 80008ee:	f04f 0300 	mov.w	r3, #0
 80008f2:	491b      	ldr	r1, [pc, #108]	; (8000960 <HAL_TIM_IC_CaptureCallback+0xf8>)
 80008f4:	e9c1 2300 	strd	r2, r3, [r1]
				periodo = calc(initVal, valI, valE, 999999); ///calcula o periodo utilizando a função criada calc
 80008f8:	4b13      	ldr	r3, [pc, #76]	; (8000948 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80008fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80008fe:	4610      	mov	r0, r2
 8000900:	4b17      	ldr	r3, [pc, #92]	; (8000960 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000906:	4611      	mov	r1, r2
 8000908:	4b12      	ldr	r3, [pc, #72]	; (8000954 <HAL_TIM_IC_CaptureCallback+0xec>)
 800090a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800090e:	4b12      	ldr	r3, [pc, #72]	; (8000958 <HAL_TIM_IC_CaptureCallback+0xf0>)
 8000910:	f000 f82a 	bl	8000968 <calc>
 8000914:	4602      	mov	r2, r0
 8000916:	460b      	mov	r3, r1
 8000918:	4912      	ldr	r1, [pc, #72]	; (8000964 <HAL_TIM_IC_CaptureCallback+0xfc>)
 800091a:	e9c1 2300 	strd	r2, r3, [r1]
				initVal = valI; ///initVal volta ao seu valor
 800091e:	4b10      	ldr	r3, [pc, #64]	; (8000960 <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000920:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000924:	4908      	ldr	r1, [pc, #32]	; (8000948 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000926:	e9c1 2300 	strd	r2, r3, [r1]
				valE = 0; ///valE volta ao seu valor inicial
 800092a:	490a      	ldr	r1, [pc, #40]	; (8000954 <HAL_TIM_IC_CaptureCallback+0xec>)
 800092c:	f04f 0200 	mov.w	r2, #0
 8000930:	f04f 0300 	mov.w	r3, #0
 8000934:	e9c1 2300 	strd	r2, r3, [r1]
				flag = 0;
 8000938:	4b04      	ldr	r3, [pc, #16]	; (800094c <HAL_TIM_IC_CaptureCallback+0xe4>)
 800093a:	2200      	movs	r2, #0
 800093c:	701a      	strb	r2, [r3, #0]
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	20000000 	.word	0x20000000
 800094c:	200000b0 	.word	0x200000b0
 8000950:	20000098 	.word	0x20000098
 8000954:	200000a8 	.word	0x200000a8
 8000958:	000f423f 	.word	0x000f423f
 800095c:	200000c0 	.word	0x200000c0
 8000960:	200000a0 	.word	0x200000a0
 8000964:	200000b8 	.word	0x200000b8

08000968 <calc>:

/**
 * @brief Função que faz o cálculo do periodo desejado
 */
uint64_t calc(long a, long b, long c, long ARR){ ///entra-se com 4 valores para fazer o cálculo, que vão ser os valores de initVal, valI, valE e ARR_CL
 8000968:	b480      	push	{r7}
 800096a:	b087      	sub	sp, #28
 800096c:	af00      	add	r7, sp, #0
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	60b9      	str	r1, [r7, #8]
 8000972:	607a      	str	r2, [r7, #4]
 8000974:	603b      	str	r3, [r7, #0]
	uint64_t period;
	if(c > 0) ///se o número de períodos medidos durante a medição for 1 ou mais
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	dd20      	ble.n	80009be <calc+0x56>
	{
		if(c > 1) ///se o número de períodos medidos durante a medição for mais que 1
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	2b01      	cmp	r3, #1
 8000980:	dd12      	ble.n	80009a8 <calc+0x40>
		{
			c--;    ///ignorando o final do primeiro periodo
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	3b01      	subs	r3, #1
 8000986:	607b      	str	r3, [r7, #4]
			period = (ARR - a + b) + (ARR) * c; /// se entre o valor inicial e o valor final (Internal) houverem periodos completos do timer3
 8000988:	683a      	ldr	r2, [r7, #0]
 800098a:	68fb      	ldr	r3, [r7, #12]
 800098c:	1ad2      	subs	r2, r2, r3
 800098e:	68bb      	ldr	r3, [r7, #8]
 8000990:	441a      	add	r2, r3
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	6879      	ldr	r1, [r7, #4]
 8000996:	fb01 f303 	mul.w	r3, r1, r3
 800099a:	4413      	add	r3, r2
 800099c:	461a      	mov	r2, r3
 800099e:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80009a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80009a6:	e012      	b.n	80009ce <calc+0x66>
			///ou seja, se tiver mais que um período, utiliza o mesmo cálculo só acrescenta a parte de multiplicar o valor do ARR pelo número de períodos a mais que teve
		}
		///se o número de períodos medidos durante a medição for 1
		else period = (ARR - a + b); /// se o valor inicial e o valor final (Internal) estiverem em periodos subsequentes do timer3
 80009a8:	683a      	ldr	r2, [r7, #0]
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	1ad2      	subs	r2, r2, r3
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	461a      	mov	r2, r3
 80009b4:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80009b8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 80009bc:	e007      	b.n	80009ce <calc+0x66>
		///ou seja, se houver passado somente um período
	}
	///se o número de períodos medidos durante a medição não completar 1 inteiro
	else period = b - a; /// se ainda estiver dentro do mesmo periodo do timer3, ou seja, não tiver passado um período completo
 80009be:	68ba      	ldr	r2, [r7, #8]
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	1ad3      	subs	r3, r2, r3
 80009c4:	461a      	mov	r2, r3
 80009c6:	ea4f 73e2 	mov.w	r3, r2, asr #31
 80009ca:	e9c7 2304 	strd	r2, r3, [r7, #16]
	return period; /// a função retorna o valor do periodo calculado
 80009ce:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	371c      	adds	r7, #28
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr

080009e0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){ ///Interrupção do final do timer 10, ou seja, estouro do timer
 80009e0:	b4b0      	push	{r4, r5, r7}
 80009e2:	b083      	sub	sp, #12
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM11) ///se a interrupção do timer 10 estourou
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a0b      	ldr	r2, [pc, #44]	; (8000a1c <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d10f      	bne.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x32>
			if(initVal > -1) valE++; ///conta quantas vezes o timer estourou adicionando na variável valE
 80009f2:	4b0b      	ldr	r3, [pc, #44]	; (8000a20 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80009f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009f8:	2a00      	cmp	r2, #0
 80009fa:	f173 0300 	sbcs.w	r3, r3, #0
 80009fe:	db08      	blt.n	8000a12 <HAL_TIM_PeriodElapsedCallback+0x32>
 8000a00:	4b08      	ldr	r3, [pc, #32]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000a06:	1c54      	adds	r4, r2, #1
 8000a08:	f143 0500 	adc.w	r5, r3, #0
 8000a0c:	4b05      	ldr	r3, [pc, #20]	; (8000a24 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8000a0e:	e9c3 4500 	strd	r4, r5, [r3]
}
 8000a12:	bf00      	nop
 8000a14:	370c      	adds	r7, #12
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bcb0      	pop	{r4, r5, r7}
 8000a1a:	4770      	bx	lr
 8000a1c:	40014800 	.word	0x40014800
 8000a20:	20000000 	.word	0x20000000
 8000a24:	200000a8 	.word	0x200000a8

08000a28 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a2c:	b672      	cpsid	i
}
 8000a2e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a30:	e7fe      	b.n	8000a30 <Error_Handler+0x8>
	...

08000a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	4b10      	ldr	r3, [pc, #64]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a42:	4a0f      	ldr	r2, [pc, #60]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a48:	6453      	str	r3, [r2, #68]	; 0x44
 8000a4a:	4b0d      	ldr	r3, [pc, #52]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a56:	2300      	movs	r3, #0
 8000a58:	603b      	str	r3, [r7, #0]
 8000a5a:	4b09      	ldr	r3, [pc, #36]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a5e:	4a08      	ldr	r2, [pc, #32]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a64:	6413      	str	r3, [r2, #64]	; 0x40
 8000a66:	4b06      	ldr	r3, [pc, #24]	; (8000a80 <HAL_MspInit+0x4c>)
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000a72:	2007      	movs	r0, #7
 8000a74:	f000 fd1c 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a78:	bf00      	nop
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}
 8000a80:	40023800 	.word	0x40023800

08000a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a84:	b480      	push	{r7}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a88:	e7fe      	b.n	8000a88 <NMI_Handler+0x4>

08000a8a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8a:	b480      	push	{r7}
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8e:	e7fe      	b.n	8000a8e <HardFault_Handler+0x4>

08000a90 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a94:	e7fe      	b.n	8000a94 <MemManage_Handler+0x4>

08000a96 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a96:	b480      	push	{r7}
 8000a98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9a:	e7fe      	b.n	8000a9a <BusFault_Handler+0x4>

08000a9c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <UsageFault_Handler+0x4>

08000aa2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000aa6:	bf00      	nop
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr

08000ab0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr

08000abe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000abe:	b480      	push	{r7}
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ac2:	bf00      	nop
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr

08000acc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad0:	f000 fbfe 	bl	80012d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ad4:	bf00      	nop
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim2_ch1);
 8000adc:	4802      	ldr	r0, [pc, #8]	; (8000ae8 <DMA1_Stream5_IRQHandler+0x10>)
 8000ade:	f000 fe69 	bl	80017b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	20000138 	.word	0x20000138

08000aec <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000af0:	4802      	ldr	r0, [pc, #8]	; (8000afc <DMA1_Stream6_IRQHandler+0x10>)
 8000af2:	f000 fe5f 	bl	80017b4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	200002b8 	.word	0x200002b8

08000b00 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim10);
 8000b04:	4802      	ldr	r0, [pc, #8]	; (8000b10 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000b06:	f002 fb6f 	bl	80031e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000b0a:	bf00      	nop
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	20000198 	.word	0x20000198

08000b14 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim11);
 8000b18:	4802      	ldr	r0, [pc, #8]	; (8000b24 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 8000b1a:	f002 fb65 	bl	80031e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 8000b1e:	bf00      	nop
 8000b20:	bd80      	pop	{r7, pc}
 8000b22:	bf00      	nop
 8000b24:	20000228 	.word	0x20000228

08000b28 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <TIM2_IRQHandler+0x10>)
 8000b2e:	f002 fb5b 	bl	80031e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000270 	.word	0x20000270

08000b3c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000b40:	4802      	ldr	r0, [pc, #8]	; (8000b4c <TIM3_IRQHandler+0x10>)
 8000b42:	f002 fb51 	bl	80031e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000b46:	bf00      	nop
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	200001e0 	.word	0x200001e0

08000b50 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000b54:	4802      	ldr	r0, [pc, #8]	; (8000b60 <USART2_IRQHandler+0x10>)
 8000b56:	f003 fbdf 	bl	8004318 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000b5a:	bf00      	nop
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000318 	.word	0x20000318

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f004 f89e 	bl	8004cd4 <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20020000 	.word	0x20020000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	200000c8 	.word	0x200000c8
 8000bcc:	20000370 	.word	0x20000370

08000bd0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim11;
DMA_HandleTypeDef hdma_tim2_ch1;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b08a      	sub	sp, #40	; 0x28
 8000bf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000bfa:	f107 0318 	add.w	r3, r7, #24
 8000bfe:	2200      	movs	r2, #0
 8000c00:	601a      	str	r2, [r3, #0]
 8000c02:	605a      	str	r2, [r3, #4]
 8000c04:	609a      	str	r2, [r3, #8]
 8000c06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	601a      	str	r2, [r3, #0]
 8000c10:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000c12:	463b      	mov	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c1e:	4b2b      	ldr	r3, [pc, #172]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000c26:	4b29      	ldr	r3, [pc, #164]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c28:	2253      	movs	r2, #83	; 0x53
 8000c2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c2c:	4b27      	ldr	r3, [pc, #156]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c2e:	2200      	movs	r2, #0
 8000c30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999999;
 8000c32:	4b26      	ldr	r3, [pc, #152]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c34:	4a26      	ldr	r2, [pc, #152]	; (8000cd0 <MX_TIM2_Init+0xdc>)
 8000c36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c38:	4b24      	ldr	r3, [pc, #144]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c3e:	4b23      	ldr	r3, [pc, #140]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c44:	4821      	ldr	r0, [pc, #132]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c46:	f001 ff09 	bl	8002a5c <HAL_TIM_Base_Init>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_TIM2_Init+0x60>
  {
    Error_Handler();
 8000c50:	f7ff feea 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c58:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c5a:	f107 0318 	add.w	r3, r7, #24
 8000c5e:	4619      	mov	r1, r3
 8000c60:	481a      	ldr	r0, [pc, #104]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c62:	f002 fd1b 	bl	800369c <HAL_TIM_ConfigClockSource>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 8000c6c:	f7ff fedc 	bl	8000a28 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000c70:	4816      	ldr	r0, [pc, #88]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c72:	f002 f93d 	bl	8002ef0 <HAL_TIM_IC_Init>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c7c:	f7ff fed4 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c88:	f107 0310 	add.w	r3, r7, #16
 8000c8c:	4619      	mov	r1, r3
 8000c8e:	480f      	ldr	r0, [pc, #60]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000c90:	f003 fa20 	bl	80040d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000c94:	4603      	mov	r3, r0
 8000c96:	2b00      	cmp	r3, #0
 8000c98:	d001      	beq.n	8000c9e <MX_TIM2_Init+0xaa>
  {
    Error_Handler();
 8000c9a:	f7ff fec5 	bl	8000a28 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000c9e:	230a      	movs	r3, #10
 8000ca0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ca2:	2301      	movs	r3, #1
 8000ca4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_TIM2_Init+0xd8>)
 8000cb6:	f002 fb9f 	bl	80033f8 <HAL_TIM_IC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 8000cc0:	f7ff feb2 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3728      	adds	r7, #40	; 0x28
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000270 	.word	0x20000270
 8000cd0:	000f423f 	.word	0x000f423f

08000cd4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	b08e      	sub	sp, #56	; 0x38
 8000cd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cda:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cde:	2200      	movs	r2, #0
 8000ce0:	601a      	str	r2, [r3, #0]
 8000ce2:	605a      	str	r2, [r3, #4]
 8000ce4:	609a      	str	r2, [r3, #8]
 8000ce6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ce8:	f107 0320 	add.w	r3, r7, #32
 8000cec:	2200      	movs	r2, #0
 8000cee:	601a      	str	r2, [r3, #0]
 8000cf0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cf2:	1d3b      	adds	r3, r7, #4
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
 8000d00:	615a      	str	r2, [r3, #20]
 8000d02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000d04:	4b2d      	ldr	r3, [pc, #180]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d06:	4a2e      	ldr	r2, [pc, #184]	; (8000dc0 <MX_TIM3_Init+0xec>)
 8000d08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 999;
 8000d0a:	4b2c      	ldr	r3, [pc, #176]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d0c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d10:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d12:	4b2a      	ldr	r3, [pc, #168]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d14:	2200      	movs	r2, #0
 8000d16:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 41999;
 8000d18:	4b28      	ldr	r3, [pc, #160]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d1a:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000d1e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d20:	4b26      	ldr	r3, [pc, #152]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000d26:	4b25      	ldr	r3, [pc, #148]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d28:	2280      	movs	r2, #128	; 0x80
 8000d2a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000d2c:	4823      	ldr	r0, [pc, #140]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d2e:	f001 fe95 	bl	8002a5c <HAL_TIM_Base_Init>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d001      	beq.n	8000d3c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000d38:	f7ff fe76 	bl	8000a28 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d40:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d46:	4619      	mov	r1, r3
 8000d48:	481c      	ldr	r0, [pc, #112]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d4a:	f002 fca7 	bl	800369c <HAL_TIM_ConfigClockSource>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000d54:	f7ff fe68 	bl	8000a28 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d58:	4818      	ldr	r0, [pc, #96]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d5a:	f001 ffa7 	bl	8002cac <HAL_TIM_PWM_Init>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d001      	beq.n	8000d68 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000d64:	f7ff fe60 	bl	8000a28 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d68:	2300      	movs	r3, #0
 8000d6a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d70:	f107 0320 	add.w	r3, r7, #32
 8000d74:	4619      	mov	r1, r3
 8000d76:	4811      	ldr	r0, [pc, #68]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d78:	f003 f9ac 	bl	80040d4 <HAL_TIMEx_MasterConfigSynchronization>
 8000d7c:	4603      	mov	r3, r0
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d001      	beq.n	8000d86 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000d82:	f7ff fe51 	bl	8000a28 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d86:	2360      	movs	r3, #96	; 0x60
 8000d88:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d92:	2300      	movs	r3, #0
 8000d94:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d96:	1d3b      	adds	r3, r7, #4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4807      	ldr	r0, [pc, #28]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000d9e:	f002 fbbf 	bl	8003520 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d001      	beq.n	8000dac <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8000da8:	f7ff fe3e 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dac:	4803      	ldr	r0, [pc, #12]	; (8000dbc <MX_TIM3_Init+0xe8>)
 8000dae:	f000 f92d 	bl	800100c <HAL_TIM_MspPostInit>

}
 8000db2:	bf00      	nop
 8000db4:	3738      	adds	r7, #56	; 0x38
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd80      	pop	{r7, pc}
 8000dba:	bf00      	nop
 8000dbc:	200001e0 	.word	0x200001e0
 8000dc0:	40000400 	.word	0x40000400

08000dc4 <MX_TIM10_Init>:
/* TIM10 init function */
void MX_TIM10_Init(void)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE END TIM10_Init 0 */

  /* USER CODE BEGIN TIM10_Init 1 */

  /* USER CODE END TIM10_Init 1 */
  htim10.Instance = TIM10;
 8000dc8:	4b0e      	ldr	r3, [pc, #56]	; (8000e04 <MX_TIM10_Init+0x40>)
 8000dca:	4a0f      	ldr	r2, [pc, #60]	; (8000e08 <MX_TIM10_Init+0x44>)
 8000dcc:	601a      	str	r2, [r3, #0]
  htim10.Init.Prescaler = 1999;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	; (8000e04 <MX_TIM10_Init+0x40>)
 8000dd0:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000dd4:	605a      	str	r2, [r3, #4]
  htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dd6:	4b0b      	ldr	r3, [pc, #44]	; (8000e04 <MX_TIM10_Init+0x40>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	609a      	str	r2, [r3, #8]
  htim10.Init.Period = 41999;
 8000ddc:	4b09      	ldr	r3, [pc, #36]	; (8000e04 <MX_TIM10_Init+0x40>)
 8000dde:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000de2:	60da      	str	r2, [r3, #12]
  htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000de4:	4b07      	ldr	r3, [pc, #28]	; (8000e04 <MX_TIM10_Init+0x40>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	611a      	str	r2, [r3, #16]
  htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000dea:	4b06      	ldr	r3, [pc, #24]	; (8000e04 <MX_TIM10_Init+0x40>)
 8000dec:	2280      	movs	r2, #128	; 0x80
 8000dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim10) != HAL_OK)
 8000df0:	4804      	ldr	r0, [pc, #16]	; (8000e04 <MX_TIM10_Init+0x40>)
 8000df2:	f001 fe33 	bl	8002a5c <HAL_TIM_Base_Init>
 8000df6:	4603      	mov	r3, r0
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d001      	beq.n	8000e00 <MX_TIM10_Init+0x3c>
  {
    Error_Handler();
 8000dfc:	f7ff fe14 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM10_Init 2 */

  /* USER CODE END TIM10_Init 2 */

}
 8000e00:	bf00      	nop
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20000198 	.word	0x20000198
 8000e08:	40014400 	.word	0x40014400

08000e0c <MX_TIM11_Init>:
/* TIM11 init function */
void MX_TIM11_Init(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM11_Init 0 */

  /* USER CODE BEGIN TIM11_Init 1 */

  /* USER CODE END TIM11_Init 1 */
  htim11.Instance = TIM11;
 8000e10:	4b0e      	ldr	r3, [pc, #56]	; (8000e4c <MX_TIM11_Init+0x40>)
 8000e12:	4a0f      	ldr	r2, [pc, #60]	; (8000e50 <MX_TIM11_Init+0x44>)
 8000e14:	601a      	str	r2, [r3, #0]
  htim11.Init.Prescaler = 1999;
 8000e16:	4b0d      	ldr	r3, [pc, #52]	; (8000e4c <MX_TIM11_Init+0x40>)
 8000e18:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e1c:	605a      	str	r2, [r3, #4]
  htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e1e:	4b0b      	ldr	r3, [pc, #44]	; (8000e4c <MX_TIM11_Init+0x40>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	609a      	str	r2, [r3, #8]
  htim11.Init.Period = 41999;
 8000e24:	4b09      	ldr	r3, [pc, #36]	; (8000e4c <MX_TIM11_Init+0x40>)
 8000e26:	f24a 420f 	movw	r2, #41999	; 0xa40f
 8000e2a:	60da      	str	r2, [r3, #12]
  htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e2c:	4b07      	ldr	r3, [pc, #28]	; (8000e4c <MX_TIM11_Init+0x40>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	611a      	str	r2, [r3, #16]
  htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e32:	4b06      	ldr	r3, [pc, #24]	; (8000e4c <MX_TIM11_Init+0x40>)
 8000e34:	2280      	movs	r2, #128	; 0x80
 8000e36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim11) != HAL_OK)
 8000e38:	4804      	ldr	r0, [pc, #16]	; (8000e4c <MX_TIM11_Init+0x40>)
 8000e3a:	f001 fe0f 	bl	8002a5c <HAL_TIM_Base_Init>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <MX_TIM11_Init+0x3c>
  {
    Error_Handler();
 8000e44:	f7ff fdf0 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN TIM11_Init 2 */

  /* USER CODE END TIM11_Init 2 */

}
 8000e48:	bf00      	nop
 8000e4a:	bd80      	pop	{r7, pc}
 8000e4c:	20000228 	.word	0x20000228
 8000e50:	40014800 	.word	0x40014800

08000e54 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b08c      	sub	sp, #48	; 0x30
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e5c:	f107 031c 	add.w	r3, r7, #28
 8000e60:	2200      	movs	r2, #0
 8000e62:	601a      	str	r2, [r3, #0]
 8000e64:	605a      	str	r2, [r3, #4]
 8000e66:	609a      	str	r2, [r3, #8]
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM2)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000e74:	d164      	bne.n	8000f40 <HAL_TIM_Base_MspInit+0xec>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000e76:	2300      	movs	r3, #0
 8000e78:	61bb      	str	r3, [r7, #24]
 8000e7a:	4b5d      	ldr	r3, [pc, #372]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e7e:	4a5c      	ldr	r2, [pc, #368]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000e80:	f043 0301 	orr.w	r3, r3, #1
 8000e84:	6413      	str	r3, [r2, #64]	; 0x40
 8000e86:	4b5a      	ldr	r3, [pc, #360]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8a:	f003 0301 	and.w	r3, r3, #1
 8000e8e:	61bb      	str	r3, [r7, #24]
 8000e90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	617b      	str	r3, [r7, #20]
 8000e96:	4b56      	ldr	r3, [pc, #344]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a55      	ldr	r2, [pc, #340]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000e9c:	f043 0301 	orr.w	r3, r3, #1
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b53      	ldr	r3, [pc, #332]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f003 0301 	and.w	r3, r3, #1
 8000eaa:	617b      	str	r3, [r7, #20]
 8000eac:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000eae:	2301      	movs	r3, #1
 8000eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000eb2:	2302      	movs	r3, #2
 8000eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000ebe:	2301      	movs	r3, #1
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ec2:	f107 031c 	add.w	r3, r7, #28
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	484a      	ldr	r0, [pc, #296]	; (8000ff4 <HAL_TIM_Base_MspInit+0x1a0>)
 8000eca:	f000 feaf 	bl	8001c2c <HAL_GPIO_Init>

    /* TIM2 DMA Init */
    /* TIM2_CH1 Init */
    hdma_tim2_ch1.Instance = DMA1_Stream5;
 8000ece:	4b4a      	ldr	r3, [pc, #296]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000ed0:	4a4a      	ldr	r2, [pc, #296]	; (8000ffc <HAL_TIM_Base_MspInit+0x1a8>)
 8000ed2:	601a      	str	r2, [r3, #0]
    hdma_tim2_ch1.Init.Channel = DMA_CHANNEL_3;
 8000ed4:	4b48      	ldr	r3, [pc, #288]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000ed6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8000eda:	605a      	str	r2, [r3, #4]
    hdma_tim2_ch1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000edc:	4b46      	ldr	r3, [pc, #280]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	609a      	str	r2, [r3, #8]
    hdma_tim2_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ee2:	4b45      	ldr	r3, [pc, #276]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	60da      	str	r2, [r3, #12]
    hdma_tim2_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000ee8:	4b43      	ldr	r3, [pc, #268]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000eea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000eee:	611a      	str	r2, [r3, #16]
    hdma_tim2_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ef0:	4b41      	ldr	r3, [pc, #260]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000ef2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ef6:	615a      	str	r2, [r3, #20]
    hdma_tim2_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ef8:	4b3f      	ldr	r3, [pc, #252]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	619a      	str	r2, [r3, #24]
    hdma_tim2_ch1.Init.Mode = DMA_NORMAL;
 8000f00:	4b3d      	ldr	r3, [pc, #244]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
    hdma_tim2_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f06:	4b3c      	ldr	r3, [pc, #240]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	621a      	str	r2, [r3, #32]
    hdma_tim2_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f0c:	4b3a      	ldr	r3, [pc, #232]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim2_ch1) != HAL_OK)
 8000f12:	4839      	ldr	r0, [pc, #228]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000f14:	f000 fb0e 	bl	8001534 <HAL_DMA_Init>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	d001      	beq.n	8000f22 <HAL_TIM_Base_MspInit+0xce>
    {
      Error_Handler();
 8000f1e:	f7ff fd83 	bl	8000a28 <Error_Handler>
    }

    __HAL_LINKDMA(tim_baseHandle,hdma[TIM_DMA_ID_CC1],hdma_tim2_ch1);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4a34      	ldr	r2, [pc, #208]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000f26:	625a      	str	r2, [r3, #36]	; 0x24
 8000f28:	4a33      	ldr	r2, [pc, #204]	; (8000ff8 <HAL_TIM_Base_MspInit+0x1a4>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6393      	str	r3, [r2, #56]	; 0x38

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000f2e:	2200      	movs	r2, #0
 8000f30:	2100      	movs	r1, #0
 8000f32:	201c      	movs	r0, #28
 8000f34:	f000 fac7 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000f38:	201c      	movs	r0, #28
 8000f3a:	f000 fae0 	bl	80014fe <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }
}
 8000f3e:	e052      	b.n	8000fe6 <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM3)
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	4a2e      	ldr	r2, [pc, #184]	; (8001000 <HAL_TIM_Base_MspInit+0x1ac>)
 8000f46:	4293      	cmp	r3, r2
 8000f48:	d116      	bne.n	8000f78 <HAL_TIM_Base_MspInit+0x124>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b28      	ldr	r3, [pc, #160]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f52:	4a27      	ldr	r2, [pc, #156]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6413      	str	r3, [r2, #64]	; 0x40
 8000f5a:	4b25      	ldr	r3, [pc, #148]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000f66:	2200      	movs	r2, #0
 8000f68:	2100      	movs	r1, #0
 8000f6a:	201d      	movs	r0, #29
 8000f6c:	f000 faab 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000f70:	201d      	movs	r0, #29
 8000f72:	f000 fac4 	bl	80014fe <HAL_NVIC_EnableIRQ>
}
 8000f76:	e036      	b.n	8000fe6 <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM10)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a21      	ldr	r2, [pc, #132]	; (8001004 <HAL_TIM_Base_MspInit+0x1b0>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d116      	bne.n	8000fb0 <HAL_TIM_Base_MspInit+0x15c>
    __HAL_RCC_TIM10_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60fb      	str	r3, [r7, #12]
 8000f86:	4b1a      	ldr	r3, [pc, #104]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f8a:	4a19      	ldr	r2, [pc, #100]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f90:	6453      	str	r3, [r2, #68]	; 0x44
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f9a:	60fb      	str	r3, [r7, #12]
 8000f9c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2019      	movs	r0, #25
 8000fa4:	f000 fa8f 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000fa8:	2019      	movs	r0, #25
 8000faa:	f000 faa8 	bl	80014fe <HAL_NVIC_EnableIRQ>
}
 8000fae:	e01a      	b.n	8000fe6 <HAL_TIM_Base_MspInit+0x192>
  else if(tim_baseHandle->Instance==TIM11)
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a14      	ldr	r2, [pc, #80]	; (8001008 <HAL_TIM_Base_MspInit+0x1b4>)
 8000fb6:	4293      	cmp	r3, r2
 8000fb8:	d115      	bne.n	8000fe6 <HAL_TIM_Base_MspInit+0x192>
    __HAL_RCC_TIM11_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	60bb      	str	r3, [r7, #8]
 8000fbe:	4b0c      	ldr	r3, [pc, #48]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000fc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fc2:	4a0b      	ldr	r2, [pc, #44]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000fc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000fca:	4b09      	ldr	r3, [pc, #36]	; (8000ff0 <HAL_TIM_Base_MspInit+0x19c>)
 8000fcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000fd2:	60bb      	str	r3, [r7, #8]
 8000fd4:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	2100      	movs	r1, #0
 8000fda:	201a      	movs	r0, #26
 8000fdc:	f000 fa73 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 8000fe0:	201a      	movs	r0, #26
 8000fe2:	f000 fa8c 	bl	80014fe <HAL_NVIC_EnableIRQ>
}
 8000fe6:	bf00      	nop
 8000fe8:	3730      	adds	r7, #48	; 0x30
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
 8000fee:	bf00      	nop
 8000ff0:	40023800 	.word	0x40023800
 8000ff4:	40020000 	.word	0x40020000
 8000ff8:	20000138 	.word	0x20000138
 8000ffc:	40026088 	.word	0x40026088
 8001000:	40000400 	.word	0x40000400
 8001004:	40014400 	.word	0x40014400
 8001008:	40014800 	.word	0x40014800

0800100c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b088      	sub	sp, #32
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001014:	f107 030c 	add.w	r3, r7, #12
 8001018:	2200      	movs	r2, #0
 800101a:	601a      	str	r2, [r3, #0]
 800101c:	605a      	str	r2, [r3, #4]
 800101e:	609a      	str	r2, [r3, #8]
 8001020:	60da      	str	r2, [r3, #12]
 8001022:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	4a12      	ldr	r2, [pc, #72]	; (8001074 <HAL_TIM_MspPostInit+0x68>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d11d      	bne.n	800106a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800102e:	2300      	movs	r3, #0
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <HAL_TIM_MspPostInit+0x6c>)
 8001034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001036:	4a10      	ldr	r2, [pc, #64]	; (8001078 <HAL_TIM_MspPostInit+0x6c>)
 8001038:	f043 0301 	orr.w	r3, r3, #1
 800103c:	6313      	str	r3, [r2, #48]	; 0x30
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <HAL_TIM_MspPostInit+0x6c>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	f003 0301 	and.w	r3, r3, #1
 8001046:	60bb      	str	r3, [r7, #8]
 8001048:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800104a:	2340      	movs	r3, #64	; 0x40
 800104c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800105a:	2302      	movs	r3, #2
 800105c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105e:	f107 030c 	add.w	r3, r7, #12
 8001062:	4619      	mov	r1, r3
 8001064:	4805      	ldr	r0, [pc, #20]	; (800107c <HAL_TIM_MspPostInit+0x70>)
 8001066:	f000 fde1 	bl	8001c2c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3720      	adds	r7, #32
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40000400 	.word	0x40000400
 8001078:	40023800 	.word	0x40023800
 800107c:	40020000 	.word	0x40020000

08001080 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001084:	4b11      	ldr	r3, [pc, #68]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001086:	4a12      	ldr	r2, [pc, #72]	; (80010d0 <MX_USART2_UART_Init+0x50>)
 8001088:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800108a:	4b10      	ldr	r3, [pc, #64]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800108c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001090:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001092:	4b0e      	ldr	r3, [pc, #56]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 8001094:	2200      	movs	r2, #0
 8001096:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001098:	4b0c      	ldr	r3, [pc, #48]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 800109a:	2200      	movs	r2, #0
 800109c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800109e:	4b0b      	ldr	r3, [pc, #44]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a0:	2200      	movs	r2, #0
 80010a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80010a4:	4b09      	ldr	r3, [pc, #36]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010a6:	220c      	movs	r2, #12
 80010a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010aa:	4b08      	ldr	r3, [pc, #32]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80010b0:	4b06      	ldr	r3, [pc, #24]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80010b6:	4805      	ldr	r0, [pc, #20]	; (80010cc <MX_USART2_UART_Init+0x4c>)
 80010b8:	f003 f89c 	bl	80041f4 <HAL_UART_Init>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80010c2:	f7ff fcb1 	bl	8000a28 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000318 	.word	0x20000318
 80010d0:	40004400 	.word	0x40004400

080010d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b08a      	sub	sp, #40	; 0x28
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010dc:	f107 0314 	add.w	r3, r7, #20
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]
 80010ea:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4a34      	ldr	r2, [pc, #208]	; (80011c4 <HAL_UART_MspInit+0xf0>)
 80010f2:	4293      	cmp	r3, r2
 80010f4:	d161      	bne.n	80011ba <HAL_UART_MspInit+0xe6>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80010f6:	2300      	movs	r3, #0
 80010f8:	613b      	str	r3, [r7, #16]
 80010fa:	4b33      	ldr	r3, [pc, #204]	; (80011c8 <HAL_UART_MspInit+0xf4>)
 80010fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fe:	4a32      	ldr	r2, [pc, #200]	; (80011c8 <HAL_UART_MspInit+0xf4>)
 8001100:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001104:	6413      	str	r3, [r2, #64]	; 0x40
 8001106:	4b30      	ldr	r3, [pc, #192]	; (80011c8 <HAL_UART_MspInit+0xf4>)
 8001108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110e:	613b      	str	r3, [r7, #16]
 8001110:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001112:	2300      	movs	r3, #0
 8001114:	60fb      	str	r3, [r7, #12]
 8001116:	4b2c      	ldr	r3, [pc, #176]	; (80011c8 <HAL_UART_MspInit+0xf4>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	4a2b      	ldr	r2, [pc, #172]	; (80011c8 <HAL_UART_MspInit+0xf4>)
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	6313      	str	r3, [r2, #48]	; 0x30
 8001122:	4b29      	ldr	r3, [pc, #164]	; (80011c8 <HAL_UART_MspInit+0xf4>)
 8001124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001126:	f003 0301 	and.w	r3, r3, #1
 800112a:	60fb      	str	r3, [r7, #12]
 800112c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800112e:	230c      	movs	r3, #12
 8001130:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001132:	2302      	movs	r3, #2
 8001134:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001136:	2300      	movs	r3, #0
 8001138:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800113a:	2303      	movs	r3, #3
 800113c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800113e:	2307      	movs	r3, #7
 8001140:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0314 	add.w	r3, r7, #20
 8001146:	4619      	mov	r1, r3
 8001148:	4820      	ldr	r0, [pc, #128]	; (80011cc <HAL_UART_MspInit+0xf8>)
 800114a:	f000 fd6f 	bl	8001c2c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800114e:	4b20      	ldr	r3, [pc, #128]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 8001150:	4a20      	ldr	r2, [pc, #128]	; (80011d4 <HAL_UART_MspInit+0x100>)
 8001152:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001154:	4b1e      	ldr	r3, [pc, #120]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 8001156:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800115a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800115c:	4b1c      	ldr	r3, [pc, #112]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 800115e:	2240      	movs	r2, #64	; 0x40
 8001160:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001162:	4b1b      	ldr	r3, [pc, #108]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 8001164:	2200      	movs	r2, #0
 8001166:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001168:	4b19      	ldr	r3, [pc, #100]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 800116a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800116e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001170:	4b17      	ldr	r3, [pc, #92]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 8001172:	2200      	movs	r2, #0
 8001174:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001176:	4b16      	ldr	r3, [pc, #88]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800117c:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 800117e:	2200      	movs	r2, #0
 8001180:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001182:	4b13      	ldr	r3, [pc, #76]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 8001184:	2200      	movs	r2, #0
 8001186:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001188:	4b11      	ldr	r3, [pc, #68]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 800118a:	2200      	movs	r2, #0
 800118c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800118e:	4810      	ldr	r0, [pc, #64]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 8001190:	f000 f9d0 	bl	8001534 <HAL_DMA_Init>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <HAL_UART_MspInit+0xca>
    {
      Error_Handler();
 800119a:	f7ff fc45 	bl	8000a28 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a0b      	ldr	r2, [pc, #44]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 80011a2:	635a      	str	r2, [r3, #52]	; 0x34
 80011a4:	4a0a      	ldr	r2, [pc, #40]	; (80011d0 <HAL_UART_MspInit+0xfc>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011aa:	2200      	movs	r2, #0
 80011ac:	2100      	movs	r1, #0
 80011ae:	2026      	movs	r0, #38	; 0x26
 80011b0:	f000 f989 	bl	80014c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011b4:	2026      	movs	r0, #38	; 0x26
 80011b6:	f000 f9a2 	bl	80014fe <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80011ba:	bf00      	nop
 80011bc:	3728      	adds	r7, #40	; 0x28
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	40004400 	.word	0x40004400
 80011c8:	40023800 	.word	0x40023800
 80011cc:	40020000 	.word	0x40020000
 80011d0:	200002b8 	.word	0x200002b8
 80011d4:	400260a0 	.word	0x400260a0

080011d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80011d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001210 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80011dc:	480d      	ldr	r0, [pc, #52]	; (8001214 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80011de:	490e      	ldr	r1, [pc, #56]	; (8001218 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80011e0:	4a0e      	ldr	r2, [pc, #56]	; (800121c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80011e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80011e4:	e002      	b.n	80011ec <LoopCopyDataInit>

080011e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80011e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80011e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80011ea:	3304      	adds	r3, #4

080011ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80011ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80011ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80011f0:	d3f9      	bcc.n	80011e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80011f2:	4a0b      	ldr	r2, [pc, #44]	; (8001220 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011f4:	4c0b      	ldr	r4, [pc, #44]	; (8001224 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011f8:	e001      	b.n	80011fe <LoopFillZerobss>

080011fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011fc:	3204      	adds	r2, #4

080011fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001200:	d3fb      	bcc.n	80011fa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001202:	f7ff fce5 	bl	8000bd0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001206:	f003 fd6b 	bl	8004ce0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800120a:	f7ff fa6d 	bl	80006e8 <main>
  bx  lr    
 800120e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001210:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001214:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001218:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 800121c:	08005628 	.word	0x08005628
  ldr r2, =_sbss
 8001220:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8001224:	20000370 	.word	0x20000370

08001228 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001228:	e7fe      	b.n	8001228 <ADC_IRQHandler>
	...

0800122c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001230:	4b0e      	ldr	r3, [pc, #56]	; (800126c <HAL_Init+0x40>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	4a0d      	ldr	r2, [pc, #52]	; (800126c <HAL_Init+0x40>)
 8001236:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800123a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800123c:	4b0b      	ldr	r3, [pc, #44]	; (800126c <HAL_Init+0x40>)
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	4a0a      	ldr	r2, [pc, #40]	; (800126c <HAL_Init+0x40>)
 8001242:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001246:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001248:	4b08      	ldr	r3, [pc, #32]	; (800126c <HAL_Init+0x40>)
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	4a07      	ldr	r2, [pc, #28]	; (800126c <HAL_Init+0x40>)
 800124e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001252:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001254:	2003      	movs	r0, #3
 8001256:	f000 f92b 	bl	80014b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800125a:	2000      	movs	r0, #0
 800125c:	f000 f808 	bl	8001270 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001260:	f7ff fbe8 	bl	8000a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001264:	2300      	movs	r3, #0
}
 8001266:	4618      	mov	r0, r3
 8001268:	bd80      	pop	{r7, pc}
 800126a:	bf00      	nop
 800126c:	40023c00 	.word	0x40023c00

08001270 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001270:	b580      	push	{r7, lr}
 8001272:	b082      	sub	sp, #8
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001278:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <HAL_InitTick+0x54>)
 800127a:	681a      	ldr	r2, [r3, #0]
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <HAL_InitTick+0x58>)
 800127e:	781b      	ldrb	r3, [r3, #0]
 8001280:	4619      	mov	r1, r3
 8001282:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001286:	fbb3 f3f1 	udiv	r3, r3, r1
 800128a:	fbb2 f3f3 	udiv	r3, r2, r3
 800128e:	4618      	mov	r0, r3
 8001290:	f000 f943 	bl	800151a <HAL_SYSTICK_Config>
 8001294:	4603      	mov	r3, r0
 8001296:	2b00      	cmp	r3, #0
 8001298:	d001      	beq.n	800129e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800129a:	2301      	movs	r3, #1
 800129c:	e00e      	b.n	80012bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d80a      	bhi.n	80012ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	f04f 30ff 	mov.w	r0, #4294967295
 80012ac:	f000 f90b 	bl	80014c6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80012b0:	4a06      	ldr	r2, [pc, #24]	; (80012cc <HAL_InitTick+0x5c>)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80012b6:	2300      	movs	r3, #0
 80012b8:	e000      	b.n	80012bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	20000008 	.word	0x20000008
 80012c8:	20000010 	.word	0x20000010
 80012cc:	2000000c 	.word	0x2000000c

080012d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80012d4:	4b06      	ldr	r3, [pc, #24]	; (80012f0 <HAL_IncTick+0x20>)
 80012d6:	781b      	ldrb	r3, [r3, #0]
 80012d8:	461a      	mov	r2, r3
 80012da:	4b06      	ldr	r3, [pc, #24]	; (80012f4 <HAL_IncTick+0x24>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	4413      	add	r3, r2
 80012e0:	4a04      	ldr	r2, [pc, #16]	; (80012f4 <HAL_IncTick+0x24>)
 80012e2:	6013      	str	r3, [r2, #0]
}
 80012e4:	bf00      	nop
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	20000010 	.word	0x20000010
 80012f4:	2000035c 	.word	0x2000035c

080012f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012f8:	b480      	push	{r7}
 80012fa:	af00      	add	r7, sp, #0
  return uwTick;
 80012fc:	4b03      	ldr	r3, [pc, #12]	; (800130c <HAL_GetTick+0x14>)
 80012fe:	681b      	ldr	r3, [r3, #0]
}
 8001300:	4618      	mov	r0, r3
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr
 800130a:	bf00      	nop
 800130c:	2000035c 	.word	0x2000035c

08001310 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001310:	b480      	push	{r7}
 8001312:	b085      	sub	sp, #20
 8001314:	af00      	add	r7, sp, #0
 8001316:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	f003 0307 	and.w	r3, r3, #7
 800131e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001320:	4b0c      	ldr	r3, [pc, #48]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001322:	68db      	ldr	r3, [r3, #12]
 8001324:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001326:	68ba      	ldr	r2, [r7, #8]
 8001328:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800132c:	4013      	ands	r3, r2
 800132e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001338:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800133c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001340:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001342:	4a04      	ldr	r2, [pc, #16]	; (8001354 <__NVIC_SetPriorityGrouping+0x44>)
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	60d3      	str	r3, [r2, #12]
}
 8001348:	bf00      	nop
 800134a:	3714      	adds	r7, #20
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	e000ed00 	.word	0xe000ed00

08001358 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001358:	b480      	push	{r7}
 800135a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800135c:	4b04      	ldr	r3, [pc, #16]	; (8001370 <__NVIC_GetPriorityGrouping+0x18>)
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	0a1b      	lsrs	r3, r3, #8
 8001362:	f003 0307 	and.w	r3, r3, #7
}
 8001366:	4618      	mov	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr
 8001370:	e000ed00 	.word	0xe000ed00

08001374 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001374:	b480      	push	{r7}
 8001376:	b083      	sub	sp, #12
 8001378:	af00      	add	r7, sp, #0
 800137a:	4603      	mov	r3, r0
 800137c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800137e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001382:	2b00      	cmp	r3, #0
 8001384:	db0b      	blt.n	800139e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001386:	79fb      	ldrb	r3, [r7, #7]
 8001388:	f003 021f 	and.w	r2, r3, #31
 800138c:	4907      	ldr	r1, [pc, #28]	; (80013ac <__NVIC_EnableIRQ+0x38>)
 800138e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001392:	095b      	lsrs	r3, r3, #5
 8001394:	2001      	movs	r0, #1
 8001396:	fa00 f202 	lsl.w	r2, r0, r2
 800139a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800139e:	bf00      	nop
 80013a0:	370c      	adds	r7, #12
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	e000e100 	.word	0xe000e100

080013b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	6039      	str	r1, [r7, #0]
 80013ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	db0a      	blt.n	80013da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	490c      	ldr	r1, [pc, #48]	; (80013fc <__NVIC_SetPriority+0x4c>)
 80013ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ce:	0112      	lsls	r2, r2, #4
 80013d0:	b2d2      	uxtb	r2, r2
 80013d2:	440b      	add	r3, r1
 80013d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013d8:	e00a      	b.n	80013f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	4908      	ldr	r1, [pc, #32]	; (8001400 <__NVIC_SetPriority+0x50>)
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	3b04      	subs	r3, #4
 80013e8:	0112      	lsls	r2, r2, #4
 80013ea:	b2d2      	uxtb	r2, r2
 80013ec:	440b      	add	r3, r1
 80013ee:	761a      	strb	r2, [r3, #24]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr
 80013fc:	e000e100 	.word	0xe000e100
 8001400:	e000ed00 	.word	0xe000ed00

08001404 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001404:	b480      	push	{r7}
 8001406:	b089      	sub	sp, #36	; 0x24
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	f003 0307 	and.w	r3, r3, #7
 8001416:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	f1c3 0307 	rsb	r3, r3, #7
 800141e:	2b04      	cmp	r3, #4
 8001420:	bf28      	it	cs
 8001422:	2304      	movcs	r3, #4
 8001424:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	3304      	adds	r3, #4
 800142a:	2b06      	cmp	r3, #6
 800142c:	d902      	bls.n	8001434 <NVIC_EncodePriority+0x30>
 800142e:	69fb      	ldr	r3, [r7, #28]
 8001430:	3b03      	subs	r3, #3
 8001432:	e000      	b.n	8001436 <NVIC_EncodePriority+0x32>
 8001434:	2300      	movs	r3, #0
 8001436:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001438:	f04f 32ff 	mov.w	r2, #4294967295
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43da      	mvns	r2, r3
 8001444:	68bb      	ldr	r3, [r7, #8]
 8001446:	401a      	ands	r2, r3
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800144c:	f04f 31ff 	mov.w	r1, #4294967295
 8001450:	697b      	ldr	r3, [r7, #20]
 8001452:	fa01 f303 	lsl.w	r3, r1, r3
 8001456:	43d9      	mvns	r1, r3
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800145c:	4313      	orrs	r3, r2
         );
}
 800145e:	4618      	mov	r0, r3
 8001460:	3724      	adds	r7, #36	; 0x24
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
	...

0800146c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b082      	sub	sp, #8
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	3b01      	subs	r3, #1
 8001478:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800147c:	d301      	bcc.n	8001482 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800147e:	2301      	movs	r3, #1
 8001480:	e00f      	b.n	80014a2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001482:	4a0a      	ldr	r2, [pc, #40]	; (80014ac <SysTick_Config+0x40>)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	3b01      	subs	r3, #1
 8001488:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800148a:	210f      	movs	r1, #15
 800148c:	f04f 30ff 	mov.w	r0, #4294967295
 8001490:	f7ff ff8e 	bl	80013b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001494:	4b05      	ldr	r3, [pc, #20]	; (80014ac <SysTick_Config+0x40>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800149a:	4b04      	ldr	r3, [pc, #16]	; (80014ac <SysTick_Config+0x40>)
 800149c:	2207      	movs	r2, #7
 800149e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014a0:	2300      	movs	r3, #0
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3708      	adds	r7, #8
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	e000e010 	.word	0xe000e010

080014b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b082      	sub	sp, #8
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff29 	bl	8001310 <__NVIC_SetPriorityGrouping>
}
 80014be:	bf00      	nop
 80014c0:	3708      	adds	r7, #8
 80014c2:	46bd      	mov	sp, r7
 80014c4:	bd80      	pop	{r7, pc}

080014c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80014c6:	b580      	push	{r7, lr}
 80014c8:	b086      	sub	sp, #24
 80014ca:	af00      	add	r7, sp, #0
 80014cc:	4603      	mov	r3, r0
 80014ce:	60b9      	str	r1, [r7, #8]
 80014d0:	607a      	str	r2, [r7, #4]
 80014d2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80014d8:	f7ff ff3e 	bl	8001358 <__NVIC_GetPriorityGrouping>
 80014dc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	68b9      	ldr	r1, [r7, #8]
 80014e2:	6978      	ldr	r0, [r7, #20]
 80014e4:	f7ff ff8e 	bl	8001404 <NVIC_EncodePriority>
 80014e8:	4602      	mov	r2, r0
 80014ea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80014ee:	4611      	mov	r1, r2
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff ff5d 	bl	80013b0 <__NVIC_SetPriority>
}
 80014f6:	bf00      	nop
 80014f8:	3718      	adds	r7, #24
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}

080014fe <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014fe:	b580      	push	{r7, lr}
 8001500:	b082      	sub	sp, #8
 8001502:	af00      	add	r7, sp, #0
 8001504:	4603      	mov	r3, r0
 8001506:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001508:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800150c:	4618      	mov	r0, r3
 800150e:	f7ff ff31 	bl	8001374 <__NVIC_EnableIRQ>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b082      	sub	sp, #8
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff ffa2 	bl	800146c <SysTick_Config>
 8001528:	4603      	mov	r3, r0
}
 800152a:	4618      	mov	r0, r3
 800152c:	3708      	adds	r7, #8
 800152e:	46bd      	mov	sp, r7
 8001530:	bd80      	pop	{r7, pc}
	...

08001534 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b086      	sub	sp, #24
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800153c:	2300      	movs	r3, #0
 800153e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001540:	f7ff feda 	bl	80012f8 <HAL_GetTick>
 8001544:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e099      	b.n	8001684 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2200      	movs	r2, #0
 8001554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2202      	movs	r2, #2
 800155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	681a      	ldr	r2, [r3, #0]
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f022 0201 	bic.w	r2, r2, #1
 800156e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001570:	e00f      	b.n	8001592 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001572:	f7ff fec1 	bl	80012f8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b05      	cmp	r3, #5
 800157e:	d908      	bls.n	8001592 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2220      	movs	r2, #32
 8001584:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2203      	movs	r2, #3
 800158a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800158e:	2303      	movs	r3, #3
 8001590:	e078      	b.n	8001684 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	d1e8      	bne.n	8001572 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80015a8:	697a      	ldr	r2, [r7, #20]
 80015aa:	4b38      	ldr	r3, [pc, #224]	; (800168c <HAL_DMA_Init+0x158>)
 80015ac:	4013      	ands	r3, r2
 80015ae:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685a      	ldr	r2, [r3, #4]
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015be:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	691b      	ldr	r3, [r3, #16]
 80015c4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ca:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	699b      	ldr	r3, [r3, #24]
 80015d0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	6a1b      	ldr	r3, [r3, #32]
 80015dc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80015de:	697a      	ldr	r2, [r7, #20]
 80015e0:	4313      	orrs	r3, r2
 80015e2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e8:	2b04      	cmp	r3, #4
 80015ea:	d107      	bne.n	80015fc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	4313      	orrs	r3, r2
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	697a      	ldr	r2, [r7, #20]
 8001602:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	695b      	ldr	r3, [r3, #20]
 800160a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800160c:	697b      	ldr	r3, [r7, #20]
 800160e:	f023 0307 	bic.w	r3, r3, #7
 8001612:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001618:	697a      	ldr	r2, [r7, #20]
 800161a:	4313      	orrs	r3, r2
 800161c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001622:	2b04      	cmp	r3, #4
 8001624:	d117      	bne.n	8001656 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162a:	697a      	ldr	r2, [r7, #20]
 800162c:	4313      	orrs	r3, r2
 800162e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00e      	beq.n	8001656 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f000 fa7b 	bl	8001b34 <DMA_CheckFifoParam>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d008      	beq.n	8001656 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	2240      	movs	r2, #64	; 0x40
 8001648:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	2201      	movs	r2, #1
 800164e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001652:	2301      	movs	r3, #1
 8001654:	e016      	b.n	8001684 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	697a      	ldr	r2, [r7, #20]
 800165c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800165e:	6878      	ldr	r0, [r7, #4]
 8001660:	f000 fa32 	bl	8001ac8 <DMA_CalcBaseAndBitshift>
 8001664:	4603      	mov	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800166c:	223f      	movs	r2, #63	; 0x3f
 800166e:	409a      	lsls	r2, r3
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	2200      	movs	r2, #0
 8001678:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	2201      	movs	r2, #1
 800167e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001682:	2300      	movs	r3, #0
}
 8001684:	4618      	mov	r0, r3
 8001686:	3718      	adds	r7, #24
 8001688:	46bd      	mov	sp, r7
 800168a:	bd80      	pop	{r7, pc}
 800168c:	f010803f 	.word	0xf010803f

08001690 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	b084      	sub	sp, #16
 8001694:	af00      	add	r7, sp, #0
 8001696:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800169e:	f7ff fe2b 	bl	80012f8 <HAL_GetTick>
 80016a2:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d008      	beq.n	80016c2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	2280      	movs	r2, #128	; 0x80
 80016b4:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2200      	movs	r2, #0
 80016ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80016be:	2301      	movs	r3, #1
 80016c0:	e052      	b.n	8001768 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	f022 0216 	bic.w	r2, r2, #22
 80016d0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	695a      	ldr	r2, [r3, #20]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80016e0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d103      	bne.n	80016f2 <HAL_DMA_Abort+0x62>
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d007      	beq.n	8001702 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 0208 	bic.w	r2, r2, #8
 8001700:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f022 0201 	bic.w	r2, r2, #1
 8001710:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001712:	e013      	b.n	800173c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001714:	f7ff fdf0 	bl	80012f8 <HAL_GetTick>
 8001718:	4602      	mov	r2, r0
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	1ad3      	subs	r3, r2, r3
 800171e:	2b05      	cmp	r3, #5
 8001720:	d90c      	bls.n	800173c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2220      	movs	r2, #32
 8001726:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2203      	movs	r2, #3
 8001734:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8001738:	2303      	movs	r3, #3
 800173a:	e015      	b.n	8001768 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d1e4      	bne.n	8001714 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174e:	223f      	movs	r2, #63	; 0x3f
 8001750:	409a      	lsls	r2, r3
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2200      	movs	r2, #0
 800175a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2201      	movs	r2, #1
 8001762:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8001766:	2300      	movs	r3, #0
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001770:	b480      	push	{r7}
 8001772:	b083      	sub	sp, #12
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800177e:	b2db      	uxtb	r3, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d004      	beq.n	800178e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	2280      	movs	r2, #128	; 0x80
 8001788:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e00c      	b.n	80017a8 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2205      	movs	r2, #5
 8001792:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	681a      	ldr	r2, [r3, #0]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0201 	bic.w	r2, r2, #1
 80017a4:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80017a6:	2300      	movs	r3, #0
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	370c      	adds	r7, #12
 80017ac:	46bd      	mov	sp, r7
 80017ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b2:	4770      	bx	lr

080017b4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80017b4:	b580      	push	{r7, lr}
 80017b6:	b086      	sub	sp, #24
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80017bc:	2300      	movs	r3, #0
 80017be:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80017c0:	4b92      	ldr	r3, [pc, #584]	; (8001a0c <HAL_DMA_IRQHandler+0x258>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a92      	ldr	r2, [pc, #584]	; (8001a10 <HAL_DMA_IRQHandler+0x25c>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0a9b      	lsrs	r3, r3, #10
 80017cc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80017d4:	693b      	ldr	r3, [r7, #16]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017de:	2208      	movs	r2, #8
 80017e0:	409a      	lsls	r2, r3
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	4013      	ands	r3, r2
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d01a      	beq.n	8001820 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f003 0304 	and.w	r3, r3, #4
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d013      	beq.n	8001820 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	681a      	ldr	r2, [r3, #0]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f022 0204 	bic.w	r2, r2, #4
 8001806:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800180c:	2208      	movs	r2, #8
 800180e:	409a      	lsls	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001818:	f043 0201 	orr.w	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001824:	2201      	movs	r2, #1
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d012      	beq.n	8001856 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	695b      	ldr	r3, [r3, #20]
 8001836:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00b      	beq.n	8001856 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001842:	2201      	movs	r2, #1
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800184e:	f043 0202 	orr.w	r2, r3, #2
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800185a:	2204      	movs	r2, #4
 800185c:	409a      	lsls	r2, r3
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	4013      	ands	r3, r2
 8001862:	2b00      	cmp	r3, #0
 8001864:	d012      	beq.n	800188c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f003 0302 	and.w	r3, r3, #2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d00b      	beq.n	800188c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001878:	2204      	movs	r2, #4
 800187a:	409a      	lsls	r2, r3
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001884:	f043 0204 	orr.w	r2, r3, #4
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001890:	2210      	movs	r2, #16
 8001892:	409a      	lsls	r2, r3
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4013      	ands	r3, r2
 8001898:	2b00      	cmp	r3, #0
 800189a:	d043      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0308 	and.w	r3, r3, #8
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d03c      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ae:	2210      	movs	r2, #16
 80018b0:	409a      	lsls	r2, r3
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d018      	beq.n	80018f6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d108      	bne.n	80018e4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d024      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018de:	6878      	ldr	r0, [r7, #4]
 80018e0:	4798      	blx	r3
 80018e2:	e01f      	b.n	8001924 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d01b      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018f0:	6878      	ldr	r0, [r7, #4]
 80018f2:	4798      	blx	r3
 80018f4:	e016      	b.n	8001924 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001900:	2b00      	cmp	r3, #0
 8001902:	d107      	bne.n	8001914 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 0208 	bic.w	r2, r2, #8
 8001912:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001928:	2220      	movs	r2, #32
 800192a:	409a      	lsls	r2, r3
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	4013      	ands	r3, r2
 8001930:	2b00      	cmp	r3, #0
 8001932:	f000 808e 	beq.w	8001a52 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0310 	and.w	r3, r3, #16
 8001940:	2b00      	cmp	r3, #0
 8001942:	f000 8086 	beq.w	8001a52 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194a:	2220      	movs	r2, #32
 800194c:	409a      	lsls	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001958:	b2db      	uxtb	r3, r3
 800195a:	2b05      	cmp	r3, #5
 800195c:	d136      	bne.n	80019cc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	681a      	ldr	r2, [r3, #0]
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f022 0216 	bic.w	r2, r2, #22
 800196c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	695a      	ldr	r2, [r3, #20]
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800197c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001982:	2b00      	cmp	r3, #0
 8001984:	d103      	bne.n	800198e <HAL_DMA_IRQHandler+0x1da>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800198a:	2b00      	cmp	r3, #0
 800198c:	d007      	beq.n	800199e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	681a      	ldr	r2, [r3, #0]
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f022 0208 	bic.w	r2, r2, #8
 800199c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019a2:	223f      	movs	r2, #63	; 0x3f
 80019a4:	409a      	lsls	r2, r3
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	2200      	movs	r2, #0
 80019ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2201      	movs	r2, #1
 80019b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d07d      	beq.n	8001abe <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80019c6:	6878      	ldr	r0, [r7, #4]
 80019c8:	4798      	blx	r3
        }
        return;
 80019ca:	e078      	b.n	8001abe <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d01c      	beq.n	8001a14 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d108      	bne.n	80019fa <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d030      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019f4:	6878      	ldr	r0, [r7, #4]
 80019f6:	4798      	blx	r3
 80019f8:	e02b      	b.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d027      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	4798      	blx	r3
 8001a0a:	e022      	b.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
 8001a0c:	20000008 	.word	0x20000008
 8001a10:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d10f      	bne.n	8001a42 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	681a      	ldr	r2, [r3, #0]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 0210 	bic.w	r2, r2, #16
 8001a30:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2200      	movs	r2, #0
 8001a36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2201      	movs	r2, #1
 8001a3e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d003      	beq.n	8001a52 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d032      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a5e:	f003 0301 	and.w	r3, r3, #1
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d022      	beq.n	8001aac <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2205      	movs	r2, #5
 8001a6a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	681a      	ldr	r2, [r3, #0]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f022 0201 	bic.w	r2, r2, #1
 8001a7c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a7e:	68bb      	ldr	r3, [r7, #8]
 8001a80:	3301      	adds	r3, #1
 8001a82:	60bb      	str	r3, [r7, #8]
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	429a      	cmp	r2, r3
 8001a88:	d307      	bcc.n	8001a9a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 0301 	and.w	r3, r3, #1
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f2      	bne.n	8001a7e <HAL_DMA_IRQHandler+0x2ca>
 8001a98:	e000      	b.n	8001a9c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8001a9a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2201      	movs	r2, #1
 8001aa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d005      	beq.n	8001ac0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ab8:	6878      	ldr	r0, [r7, #4]
 8001aba:	4798      	blx	r3
 8001abc:	e000      	b.n	8001ac0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8001abe:	bf00      	nop
    }
  }
}
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop

08001ac8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	b2db      	uxtb	r3, r3
 8001ad6:	3b10      	subs	r3, #16
 8001ad8:	4a14      	ldr	r2, [pc, #80]	; (8001b2c <DMA_CalcBaseAndBitshift+0x64>)
 8001ada:	fba2 2303 	umull	r2, r3, r2, r3
 8001ade:	091b      	lsrs	r3, r3, #4
 8001ae0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001ae2:	4a13      	ldr	r2, [pc, #76]	; (8001b30 <DMA_CalcBaseAndBitshift+0x68>)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	4413      	add	r3, r2
 8001ae8:	781b      	ldrb	r3, [r3, #0]
 8001aea:	461a      	mov	r2, r3
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	2b03      	cmp	r3, #3
 8001af4:	d909      	bls.n	8001b0a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001afe:	f023 0303 	bic.w	r3, r3, #3
 8001b02:	1d1a      	adds	r2, r3, #4
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	659a      	str	r2, [r3, #88]	; 0x58
 8001b08:	e007      	b.n	8001b1a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001b12:	f023 0303 	bic.w	r3, r3, #3
 8001b16:	687a      	ldr	r2, [r7, #4]
 8001b18:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	aaaaaaab 	.word	0xaaaaaaab
 8001b30:	080055dc 	.word	0x080055dc

08001b34 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b085      	sub	sp, #20
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b44:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d11f      	bne.n	8001b8e <DMA_CheckFifoParam+0x5a>
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	2b03      	cmp	r3, #3
 8001b52:	d856      	bhi.n	8001c02 <DMA_CheckFifoParam+0xce>
 8001b54:	a201      	add	r2, pc, #4	; (adr r2, 8001b5c <DMA_CheckFifoParam+0x28>)
 8001b56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b5a:	bf00      	nop
 8001b5c:	08001b6d 	.word	0x08001b6d
 8001b60:	08001b7f 	.word	0x08001b7f
 8001b64:	08001b6d 	.word	0x08001b6d
 8001b68:	08001c03 	.word	0x08001c03
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b70:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d046      	beq.n	8001c06 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b78:	2301      	movs	r3, #1
 8001b7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b7c:	e043      	b.n	8001c06 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b82:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001b86:	d140      	bne.n	8001c0a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b88:	2301      	movs	r3, #1
 8001b8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b8c:	e03d      	b.n	8001c0a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	699b      	ldr	r3, [r3, #24]
 8001b92:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b96:	d121      	bne.n	8001bdc <DMA_CheckFifoParam+0xa8>
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	2b03      	cmp	r3, #3
 8001b9c:	d837      	bhi.n	8001c0e <DMA_CheckFifoParam+0xda>
 8001b9e:	a201      	add	r2, pc, #4	; (adr r2, 8001ba4 <DMA_CheckFifoParam+0x70>)
 8001ba0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba4:	08001bb5 	.word	0x08001bb5
 8001ba8:	08001bbb 	.word	0x08001bbb
 8001bac:	08001bb5 	.word	0x08001bb5
 8001bb0:	08001bcd 	.word	0x08001bcd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
 8001bb6:	73fb      	strb	r3, [r7, #15]
      break;
 8001bb8:	e030      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bbe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d025      	beq.n	8001c12 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001bca:	e022      	b.n	8001c12 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bd0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001bd4:	d11f      	bne.n	8001c16 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001bda:	e01c      	b.n	8001c16 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	2b02      	cmp	r3, #2
 8001be0:	d903      	bls.n	8001bea <DMA_CheckFifoParam+0xb6>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b03      	cmp	r3, #3
 8001be6:	d003      	beq.n	8001bf0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001be8:	e018      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001bea:	2301      	movs	r3, #1
 8001bec:	73fb      	strb	r3, [r7, #15]
      break;
 8001bee:	e015      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d00e      	beq.n	8001c1a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001bfc:	2301      	movs	r3, #1
 8001bfe:	73fb      	strb	r3, [r7, #15]
      break;
 8001c00:	e00b      	b.n	8001c1a <DMA_CheckFifoParam+0xe6>
      break;
 8001c02:	bf00      	nop
 8001c04:	e00a      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c06:	bf00      	nop
 8001c08:	e008      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c0a:	bf00      	nop
 8001c0c:	e006      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c0e:	bf00      	nop
 8001c10:	e004      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c12:	bf00      	nop
 8001c14:	e002      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;   
 8001c16:	bf00      	nop
 8001c18:	e000      	b.n	8001c1c <DMA_CheckFifoParam+0xe8>
      break;
 8001c1a:	bf00      	nop
    }
  } 
  
  return status; 
 8001c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop

08001c2c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b089      	sub	sp, #36	; 0x24
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c36:	2300      	movs	r3, #0
 8001c38:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	61fb      	str	r3, [r7, #28]
 8001c46:	e165      	b.n	8001f14 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	697a      	ldr	r2, [r7, #20]
 8001c58:	4013      	ands	r3, r2
 8001c5a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c5c:	693a      	ldr	r2, [r7, #16]
 8001c5e:	697b      	ldr	r3, [r7, #20]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	f040 8154 	bne.w	8001f0e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0303 	and.w	r3, r3, #3
 8001c6e:	2b01      	cmp	r3, #1
 8001c70:	d005      	beq.n	8001c7e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c7a:	2b02      	cmp	r3, #2
 8001c7c:	d130      	bne.n	8001ce0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	2203      	movs	r2, #3
 8001c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8e:	43db      	mvns	r3, r3
 8001c90:	69ba      	ldr	r2, [r7, #24]
 8001c92:	4013      	ands	r3, r2
 8001c94:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	68da      	ldr	r2, [r3, #12]
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca2:	69ba      	ldr	r2, [r7, #24]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	69fb      	ldr	r3, [r7, #28]
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	43db      	mvns	r3, r3
 8001cbe:	69ba      	ldr	r2, [r7, #24]
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	091b      	lsrs	r3, r3, #4
 8001cca:	f003 0201 	and.w	r2, r3, #1
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0303 	and.w	r3, r3, #3
 8001ce8:	2b03      	cmp	r3, #3
 8001cea:	d017      	beq.n	8001d1c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	68db      	ldr	r3, [r3, #12]
 8001cf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	689a      	ldr	r2, [r3, #8]
 8001d08:	69fb      	ldr	r3, [r7, #28]
 8001d0a:	005b      	lsls	r3, r3, #1
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0303 	and.w	r3, r3, #3
 8001d24:	2b02      	cmp	r3, #2
 8001d26:	d123      	bne.n	8001d70 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	08da      	lsrs	r2, r3, #3
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	3208      	adds	r2, #8
 8001d30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d34:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f003 0307 	and.w	r3, r3, #7
 8001d3c:	009b      	lsls	r3, r3, #2
 8001d3e:	220f      	movs	r2, #15
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	691a      	ldr	r2, [r3, #16]
 8001d50:	69fb      	ldr	r3, [r7, #28]
 8001d52:	f003 0307 	and.w	r3, r3, #7
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d62:	69fb      	ldr	r3, [r7, #28]
 8001d64:	08da      	lsrs	r2, r3, #3
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	3208      	adds	r2, #8
 8001d6a:	69b9      	ldr	r1, [r7, #24]
 8001d6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	005b      	lsls	r3, r3, #1
 8001d7a:	2203      	movs	r2, #3
 8001d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d80:	43db      	mvns	r3, r3
 8001d82:	69ba      	ldr	r2, [r7, #24]
 8001d84:	4013      	ands	r3, r2
 8001d86:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	685b      	ldr	r3, [r3, #4]
 8001d8c:	f003 0203 	and.w	r2, r3, #3
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	f000 80ae 	beq.w	8001f0e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001db2:	2300      	movs	r3, #0
 8001db4:	60fb      	str	r3, [r7, #12]
 8001db6:	4b5d      	ldr	r3, [pc, #372]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	4a5c      	ldr	r2, [pc, #368]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001dbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001dc0:	6453      	str	r3, [r2, #68]	; 0x44
 8001dc2:	4b5a      	ldr	r3, [pc, #360]	; (8001f2c <HAL_GPIO_Init+0x300>)
 8001dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dca:	60fb      	str	r3, [r7, #12]
 8001dcc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001dce:	4a58      	ldr	r2, [pc, #352]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001dd0:	69fb      	ldr	r3, [r7, #28]
 8001dd2:	089b      	lsrs	r3, r3, #2
 8001dd4:	3302      	adds	r3, #2
 8001dd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dda:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	f003 0303 	and.w	r3, r3, #3
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	220f      	movs	r2, #15
 8001de6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a4f      	ldr	r2, [pc, #316]	; (8001f34 <HAL_GPIO_Init+0x308>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d025      	beq.n	8001e46 <HAL_GPIO_Init+0x21a>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a4e      	ldr	r2, [pc, #312]	; (8001f38 <HAL_GPIO_Init+0x30c>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d01f      	beq.n	8001e42 <HAL_GPIO_Init+0x216>
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a4d      	ldr	r2, [pc, #308]	; (8001f3c <HAL_GPIO_Init+0x310>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d019      	beq.n	8001e3e <HAL_GPIO_Init+0x212>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a4c      	ldr	r2, [pc, #304]	; (8001f40 <HAL_GPIO_Init+0x314>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d013      	beq.n	8001e3a <HAL_GPIO_Init+0x20e>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a4b      	ldr	r2, [pc, #300]	; (8001f44 <HAL_GPIO_Init+0x318>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d00d      	beq.n	8001e36 <HAL_GPIO_Init+0x20a>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a4a      	ldr	r2, [pc, #296]	; (8001f48 <HAL_GPIO_Init+0x31c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d007      	beq.n	8001e32 <HAL_GPIO_Init+0x206>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a49      	ldr	r2, [pc, #292]	; (8001f4c <HAL_GPIO_Init+0x320>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d101      	bne.n	8001e2e <HAL_GPIO_Init+0x202>
 8001e2a:	2306      	movs	r3, #6
 8001e2c:	e00c      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e2e:	2307      	movs	r3, #7
 8001e30:	e00a      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e32:	2305      	movs	r3, #5
 8001e34:	e008      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e36:	2304      	movs	r3, #4
 8001e38:	e006      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e004      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e3e:	2302      	movs	r3, #2
 8001e40:	e002      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e42:	2301      	movs	r3, #1
 8001e44:	e000      	b.n	8001e48 <HAL_GPIO_Init+0x21c>
 8001e46:	2300      	movs	r3, #0
 8001e48:	69fa      	ldr	r2, [r7, #28]
 8001e4a:	f002 0203 	and.w	r2, r2, #3
 8001e4e:	0092      	lsls	r2, r2, #2
 8001e50:	4093      	lsls	r3, r2
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4313      	orrs	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e58:	4935      	ldr	r1, [pc, #212]	; (8001f30 <HAL_GPIO_Init+0x304>)
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	089b      	lsrs	r3, r3, #2
 8001e5e:	3302      	adds	r3, #2
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e66:	4b3a      	ldr	r3, [pc, #232]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e6c:	693b      	ldr	r3, [r7, #16]
 8001e6e:	43db      	mvns	r3, r3
 8001e70:	69ba      	ldr	r2, [r7, #24]
 8001e72:	4013      	ands	r3, r2
 8001e74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001e76:	683b      	ldr	r3, [r7, #0]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001e82:	69ba      	ldr	r2, [r7, #24]
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	4313      	orrs	r3, r2
 8001e88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e8a:	4a31      	ldr	r2, [pc, #196]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e8c:	69bb      	ldr	r3, [r7, #24]
 8001e8e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e90:	4b2f      	ldr	r3, [pc, #188]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	43db      	mvns	r3, r3
 8001e9a:	69ba      	ldr	r2, [r7, #24]
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d003      	beq.n	8001eb4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	4313      	orrs	r3, r2
 8001eb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001eb4:	4a26      	ldr	r2, [pc, #152]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001eb6:	69bb      	ldr	r3, [r7, #24]
 8001eb8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001eba:	4b25      	ldr	r3, [pc, #148]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001ebc:	689b      	ldr	r3, [r3, #8]
 8001ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	43db      	mvns	r3, r3
 8001ec4:	69ba      	ldr	r2, [r7, #24]
 8001ec6:	4013      	ands	r3, r2
 8001ec8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ed6:	69ba      	ldr	r2, [r7, #24]
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	4313      	orrs	r3, r2
 8001edc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001ede:	4a1c      	ldr	r2, [pc, #112]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ee4:	4b1a      	ldr	r3, [pc, #104]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001ee6:	68db      	ldr	r3, [r3, #12]
 8001ee8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	43db      	mvns	r3, r3
 8001eee:	69ba      	ldr	r2, [r7, #24]
 8001ef0:	4013      	ands	r3, r2
 8001ef2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d003      	beq.n	8001f08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001f00:	69ba      	ldr	r2, [r7, #24]
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	4313      	orrs	r3, r2
 8001f06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f08:	4a11      	ldr	r2, [pc, #68]	; (8001f50 <HAL_GPIO_Init+0x324>)
 8001f0a:	69bb      	ldr	r3, [r7, #24]
 8001f0c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f0e:	69fb      	ldr	r3, [r7, #28]
 8001f10:	3301      	adds	r3, #1
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	69fb      	ldr	r3, [r7, #28]
 8001f16:	2b0f      	cmp	r3, #15
 8001f18:	f67f ae96 	bls.w	8001c48 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001f1c:	bf00      	nop
 8001f1e:	bf00      	nop
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40013800 	.word	0x40013800
 8001f34:	40020000 	.word	0x40020000
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40020800 	.word	0x40020800
 8001f40:	40020c00 	.word	0x40020c00
 8001f44:	40021000 	.word	0x40021000
 8001f48:	40021400 	.word	0x40021400
 8001f4c:	40021800 	.word	0x40021800
 8001f50:	40013c00 	.word	0x40013c00

08001f54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b083      	sub	sp, #12
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	807b      	strh	r3, [r7, #2]
 8001f60:	4613      	mov	r3, r2
 8001f62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f64:	787b      	ldrb	r3, [r7, #1]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d003      	beq.n	8001f72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f6a:	887a      	ldrh	r2, [r7, #2]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f70:	e003      	b.n	8001f7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f72:	887b      	ldrh	r3, [r7, #2]
 8001f74:	041a      	lsls	r2, r3, #16
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	619a      	str	r2, [r3, #24]
}
 8001f7a:	bf00      	nop
 8001f7c:	370c      	adds	r7, #12
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f84:	4770      	bx	lr
	...

08001f88 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d101      	bne.n	8001f9c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e0cc      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f9c:	4b68      	ldr	r3, [pc, #416]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 030f 	and.w	r3, r3, #15
 8001fa4:	683a      	ldr	r2, [r7, #0]
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d90c      	bls.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001faa:	4b65      	ldr	r3, [pc, #404]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001fac:	683a      	ldr	r2, [r7, #0]
 8001fae:	b2d2      	uxtb	r2, r2
 8001fb0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b63      	ldr	r3, [pc, #396]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e0b8      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0302 	and.w	r3, r3, #2
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d020      	beq.n	8002012 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0304 	and.w	r3, r3, #4
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d005      	beq.n	8001fe8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001fdc:	4b59      	ldr	r3, [pc, #356]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	4a58      	ldr	r2, [pc, #352]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001fe2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001fe6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f003 0308 	and.w	r3, r3, #8
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d005      	beq.n	8002000 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001ff4:	4b53      	ldr	r3, [pc, #332]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	4a52      	ldr	r2, [pc, #328]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8001ffa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001ffe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002000:	4b50      	ldr	r3, [pc, #320]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	494d      	ldr	r1, [pc, #308]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 800200e:	4313      	orrs	r3, r2
 8002010:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f003 0301 	and.w	r3, r3, #1
 800201a:	2b00      	cmp	r3, #0
 800201c:	d044      	beq.n	80020a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d107      	bne.n	8002036 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002026:	4b47      	ldr	r3, [pc, #284]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202e:	2b00      	cmp	r3, #0
 8002030:	d119      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e07f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	2b02      	cmp	r3, #2
 800203c:	d003      	beq.n	8002046 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002042:	2b03      	cmp	r3, #3
 8002044:	d107      	bne.n	8002056 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002046:	4b3f      	ldr	r3, [pc, #252]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800204e:	2b00      	cmp	r3, #0
 8002050:	d109      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e06f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002056:	4b3b      	ldr	r3, [pc, #236]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f003 0302 	and.w	r3, r3, #2
 800205e:	2b00      	cmp	r3, #0
 8002060:	d101      	bne.n	8002066 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002062:	2301      	movs	r3, #1
 8002064:	e067      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002066:	4b37      	ldr	r3, [pc, #220]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	f023 0203 	bic.w	r2, r3, #3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	4934      	ldr	r1, [pc, #208]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002074:	4313      	orrs	r3, r2
 8002076:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002078:	f7ff f93e 	bl	80012f8 <HAL_GetTick>
 800207c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	e00a      	b.n	8002096 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002080:	f7ff f93a 	bl	80012f8 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	f241 3288 	movw	r2, #5000	; 0x1388
 800208e:	4293      	cmp	r3, r2
 8002090:	d901      	bls.n	8002096 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002092:	2303      	movs	r3, #3
 8002094:	e04f      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002096:	4b2b      	ldr	r3, [pc, #172]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002098:	689b      	ldr	r3, [r3, #8]
 800209a:	f003 020c 	and.w	r2, r3, #12
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d1eb      	bne.n	8002080 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	f003 030f 	and.w	r3, r3, #15
 80020b0:	683a      	ldr	r2, [r7, #0]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d20c      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020b6:	4b22      	ldr	r3, [pc, #136]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	b2d2      	uxtb	r2, r2
 80020bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020be:	4b20      	ldr	r3, [pc, #128]	; (8002140 <HAL_RCC_ClockConfig+0x1b8>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 030f 	and.w	r3, r3, #15
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d001      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e032      	b.n	8002136 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 0304 	and.w	r3, r3, #4
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d008      	beq.n	80020ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020dc:	4b19      	ldr	r3, [pc, #100]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	4916      	ldr	r1, [pc, #88]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020ea:	4313      	orrs	r3, r2
 80020ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0308 	and.w	r3, r3, #8
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d009      	beq.n	800210e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020fa:	4b12      	ldr	r3, [pc, #72]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	691b      	ldr	r3, [r3, #16]
 8002106:	00db      	lsls	r3, r3, #3
 8002108:	490e      	ldr	r1, [pc, #56]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 800210a:	4313      	orrs	r3, r2
 800210c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800210e:	f000 f855 	bl	80021bc <HAL_RCC_GetSysClockFreq>
 8002112:	4602      	mov	r2, r0
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <HAL_RCC_ClockConfig+0x1bc>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	091b      	lsrs	r3, r3, #4
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	490a      	ldr	r1, [pc, #40]	; (8002148 <HAL_RCC_ClockConfig+0x1c0>)
 8002120:	5ccb      	ldrb	r3, [r1, r3]
 8002122:	fa22 f303 	lsr.w	r3, r2, r3
 8002126:	4a09      	ldr	r2, [pc, #36]	; (800214c <HAL_RCC_ClockConfig+0x1c4>)
 8002128:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800212a:	4b09      	ldr	r3, [pc, #36]	; (8002150 <HAL_RCC_ClockConfig+0x1c8>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f89e 	bl	8001270 <HAL_InitTick>

  return HAL_OK;
 8002134:	2300      	movs	r3, #0
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	40023c00 	.word	0x40023c00
 8002144:	40023800 	.word	0x40023800
 8002148:	080055c4 	.word	0x080055c4
 800214c:	20000008 	.word	0x20000008
 8002150:	2000000c 	.word	0x2000000c

08002154 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002158:	4b03      	ldr	r3, [pc, #12]	; (8002168 <HAL_RCC_GetHCLKFreq+0x14>)
 800215a:	681b      	ldr	r3, [r3, #0]
}
 800215c:	4618      	mov	r0, r3
 800215e:	46bd      	mov	sp, r7
 8002160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002164:	4770      	bx	lr
 8002166:	bf00      	nop
 8002168:	20000008 	.word	0x20000008

0800216c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002170:	f7ff fff0 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 8002174:	4602      	mov	r2, r0
 8002176:	4b05      	ldr	r3, [pc, #20]	; (800218c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002178:	689b      	ldr	r3, [r3, #8]
 800217a:	0a9b      	lsrs	r3, r3, #10
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	4903      	ldr	r1, [pc, #12]	; (8002190 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002182:	5ccb      	ldrb	r3, [r1, r3]
 8002184:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002188:	4618      	mov	r0, r3
 800218a:	bd80      	pop	{r7, pc}
 800218c:	40023800 	.word	0x40023800
 8002190:	080055d4 	.word	0x080055d4

08002194 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002198:	f7ff ffdc 	bl	8002154 <HAL_RCC_GetHCLKFreq>
 800219c:	4602      	mov	r2, r0
 800219e:	4b05      	ldr	r3, [pc, #20]	; (80021b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80021a0:	689b      	ldr	r3, [r3, #8]
 80021a2:	0b5b      	lsrs	r3, r3, #13
 80021a4:	f003 0307 	and.w	r3, r3, #7
 80021a8:	4903      	ldr	r1, [pc, #12]	; (80021b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021aa:	5ccb      	ldrb	r3, [r1, r3]
 80021ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	bd80      	pop	{r7, pc}
 80021b4:	40023800 	.word	0x40023800
 80021b8:	080055d4 	.word	0x080055d4

080021bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80021c0:	b088      	sub	sp, #32
 80021c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80021c4:	2300      	movs	r3, #0
 80021c6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80021c8:	2300      	movs	r3, #0
 80021ca:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80021cc:	2300      	movs	r3, #0
 80021ce:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80021d0:	2300      	movs	r3, #0
 80021d2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021d8:	4bce      	ldr	r3, [pc, #824]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f003 030c 	and.w	r3, r3, #12
 80021e0:	2b0c      	cmp	r3, #12
 80021e2:	f200 818d 	bhi.w	8002500 <HAL_RCC_GetSysClockFreq+0x344>
 80021e6:	a201      	add	r2, pc, #4	; (adr r2, 80021ec <HAL_RCC_GetSysClockFreq+0x30>)
 80021e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021ec:	08002221 	.word	0x08002221
 80021f0:	08002501 	.word	0x08002501
 80021f4:	08002501 	.word	0x08002501
 80021f8:	08002501 	.word	0x08002501
 80021fc:	08002227 	.word	0x08002227
 8002200:	08002501 	.word	0x08002501
 8002204:	08002501 	.word	0x08002501
 8002208:	08002501 	.word	0x08002501
 800220c:	0800222d 	.word	0x0800222d
 8002210:	08002501 	.word	0x08002501
 8002214:	08002501 	.word	0x08002501
 8002218:	08002501 	.word	0x08002501
 800221c:	080023a1 	.word	0x080023a1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002220:	4bbd      	ldr	r3, [pc, #756]	; (8002518 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002222:	61bb      	str	r3, [r7, #24]
       break;
 8002224:	e16f      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002226:	4bbd      	ldr	r3, [pc, #756]	; (800251c <HAL_RCC_GetSysClockFreq+0x360>)
 8002228:	61bb      	str	r3, [r7, #24]
      break;
 800222a:	e16c      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800222c:	4bb9      	ldr	r3, [pc, #740]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002234:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002236:	4bb7      	ldr	r3, [pc, #732]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800223e:	2b00      	cmp	r3, #0
 8002240:	d053      	beq.n	80022ea <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002242:	4bb4      	ldr	r3, [pc, #720]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 8002244:	685b      	ldr	r3, [r3, #4]
 8002246:	099b      	lsrs	r3, r3, #6
 8002248:	461a      	mov	r2, r3
 800224a:	f04f 0300 	mov.w	r3, #0
 800224e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002252:	f04f 0100 	mov.w	r1, #0
 8002256:	ea02 0400 	and.w	r4, r2, r0
 800225a:	603c      	str	r4, [r7, #0]
 800225c:	400b      	ands	r3, r1
 800225e:	607b      	str	r3, [r7, #4]
 8002260:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002264:	4620      	mov	r0, r4
 8002266:	4629      	mov	r1, r5
 8002268:	f04f 0200 	mov.w	r2, #0
 800226c:	f04f 0300 	mov.w	r3, #0
 8002270:	014b      	lsls	r3, r1, #5
 8002272:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002276:	0142      	lsls	r2, r0, #5
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	4623      	mov	r3, r4
 800227e:	1ac0      	subs	r0, r0, r3
 8002280:	462b      	mov	r3, r5
 8002282:	eb61 0103 	sbc.w	r1, r1, r3
 8002286:	f04f 0200 	mov.w	r2, #0
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	018b      	lsls	r3, r1, #6
 8002290:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002294:	0182      	lsls	r2, r0, #6
 8002296:	1a12      	subs	r2, r2, r0
 8002298:	eb63 0301 	sbc.w	r3, r3, r1
 800229c:	f04f 0000 	mov.w	r0, #0
 80022a0:	f04f 0100 	mov.w	r1, #0
 80022a4:	00d9      	lsls	r1, r3, #3
 80022a6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80022aa:	00d0      	lsls	r0, r2, #3
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	4621      	mov	r1, r4
 80022b2:	1852      	adds	r2, r2, r1
 80022b4:	4629      	mov	r1, r5
 80022b6:	eb43 0101 	adc.w	r1, r3, r1
 80022ba:	460b      	mov	r3, r1
 80022bc:	f04f 0000 	mov.w	r0, #0
 80022c0:	f04f 0100 	mov.w	r1, #0
 80022c4:	0259      	lsls	r1, r3, #9
 80022c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80022ca:	0250      	lsls	r0, r2, #9
 80022cc:	4602      	mov	r2, r0
 80022ce:	460b      	mov	r3, r1
 80022d0:	4610      	mov	r0, r2
 80022d2:	4619      	mov	r1, r3
 80022d4:	697b      	ldr	r3, [r7, #20]
 80022d6:	461a      	mov	r2, r3
 80022d8:	f04f 0300 	mov.w	r3, #0
 80022dc:	f7fd fff0 	bl	80002c0 <__aeabi_uldivmod>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4613      	mov	r3, r2
 80022e6:	61fb      	str	r3, [r7, #28]
 80022e8:	e04c      	b.n	8002384 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80022ea:	4b8a      	ldr	r3, [pc, #552]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	099b      	lsrs	r3, r3, #6
 80022f0:	461a      	mov	r2, r3
 80022f2:	f04f 0300 	mov.w	r3, #0
 80022f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80022fa:	f04f 0100 	mov.w	r1, #0
 80022fe:	ea02 0a00 	and.w	sl, r2, r0
 8002302:	ea03 0b01 	and.w	fp, r3, r1
 8002306:	4650      	mov	r0, sl
 8002308:	4659      	mov	r1, fp
 800230a:	f04f 0200 	mov.w	r2, #0
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	014b      	lsls	r3, r1, #5
 8002314:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002318:	0142      	lsls	r2, r0, #5
 800231a:	4610      	mov	r0, r2
 800231c:	4619      	mov	r1, r3
 800231e:	ebb0 000a 	subs.w	r0, r0, sl
 8002322:	eb61 010b 	sbc.w	r1, r1, fp
 8002326:	f04f 0200 	mov.w	r2, #0
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	018b      	lsls	r3, r1, #6
 8002330:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002334:	0182      	lsls	r2, r0, #6
 8002336:	1a12      	subs	r2, r2, r0
 8002338:	eb63 0301 	sbc.w	r3, r3, r1
 800233c:	f04f 0000 	mov.w	r0, #0
 8002340:	f04f 0100 	mov.w	r1, #0
 8002344:	00d9      	lsls	r1, r3, #3
 8002346:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800234a:	00d0      	lsls	r0, r2, #3
 800234c:	4602      	mov	r2, r0
 800234e:	460b      	mov	r3, r1
 8002350:	eb12 020a 	adds.w	r2, r2, sl
 8002354:	eb43 030b 	adc.w	r3, r3, fp
 8002358:	f04f 0000 	mov.w	r0, #0
 800235c:	f04f 0100 	mov.w	r1, #0
 8002360:	0299      	lsls	r1, r3, #10
 8002362:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002366:	0290      	lsls	r0, r2, #10
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4610      	mov	r0, r2
 800236e:	4619      	mov	r1, r3
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	461a      	mov	r2, r3
 8002374:	f04f 0300 	mov.w	r3, #0
 8002378:	f7fd ffa2 	bl	80002c0 <__aeabi_uldivmod>
 800237c:	4602      	mov	r2, r0
 800237e:	460b      	mov	r3, r1
 8002380:	4613      	mov	r3, r2
 8002382:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002384:	4b63      	ldr	r3, [pc, #396]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 8002386:	685b      	ldr	r3, [r3, #4]
 8002388:	0c1b      	lsrs	r3, r3, #16
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	3301      	adds	r3, #1
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 8002394:	69fa      	ldr	r2, [r7, #28]
 8002396:	693b      	ldr	r3, [r7, #16]
 8002398:	fbb2 f3f3 	udiv	r3, r2, r3
 800239c:	61bb      	str	r3, [r7, #24]
      break;
 800239e:	e0b2      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80023a0:	4b5c      	ldr	r3, [pc, #368]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80023a8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80023aa:	4b5a      	ldr	r3, [pc, #360]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d04d      	beq.n	8002452 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023b6:	4b57      	ldr	r3, [pc, #348]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	461a      	mov	r2, r3
 80023be:	f04f 0300 	mov.w	r3, #0
 80023c2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80023c6:	f04f 0100 	mov.w	r1, #0
 80023ca:	ea02 0800 	and.w	r8, r2, r0
 80023ce:	ea03 0901 	and.w	r9, r3, r1
 80023d2:	4640      	mov	r0, r8
 80023d4:	4649      	mov	r1, r9
 80023d6:	f04f 0200 	mov.w	r2, #0
 80023da:	f04f 0300 	mov.w	r3, #0
 80023de:	014b      	lsls	r3, r1, #5
 80023e0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80023e4:	0142      	lsls	r2, r0, #5
 80023e6:	4610      	mov	r0, r2
 80023e8:	4619      	mov	r1, r3
 80023ea:	ebb0 0008 	subs.w	r0, r0, r8
 80023ee:	eb61 0109 	sbc.w	r1, r1, r9
 80023f2:	f04f 0200 	mov.w	r2, #0
 80023f6:	f04f 0300 	mov.w	r3, #0
 80023fa:	018b      	lsls	r3, r1, #6
 80023fc:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002400:	0182      	lsls	r2, r0, #6
 8002402:	1a12      	subs	r2, r2, r0
 8002404:	eb63 0301 	sbc.w	r3, r3, r1
 8002408:	f04f 0000 	mov.w	r0, #0
 800240c:	f04f 0100 	mov.w	r1, #0
 8002410:	00d9      	lsls	r1, r3, #3
 8002412:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002416:	00d0      	lsls	r0, r2, #3
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	eb12 0208 	adds.w	r2, r2, r8
 8002420:	eb43 0309 	adc.w	r3, r3, r9
 8002424:	f04f 0000 	mov.w	r0, #0
 8002428:	f04f 0100 	mov.w	r1, #0
 800242c:	0259      	lsls	r1, r3, #9
 800242e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8002432:	0250      	lsls	r0, r2, #9
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4610      	mov	r0, r2
 800243a:	4619      	mov	r1, r3
 800243c:	697b      	ldr	r3, [r7, #20]
 800243e:	461a      	mov	r2, r3
 8002440:	f04f 0300 	mov.w	r3, #0
 8002444:	f7fd ff3c 	bl	80002c0 <__aeabi_uldivmod>
 8002448:	4602      	mov	r2, r0
 800244a:	460b      	mov	r3, r1
 800244c:	4613      	mov	r3, r2
 800244e:	61fb      	str	r3, [r7, #28]
 8002450:	e04a      	b.n	80024e8 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002452:	4b30      	ldr	r3, [pc, #192]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	099b      	lsrs	r3, r3, #6
 8002458:	461a      	mov	r2, r3
 800245a:	f04f 0300 	mov.w	r3, #0
 800245e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002462:	f04f 0100 	mov.w	r1, #0
 8002466:	ea02 0400 	and.w	r4, r2, r0
 800246a:	ea03 0501 	and.w	r5, r3, r1
 800246e:	4620      	mov	r0, r4
 8002470:	4629      	mov	r1, r5
 8002472:	f04f 0200 	mov.w	r2, #0
 8002476:	f04f 0300 	mov.w	r3, #0
 800247a:	014b      	lsls	r3, r1, #5
 800247c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002480:	0142      	lsls	r2, r0, #5
 8002482:	4610      	mov	r0, r2
 8002484:	4619      	mov	r1, r3
 8002486:	1b00      	subs	r0, r0, r4
 8002488:	eb61 0105 	sbc.w	r1, r1, r5
 800248c:	f04f 0200 	mov.w	r2, #0
 8002490:	f04f 0300 	mov.w	r3, #0
 8002494:	018b      	lsls	r3, r1, #6
 8002496:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800249a:	0182      	lsls	r2, r0, #6
 800249c:	1a12      	subs	r2, r2, r0
 800249e:	eb63 0301 	sbc.w	r3, r3, r1
 80024a2:	f04f 0000 	mov.w	r0, #0
 80024a6:	f04f 0100 	mov.w	r1, #0
 80024aa:	00d9      	lsls	r1, r3, #3
 80024ac:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024b0:	00d0      	lsls	r0, r2, #3
 80024b2:	4602      	mov	r2, r0
 80024b4:	460b      	mov	r3, r1
 80024b6:	1912      	adds	r2, r2, r4
 80024b8:	eb45 0303 	adc.w	r3, r5, r3
 80024bc:	f04f 0000 	mov.w	r0, #0
 80024c0:	f04f 0100 	mov.w	r1, #0
 80024c4:	0299      	lsls	r1, r3, #10
 80024c6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80024ca:	0290      	lsls	r0, r2, #10
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4610      	mov	r0, r2
 80024d2:	4619      	mov	r1, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	461a      	mov	r2, r3
 80024d8:	f04f 0300 	mov.w	r3, #0
 80024dc:	f7fd fef0 	bl	80002c0 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4613      	mov	r3, r2
 80024e6:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80024e8:	4b0a      	ldr	r3, [pc, #40]	; (8002514 <HAL_RCC_GetSysClockFreq+0x358>)
 80024ea:	685b      	ldr	r3, [r3, #4]
 80024ec:	0f1b      	lsrs	r3, r3, #28
 80024ee:	f003 0307 	and.w	r3, r3, #7
 80024f2:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 80024f4:	69fa      	ldr	r2, [r7, #28]
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80024fc:	61bb      	str	r3, [r7, #24]
      break;
 80024fe:	e002      	b.n	8002506 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002500:	4b05      	ldr	r3, [pc, #20]	; (8002518 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002502:	61bb      	str	r3, [r7, #24]
      break;
 8002504:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002506:	69bb      	ldr	r3, [r7, #24]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3720      	adds	r7, #32
 800250c:	46bd      	mov	sp, r7
 800250e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002512:	bf00      	nop
 8002514:	40023800 	.word	0x40023800
 8002518:	00f42400 	.word	0x00f42400
 800251c:	007a1200 	.word	0x007a1200

08002520 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b086      	sub	sp, #24
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800252e:	2301      	movs	r3, #1
 8002530:	e28d      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0301 	and.w	r3, r3, #1
 800253a:	2b00      	cmp	r3, #0
 800253c:	f000 8083 	beq.w	8002646 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002540:	4b94      	ldr	r3, [pc, #592]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f003 030c 	and.w	r3, r3, #12
 8002548:	2b04      	cmp	r3, #4
 800254a:	d019      	beq.n	8002580 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800254c:	4b91      	ldr	r3, [pc, #580]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002554:	2b08      	cmp	r3, #8
 8002556:	d106      	bne.n	8002566 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002558:	4b8e      	ldr	r3, [pc, #568]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002560:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002564:	d00c      	beq.n	8002580 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002566:	4b8b      	ldr	r3, [pc, #556]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d112      	bne.n	8002598 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002572:	4b88      	ldr	r3, [pc, #544]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800257a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800257e:	d10b      	bne.n	8002598 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002580:	4b84      	ldr	r3, [pc, #528]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d05b      	beq.n	8002644 <HAL_RCC_OscConfig+0x124>
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	2b00      	cmp	r3, #0
 8002592:	d157      	bne.n	8002644 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e25a      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025a0:	d106      	bne.n	80025b0 <HAL_RCC_OscConfig+0x90>
 80025a2:	4b7c      	ldr	r3, [pc, #496]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7b      	ldr	r2, [pc, #492]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025ac:	6013      	str	r3, [r2, #0]
 80025ae:	e01d      	b.n	80025ec <HAL_RCC_OscConfig+0xcc>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80025b8:	d10c      	bne.n	80025d4 <HAL_RCC_OscConfig+0xb4>
 80025ba:	4b76      	ldr	r3, [pc, #472]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a75      	ldr	r2, [pc, #468]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80025c4:	6013      	str	r3, [r2, #0]
 80025c6:	4b73      	ldr	r3, [pc, #460]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	4a72      	ldr	r2, [pc, #456]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80025d0:	6013      	str	r3, [r2, #0]
 80025d2:	e00b      	b.n	80025ec <HAL_RCC_OscConfig+0xcc>
 80025d4:	4b6f      	ldr	r3, [pc, #444]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	4a6e      	ldr	r2, [pc, #440]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025de:	6013      	str	r3, [r2, #0]
 80025e0:	4b6c      	ldr	r3, [pc, #432]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a6b      	ldr	r2, [pc, #428]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80025e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80025ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d013      	beq.n	800261c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025f4:	f7fe fe80 	bl	80012f8 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80025fc:	f7fe fe7c 	bl	80012f8 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b64      	cmp	r3, #100	; 0x64
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e21f      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800260e:	4b61      	ldr	r3, [pc, #388]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0xdc>
 800261a:	e014      	b.n	8002646 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800261c:	f7fe fe6c 	bl	80012f8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002624:	f7fe fe68 	bl	80012f8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b64      	cmp	r3, #100	; 0x64
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e20b      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002636:	4b57      	ldr	r3, [pc, #348]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x104>
 8002642:	e000      	b.n	8002646 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002644:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0302 	and.w	r3, r3, #2
 800264e:	2b00      	cmp	r3, #0
 8002650:	d06f      	beq.n	8002732 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002652:	4b50      	ldr	r3, [pc, #320]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	f003 030c 	and.w	r3, r3, #12
 800265a:	2b00      	cmp	r3, #0
 800265c:	d017      	beq.n	800268e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800265e:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002660:	689b      	ldr	r3, [r3, #8]
 8002662:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002666:	2b08      	cmp	r3, #8
 8002668:	d105      	bne.n	8002676 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800266a:	4b4a      	ldr	r3, [pc, #296]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00b      	beq.n	800268e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002676:	4b47      	ldr	r3, [pc, #284]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800267e:	2b0c      	cmp	r3, #12
 8002680:	d11c      	bne.n	80026bc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002682:	4b44      	ldr	r3, [pc, #272]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800268a:	2b00      	cmp	r3, #0
 800268c:	d116      	bne.n	80026bc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800268e:	4b41      	ldr	r3, [pc, #260]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0302 	and.w	r3, r3, #2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d005      	beq.n	80026a6 <HAL_RCC_OscConfig+0x186>
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d001      	beq.n	80026a6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	e1d3      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026a6:	4b3b      	ldr	r3, [pc, #236]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	691b      	ldr	r3, [r3, #16]
 80026b2:	00db      	lsls	r3, r3, #3
 80026b4:	4937      	ldr	r1, [pc, #220]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80026b6:	4313      	orrs	r3, r2
 80026b8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ba:	e03a      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d020      	beq.n	8002706 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026c4:	4b34      	ldr	r3, [pc, #208]	; (8002798 <HAL_RCC_OscConfig+0x278>)
 80026c6:	2201      	movs	r2, #1
 80026c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ca:	f7fe fe15 	bl	80012f8 <HAL_GetTick>
 80026ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026d0:	e008      	b.n	80026e4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80026d2:	f7fe fe11 	bl	80012f8 <HAL_GetTick>
 80026d6:	4602      	mov	r2, r0
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	1ad3      	subs	r3, r2, r3
 80026dc:	2b02      	cmp	r3, #2
 80026de:	d901      	bls.n	80026e4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80026e0:	2303      	movs	r3, #3
 80026e2:	e1b4      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80026e4:	4b2b      	ldr	r3, [pc, #172]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d0f0      	beq.n	80026d2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026f0:	4b28      	ldr	r3, [pc, #160]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	00db      	lsls	r3, r3, #3
 80026fe:	4925      	ldr	r1, [pc, #148]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002700:	4313      	orrs	r3, r2
 8002702:	600b      	str	r3, [r1, #0]
 8002704:	e015      	b.n	8002732 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002706:	4b24      	ldr	r3, [pc, #144]	; (8002798 <HAL_RCC_OscConfig+0x278>)
 8002708:	2200      	movs	r2, #0
 800270a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800270c:	f7fe fdf4 	bl	80012f8 <HAL_GetTick>
 8002710:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002712:	e008      	b.n	8002726 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002714:	f7fe fdf0 	bl	80012f8 <HAL_GetTick>
 8002718:	4602      	mov	r2, r0
 800271a:	693b      	ldr	r3, [r7, #16]
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d901      	bls.n	8002726 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	e193      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002726:	4b1b      	ldr	r3, [pc, #108]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	f003 0302 	and.w	r3, r3, #2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d1f0      	bne.n	8002714 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f003 0308 	and.w	r3, r3, #8
 800273a:	2b00      	cmp	r3, #0
 800273c:	d036      	beq.n	80027ac <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	695b      	ldr	r3, [r3, #20]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d016      	beq.n	8002774 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002746:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_RCC_OscConfig+0x27c>)
 8002748:	2201      	movs	r2, #1
 800274a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800274c:	f7fe fdd4 	bl	80012f8 <HAL_GetTick>
 8002750:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002752:	e008      	b.n	8002766 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002754:	f7fe fdd0 	bl	80012f8 <HAL_GetTick>
 8002758:	4602      	mov	r2, r0
 800275a:	693b      	ldr	r3, [r7, #16]
 800275c:	1ad3      	subs	r3, r2, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d901      	bls.n	8002766 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002762:	2303      	movs	r3, #3
 8002764:	e173      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002766:	4b0b      	ldr	r3, [pc, #44]	; (8002794 <HAL_RCC_OscConfig+0x274>)
 8002768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800276a:	f003 0302 	and.w	r3, r3, #2
 800276e:	2b00      	cmp	r3, #0
 8002770:	d0f0      	beq.n	8002754 <HAL_RCC_OscConfig+0x234>
 8002772:	e01b      	b.n	80027ac <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002774:	4b09      	ldr	r3, [pc, #36]	; (800279c <HAL_RCC_OscConfig+0x27c>)
 8002776:	2200      	movs	r2, #0
 8002778:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800277a:	f7fe fdbd 	bl	80012f8 <HAL_GetTick>
 800277e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002780:	e00e      	b.n	80027a0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002782:	f7fe fdb9 	bl	80012f8 <HAL_GetTick>
 8002786:	4602      	mov	r2, r0
 8002788:	693b      	ldr	r3, [r7, #16]
 800278a:	1ad3      	subs	r3, r2, r3
 800278c:	2b02      	cmp	r3, #2
 800278e:	d907      	bls.n	80027a0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002790:	2303      	movs	r3, #3
 8002792:	e15c      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
 8002794:	40023800 	.word	0x40023800
 8002798:	42470000 	.word	0x42470000
 800279c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027a0:	4b8a      	ldr	r3, [pc, #552]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027a4:	f003 0302 	and.w	r3, r3, #2
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d1ea      	bne.n	8002782 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	f003 0304 	and.w	r3, r3, #4
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	f000 8097 	beq.w	80028e8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027ba:	2300      	movs	r3, #0
 80027bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80027be:	4b83      	ldr	r3, [pc, #524]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d10f      	bne.n	80027ea <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	60bb      	str	r3, [r7, #8]
 80027ce:	4b7f      	ldr	r3, [pc, #508]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	4a7e      	ldr	r2, [pc, #504]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80027d8:	6413      	str	r3, [r2, #64]	; 0x40
 80027da:	4b7c      	ldr	r3, [pc, #496]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027e2:	60bb      	str	r3, [r7, #8]
 80027e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80027e6:	2301      	movs	r3, #1
 80027e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ea:	4b79      	ldr	r3, [pc, #484]	; (80029d0 <HAL_RCC_OscConfig+0x4b0>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d118      	bne.n	8002828 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80027f6:	4b76      	ldr	r3, [pc, #472]	; (80029d0 <HAL_RCC_OscConfig+0x4b0>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a75      	ldr	r2, [pc, #468]	; (80029d0 <HAL_RCC_OscConfig+0x4b0>)
 80027fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002802:	f7fe fd79 	bl	80012f8 <HAL_GetTick>
 8002806:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800280a:	f7fe fd75 	bl	80012f8 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e118      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800281c:	4b6c      	ldr	r3, [pc, #432]	; (80029d0 <HAL_RCC_OscConfig+0x4b0>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002824:	2b00      	cmp	r3, #0
 8002826:	d0f0      	beq.n	800280a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	689b      	ldr	r3, [r3, #8]
 800282c:	2b01      	cmp	r3, #1
 800282e:	d106      	bne.n	800283e <HAL_RCC_OscConfig+0x31e>
 8002830:	4b66      	ldr	r3, [pc, #408]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002834:	4a65      	ldr	r2, [pc, #404]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002836:	f043 0301 	orr.w	r3, r3, #1
 800283a:	6713      	str	r3, [r2, #112]	; 0x70
 800283c:	e01c      	b.n	8002878 <HAL_RCC_OscConfig+0x358>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	689b      	ldr	r3, [r3, #8]
 8002842:	2b05      	cmp	r3, #5
 8002844:	d10c      	bne.n	8002860 <HAL_RCC_OscConfig+0x340>
 8002846:	4b61      	ldr	r3, [pc, #388]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800284a:	4a60      	ldr	r2, [pc, #384]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6713      	str	r3, [r2, #112]	; 0x70
 8002852:	4b5e      	ldr	r3, [pc, #376]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002854:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002856:	4a5d      	ldr	r2, [pc, #372]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002858:	f043 0301 	orr.w	r3, r3, #1
 800285c:	6713      	str	r3, [r2, #112]	; 0x70
 800285e:	e00b      	b.n	8002878 <HAL_RCC_OscConfig+0x358>
 8002860:	4b5a      	ldr	r3, [pc, #360]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002862:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002864:	4a59      	ldr	r2, [pc, #356]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002866:	f023 0301 	bic.w	r3, r3, #1
 800286a:	6713      	str	r3, [r2, #112]	; 0x70
 800286c:	4b57      	ldr	r3, [pc, #348]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 800286e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002870:	4a56      	ldr	r2, [pc, #344]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002872:	f023 0304 	bic.w	r3, r3, #4
 8002876:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	2b00      	cmp	r3, #0
 800287e:	d015      	beq.n	80028ac <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002880:	f7fe fd3a 	bl	80012f8 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	e00a      	b.n	800289e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002888:	f7fe fd36 	bl	80012f8 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	f241 3288 	movw	r2, #5000	; 0x1388
 8002896:	4293      	cmp	r3, r2
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e0d7      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800289e:	4b4b      	ldr	r3, [pc, #300]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028a2:	f003 0302 	and.w	r3, r3, #2
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0ee      	beq.n	8002888 <HAL_RCC_OscConfig+0x368>
 80028aa:	e014      	b.n	80028d6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028ac:	f7fe fd24 	bl	80012f8 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028b2:	e00a      	b.n	80028ca <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80028b4:	f7fe fd20 	bl	80012f8 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	f241 3288 	movw	r2, #5000	; 0x1388
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e0c1      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ca:	4b40      	ldr	r3, [pc, #256]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1ee      	bne.n	80028b4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80028d6:	7dfb      	ldrb	r3, [r7, #23]
 80028d8:	2b01      	cmp	r3, #1
 80028da:	d105      	bne.n	80028e8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80028dc:	4b3b      	ldr	r3, [pc, #236]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028e0:	4a3a      	ldr	r2, [pc, #232]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80028e6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	699b      	ldr	r3, [r3, #24]
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	f000 80ad 	beq.w	8002a4c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80028f2:	4b36      	ldr	r3, [pc, #216]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 030c 	and.w	r3, r3, #12
 80028fa:	2b08      	cmp	r3, #8
 80028fc:	d060      	beq.n	80029c0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	699b      	ldr	r3, [r3, #24]
 8002902:	2b02      	cmp	r3, #2
 8002904:	d145      	bne.n	8002992 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002906:	4b33      	ldr	r3, [pc, #204]	; (80029d4 <HAL_RCC_OscConfig+0x4b4>)
 8002908:	2200      	movs	r2, #0
 800290a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800290c:	f7fe fcf4 	bl	80012f8 <HAL_GetTick>
 8002910:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002914:	f7fe fcf0 	bl	80012f8 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	693b      	ldr	r3, [r7, #16]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e093      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002926:	4b29      	ldr	r3, [pc, #164]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1f0      	bne.n	8002914 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	69da      	ldr	r2, [r3, #28]
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6a1b      	ldr	r3, [r3, #32]
 800293a:	431a      	orrs	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002940:	019b      	lsls	r3, r3, #6
 8002942:	431a      	orrs	r2, r3
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002948:	085b      	lsrs	r3, r3, #1
 800294a:	3b01      	subs	r3, #1
 800294c:	041b      	lsls	r3, r3, #16
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002954:	061b      	lsls	r3, r3, #24
 8002956:	431a      	orrs	r2, r3
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	071b      	lsls	r3, r3, #28
 800295e:	491b      	ldr	r1, [pc, #108]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002960:	4313      	orrs	r3, r2
 8002962:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002964:	4b1b      	ldr	r3, [pc, #108]	; (80029d4 <HAL_RCC_OscConfig+0x4b4>)
 8002966:	2201      	movs	r2, #1
 8002968:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800296a:	f7fe fcc5 	bl	80012f8 <HAL_GetTick>
 800296e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002970:	e008      	b.n	8002984 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002972:	f7fe fcc1 	bl	80012f8 <HAL_GetTick>
 8002976:	4602      	mov	r2, r0
 8002978:	693b      	ldr	r3, [r7, #16]
 800297a:	1ad3      	subs	r3, r2, r3
 800297c:	2b02      	cmp	r3, #2
 800297e:	d901      	bls.n	8002984 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e064      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002984:	4b11      	ldr	r3, [pc, #68]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d0f0      	beq.n	8002972 <HAL_RCC_OscConfig+0x452>
 8002990:	e05c      	b.n	8002a4c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002992:	4b10      	ldr	r3, [pc, #64]	; (80029d4 <HAL_RCC_OscConfig+0x4b4>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002998:	f7fe fcae 	bl	80012f8 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80029a0:	f7fe fcaa 	bl	80012f8 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e04d      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029b2:	4b06      	ldr	r3, [pc, #24]	; (80029cc <HAL_RCC_OscConfig+0x4ac>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1f0      	bne.n	80029a0 <HAL_RCC_OscConfig+0x480>
 80029be:	e045      	b.n	8002a4c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	699b      	ldr	r3, [r3, #24]
 80029c4:	2b01      	cmp	r3, #1
 80029c6:	d107      	bne.n	80029d8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80029c8:	2301      	movs	r3, #1
 80029ca:	e040      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
 80029cc:	40023800 	.word	0x40023800
 80029d0:	40007000 	.word	0x40007000
 80029d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80029d8:	4b1f      	ldr	r3, [pc, #124]	; (8002a58 <HAL_RCC_OscConfig+0x538>)
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	699b      	ldr	r3, [r3, #24]
 80029e2:	2b01      	cmp	r3, #1
 80029e4:	d030      	beq.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d129      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80029fe:	429a      	cmp	r2, r3
 8002a00:	d122      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a02:	68fa      	ldr	r2, [r7, #12]
 8002a04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002a08:	4013      	ands	r3, r2
 8002a0a:	687a      	ldr	r2, [r7, #4]
 8002a0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002a0e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d119      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a1e:	085b      	lsrs	r3, r3, #1
 8002a20:	3b01      	subs	r3, #1
 8002a22:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a24:	429a      	cmp	r2, r3
 8002a26:	d10f      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a32:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a34:	429a      	cmp	r2, r3
 8002a36:	d107      	bne.n	8002a48 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a42:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a44:	429a      	cmp	r2, r3
 8002a46:	d001      	beq.n	8002a4c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8002a48:	2301      	movs	r3, #1
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002a4c:	2300      	movs	r3, #0
}
 8002a4e:	4618      	mov	r0, r3
 8002a50:	3718      	adds	r7, #24
 8002a52:	46bd      	mov	sp, r7
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	40023800 	.word	0x40023800

08002a5c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d101      	bne.n	8002a6e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e041      	b.n	8002af2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a74:	b2db      	uxtb	r3, r3
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fe f9e6 	bl	8000e54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2202      	movs	r2, #2
 8002a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	3304      	adds	r3, #4
 8002a98:	4619      	mov	r1, r3
 8002a9a:	4610      	mov	r0, r2
 8002a9c:	f000 fee0 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2201      	movs	r2, #1
 8002abc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2201      	movs	r2, #1
 8002acc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2201      	movs	r2, #1
 8002adc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002af0:	2300      	movs	r3, #0
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3708      	adds	r7, #8
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
	...

08002afc <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002afc:	b480      	push	{r7}
 8002afe:	b085      	sub	sp, #20
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2b01      	cmp	r3, #1
 8002b0e:	d001      	beq.n	8002b14 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e046      	b.n	8002ba2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a23      	ldr	r2, [pc, #140]	; (8002bb0 <HAL_TIM_Base_Start+0xb4>)
 8002b22:	4293      	cmp	r3, r2
 8002b24:	d022      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b2e:	d01d      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	4a1f      	ldr	r2, [pc, #124]	; (8002bb4 <HAL_TIM_Base_Start+0xb8>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d018      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a1e      	ldr	r2, [pc, #120]	; (8002bb8 <HAL_TIM_Base_Start+0xbc>)
 8002b40:	4293      	cmp	r3, r2
 8002b42:	d013      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	4a1c      	ldr	r2, [pc, #112]	; (8002bbc <HAL_TIM_Base_Start+0xc0>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00e      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a1b      	ldr	r2, [pc, #108]	; (8002bc0 <HAL_TIM_Base_Start+0xc4>)
 8002b54:	4293      	cmp	r3, r2
 8002b56:	d009      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_TIM_Base_Start+0xc8>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d004      	beq.n	8002b6c <HAL_TIM_Base_Start+0x70>
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	4a18      	ldr	r2, [pc, #96]	; (8002bc8 <HAL_TIM_Base_Start+0xcc>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d111      	bne.n	8002b90 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689b      	ldr	r3, [r3, #8]
 8002b72:	f003 0307 	and.w	r3, r3, #7
 8002b76:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2b06      	cmp	r3, #6
 8002b7c:	d010      	beq.n	8002ba0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f042 0201 	orr.w	r2, r2, #1
 8002b8c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b8e:	e007      	b.n	8002ba0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	681a      	ldr	r2, [r3, #0]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f042 0201 	orr.w	r2, r2, #1
 8002b9e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bac:	4770      	bx	lr
 8002bae:	bf00      	nop
 8002bb0:	40010000 	.word	0x40010000
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40000800 	.word	0x40000800
 8002bbc:	40000c00 	.word	0x40000c00
 8002bc0:	40010400 	.word	0x40010400
 8002bc4:	40014000 	.word	0x40014000
 8002bc8:	40001800 	.word	0x40001800

08002bcc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b085      	sub	sp, #20
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bda:	b2db      	uxtb	r3, r3
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d001      	beq.n	8002be4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e04e      	b.n	8002c82 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2202      	movs	r2, #2
 8002be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f042 0201 	orr.w	r2, r2, #1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a23      	ldr	r2, [pc, #140]	; (8002c90 <HAL_TIM_Base_Start_IT+0xc4>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d022      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0e:	d01d      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a1f      	ldr	r2, [pc, #124]	; (8002c94 <HAL_TIM_Base_Start_IT+0xc8>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d018      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	4a1e      	ldr	r2, [pc, #120]	; (8002c98 <HAL_TIM_Base_Start_IT+0xcc>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d013      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a1c      	ldr	r2, [pc, #112]	; (8002c9c <HAL_TIM_Base_Start_IT+0xd0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00e      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a1b      	ldr	r2, [pc, #108]	; (8002ca0 <HAL_TIM_Base_Start_IT+0xd4>)
 8002c34:	4293      	cmp	r3, r2
 8002c36:	d009      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4a19      	ldr	r2, [pc, #100]	; (8002ca4 <HAL_TIM_Base_Start_IT+0xd8>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d004      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x80>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4a18      	ldr	r2, [pc, #96]	; (8002ca8 <HAL_TIM_Base_Start_IT+0xdc>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	d111      	bne.n	8002c70 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 0307 	and.w	r3, r3, #7
 8002c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2b06      	cmp	r3, #6
 8002c5c:	d010      	beq.n	8002c80 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f042 0201 	orr.w	r2, r2, #1
 8002c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6e:	e007      	b.n	8002c80 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3714      	adds	r7, #20
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
 8002c8e:	bf00      	nop
 8002c90:	40010000 	.word	0x40010000
 8002c94:	40000400 	.word	0x40000400
 8002c98:	40000800 	.word	0x40000800
 8002c9c:	40000c00 	.word	0x40000c00
 8002ca0:	40010400 	.word	0x40010400
 8002ca4:	40014000 	.word	0x40014000
 8002ca8:	40001800 	.word	0x40001800

08002cac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b082      	sub	sp, #8
 8002cb0:	af00      	add	r7, sp, #0
 8002cb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d101      	bne.n	8002cbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	e041      	b.n	8002d42 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cc4:	b2db      	uxtb	r3, r3
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d106      	bne.n	8002cd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cd2:	6878      	ldr	r0, [r7, #4]
 8002cd4:	f000 f839 	bl	8002d4a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2202      	movs	r2, #2
 8002cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681a      	ldr	r2, [r3, #0]
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	3304      	adds	r3, #4
 8002ce8:	4619      	mov	r1, r3
 8002cea:	4610      	mov	r0, r2
 8002cec:	f000 fdb8 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2201      	movs	r2, #1
 8002cf4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2201      	movs	r2, #1
 8002cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2201      	movs	r2, #1
 8002d14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2201      	movs	r2, #1
 8002d1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2201      	movs	r2, #1
 8002d24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d40:	2300      	movs	r3, #0
}
 8002d42:	4618      	mov	r0, r3
 8002d44:	3708      	adds	r7, #8
 8002d46:	46bd      	mov	sp, r7
 8002d48:	bd80      	pop	{r7, pc}

08002d4a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d4a:	b480      	push	{r7}
 8002d4c:	b083      	sub	sp, #12
 8002d4e:	af00      	add	r7, sp, #0
 8002d50:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d52:	bf00      	nop
 8002d54:	370c      	adds	r7, #12
 8002d56:	46bd      	mov	sp, r7
 8002d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5c:	4770      	bx	lr
	...

08002d60 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b084      	sub	sp, #16
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	6078      	str	r0, [r7, #4]
 8002d68:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d6a:	683b      	ldr	r3, [r7, #0]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d109      	bne.n	8002d84 <HAL_TIM_PWM_Start+0x24>
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	bf14      	ite	ne
 8002d7c:	2301      	movne	r3, #1
 8002d7e:	2300      	moveq	r3, #0
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	e022      	b.n	8002dca <HAL_TIM_PWM_Start+0x6a>
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b04      	cmp	r3, #4
 8002d88:	d109      	bne.n	8002d9e <HAL_TIM_PWM_Start+0x3e>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002d90:	b2db      	uxtb	r3, r3
 8002d92:	2b01      	cmp	r3, #1
 8002d94:	bf14      	ite	ne
 8002d96:	2301      	movne	r3, #1
 8002d98:	2300      	moveq	r3, #0
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	e015      	b.n	8002dca <HAL_TIM_PWM_Start+0x6a>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b08      	cmp	r3, #8
 8002da2:	d109      	bne.n	8002db8 <HAL_TIM_PWM_Start+0x58>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	bf14      	ite	ne
 8002db0:	2301      	movne	r3, #1
 8002db2:	2300      	moveq	r3, #0
 8002db4:	b2db      	uxtb	r3, r3
 8002db6:	e008      	b.n	8002dca <HAL_TIM_PWM_Start+0x6a>
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dbe:	b2db      	uxtb	r3, r3
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	bf14      	ite	ne
 8002dc4:	2301      	movne	r3, #1
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	b2db      	uxtb	r3, r3
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d001      	beq.n	8002dd2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e07c      	b.n	8002ecc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	2b00      	cmp	r3, #0
 8002dd6:	d104      	bne.n	8002de2 <HAL_TIM_PWM_Start+0x82>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2202      	movs	r2, #2
 8002ddc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de0:	e013      	b.n	8002e0a <HAL_TIM_PWM_Start+0xaa>
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d104      	bne.n	8002df2 <HAL_TIM_PWM_Start+0x92>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2202      	movs	r2, #2
 8002dec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df0:	e00b      	b.n	8002e0a <HAL_TIM_PWM_Start+0xaa>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	2b08      	cmp	r3, #8
 8002df6:	d104      	bne.n	8002e02 <HAL_TIM_PWM_Start+0xa2>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2202      	movs	r2, #2
 8002dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e00:	e003      	b.n	8002e0a <HAL_TIM_PWM_Start+0xaa>
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2202      	movs	r2, #2
 8002e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	6839      	ldr	r1, [r7, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 f938 	bl	8004088 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4a2d      	ldr	r2, [pc, #180]	; (8002ed4 <HAL_TIM_PWM_Start+0x174>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <HAL_TIM_PWM_Start+0xcc>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	4a2c      	ldr	r2, [pc, #176]	; (8002ed8 <HAL_TIM_PWM_Start+0x178>)
 8002e28:	4293      	cmp	r3, r2
 8002e2a:	d101      	bne.n	8002e30 <HAL_TIM_PWM_Start+0xd0>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <HAL_TIM_PWM_Start+0xd2>
 8002e30:	2300      	movs	r3, #0
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d007      	beq.n	8002e46 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002e44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4a22      	ldr	r2, [pc, #136]	; (8002ed4 <HAL_TIM_PWM_Start+0x174>)
 8002e4c:	4293      	cmp	r3, r2
 8002e4e:	d022      	beq.n	8002e96 <HAL_TIM_PWM_Start+0x136>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e58:	d01d      	beq.n	8002e96 <HAL_TIM_PWM_Start+0x136>
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	4a1f      	ldr	r2, [pc, #124]	; (8002edc <HAL_TIM_PWM_Start+0x17c>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d018      	beq.n	8002e96 <HAL_TIM_PWM_Start+0x136>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4a1d      	ldr	r2, [pc, #116]	; (8002ee0 <HAL_TIM_PWM_Start+0x180>)
 8002e6a:	4293      	cmp	r3, r2
 8002e6c:	d013      	beq.n	8002e96 <HAL_TIM_PWM_Start+0x136>
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	4a1c      	ldr	r2, [pc, #112]	; (8002ee4 <HAL_TIM_PWM_Start+0x184>)
 8002e74:	4293      	cmp	r3, r2
 8002e76:	d00e      	beq.n	8002e96 <HAL_TIM_PWM_Start+0x136>
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	4a16      	ldr	r2, [pc, #88]	; (8002ed8 <HAL_TIM_PWM_Start+0x178>)
 8002e7e:	4293      	cmp	r3, r2
 8002e80:	d009      	beq.n	8002e96 <HAL_TIM_PWM_Start+0x136>
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	4a18      	ldr	r2, [pc, #96]	; (8002ee8 <HAL_TIM_PWM_Start+0x188>)
 8002e88:	4293      	cmp	r3, r2
 8002e8a:	d004      	beq.n	8002e96 <HAL_TIM_PWM_Start+0x136>
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a16      	ldr	r2, [pc, #88]	; (8002eec <HAL_TIM_PWM_Start+0x18c>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d111      	bne.n	8002eba <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2b06      	cmp	r3, #6
 8002ea6:	d010      	beq.n	8002eca <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	681a      	ldr	r2, [r3, #0]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f042 0201 	orr.w	r2, r2, #1
 8002eb6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb8:	e007      	b.n	8002eca <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eca:	2300      	movs	r3, #0
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3710      	adds	r7, #16
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	40010000 	.word	0x40010000
 8002ed8:	40010400 	.word	0x40010400
 8002edc:	40000400 	.word	0x40000400
 8002ee0:	40000800 	.word	0x40000800
 8002ee4:	40000c00 	.word	0x40000c00
 8002ee8:	40014000 	.word	0x40014000
 8002eec:	40001800 	.word	0x40001800

08002ef0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b082      	sub	sp, #8
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d101      	bne.n	8002f02 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e041      	b.n	8002f86 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f839 	bl	8002f8e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2202      	movs	r2, #2
 8002f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	3304      	adds	r3, #4
 8002f2c:	4619      	mov	r1, r3
 8002f2e:	4610      	mov	r0, r2
 8002f30:	f000 fc96 	bl	8003860 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	2201      	movs	r2, #1
 8002f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f84:	2300      	movs	r3, #0
}
 8002f86:	4618      	mov	r0, r3
 8002f88:	3708      	adds	r7, #8
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	bd80      	pop	{r7, pc}

08002f8e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8002f8e:	b480      	push	{r7}
 8002f90:	b083      	sub	sp, #12
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002f96:	bf00      	nop
 8002f98:	370c      	adds	r7, #12
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa0:	4770      	bx	lr
	...

08002fa4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d104      	bne.n	8002fbe <HAL_TIM_IC_Start_IT+0x1a>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002fba:	b2db      	uxtb	r3, r3
 8002fbc:	e013      	b.n	8002fe6 <HAL_TIM_IC_Start_IT+0x42>
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	2b04      	cmp	r3, #4
 8002fc2:	d104      	bne.n	8002fce <HAL_TIM_IC_Start_IT+0x2a>
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002fca:	b2db      	uxtb	r3, r3
 8002fcc:	e00b      	b.n	8002fe6 <HAL_TIM_IC_Start_IT+0x42>
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	2b08      	cmp	r3, #8
 8002fd2:	d104      	bne.n	8002fde <HAL_TIM_IC_Start_IT+0x3a>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fda:	b2db      	uxtb	r3, r3
 8002fdc:	e003      	b.n	8002fe6 <HAL_TIM_IC_Start_IT+0x42>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fe4:	b2db      	uxtb	r3, r3
 8002fe6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d104      	bne.n	8002ff8 <HAL_TIM_IC_Start_IT+0x54>
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002ff4:	b2db      	uxtb	r3, r3
 8002ff6:	e013      	b.n	8003020 <HAL_TIM_IC_Start_IT+0x7c>
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	d104      	bne.n	8003008 <HAL_TIM_IC_Start_IT+0x64>
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003004:	b2db      	uxtb	r3, r3
 8003006:	e00b      	b.n	8003020 <HAL_TIM_IC_Start_IT+0x7c>
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	2b08      	cmp	r3, #8
 800300c:	d104      	bne.n	8003018 <HAL_TIM_IC_Start_IT+0x74>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003014:	b2db      	uxtb	r3, r3
 8003016:	e003      	b.n	8003020 <HAL_TIM_IC_Start_IT+0x7c>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800301e:	b2db      	uxtb	r3, r3
 8003020:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003022:	7bfb      	ldrb	r3, [r7, #15]
 8003024:	2b01      	cmp	r3, #1
 8003026:	d102      	bne.n	800302e <HAL_TIM_IC_Start_IT+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003028:	7bbb      	ldrb	r3, [r7, #14]
 800302a:	2b01      	cmp	r3, #1
 800302c:	d001      	beq.n	8003032 <HAL_TIM_IC_Start_IT+0x8e>
  {
    return HAL_ERROR;
 800302e:	2301      	movs	r3, #1
 8003030:	e0c7      	b.n	80031c2 <HAL_TIM_IC_Start_IT+0x21e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003032:	683b      	ldr	r3, [r7, #0]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d104      	bne.n	8003042 <HAL_TIM_IC_Start_IT+0x9e>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	2202      	movs	r2, #2
 800303c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003040:	e013      	b.n	800306a <HAL_TIM_IC_Start_IT+0xc6>
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	2b04      	cmp	r3, #4
 8003046:	d104      	bne.n	8003052 <HAL_TIM_IC_Start_IT+0xae>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2202      	movs	r2, #2
 800304c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003050:	e00b      	b.n	800306a <HAL_TIM_IC_Start_IT+0xc6>
 8003052:	683b      	ldr	r3, [r7, #0]
 8003054:	2b08      	cmp	r3, #8
 8003056:	d104      	bne.n	8003062 <HAL_TIM_IC_Start_IT+0xbe>
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	2202      	movs	r2, #2
 800305c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003060:	e003      	b.n	800306a <HAL_TIM_IC_Start_IT+0xc6>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2202      	movs	r2, #2
 8003066:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d104      	bne.n	800307a <HAL_TIM_IC_Start_IT+0xd6>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	2202      	movs	r2, #2
 8003074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003078:	e013      	b.n	80030a2 <HAL_TIM_IC_Start_IT+0xfe>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	2b04      	cmp	r3, #4
 800307e:	d104      	bne.n	800308a <HAL_TIM_IC_Start_IT+0xe6>
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2202      	movs	r2, #2
 8003084:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003088:	e00b      	b.n	80030a2 <HAL_TIM_IC_Start_IT+0xfe>
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b08      	cmp	r3, #8
 800308e:	d104      	bne.n	800309a <HAL_TIM_IC_Start_IT+0xf6>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003098:	e003      	b.n	80030a2 <HAL_TIM_IC_Start_IT+0xfe>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2202      	movs	r2, #2
 800309e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	2b0c      	cmp	r3, #12
 80030a6:	d841      	bhi.n	800312c <HAL_TIM_IC_Start_IT+0x188>
 80030a8:	a201      	add	r2, pc, #4	; (adr r2, 80030b0 <HAL_TIM_IC_Start_IT+0x10c>)
 80030aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030ae:	bf00      	nop
 80030b0:	080030e5 	.word	0x080030e5
 80030b4:	0800312d 	.word	0x0800312d
 80030b8:	0800312d 	.word	0x0800312d
 80030bc:	0800312d 	.word	0x0800312d
 80030c0:	080030f7 	.word	0x080030f7
 80030c4:	0800312d 	.word	0x0800312d
 80030c8:	0800312d 	.word	0x0800312d
 80030cc:	0800312d 	.word	0x0800312d
 80030d0:	08003109 	.word	0x08003109
 80030d4:	0800312d 	.word	0x0800312d
 80030d8:	0800312d 	.word	0x0800312d
 80030dc:	0800312d 	.word	0x0800312d
 80030e0:	0800311b 	.word	0x0800311b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	68da      	ldr	r2, [r3, #12]
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f042 0202 	orr.w	r2, r2, #2
 80030f2:	60da      	str	r2, [r3, #12]
      break;
 80030f4:	e01b      	b.n	800312e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	68da      	ldr	r2, [r3, #12]
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	f042 0204 	orr.w	r2, r2, #4
 8003104:	60da      	str	r2, [r3, #12]
      break;
 8003106:	e012      	b.n	800312e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	68da      	ldr	r2, [r3, #12]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f042 0208 	orr.w	r2, r2, #8
 8003116:	60da      	str	r2, [r3, #12]
      break;
 8003118:	e009      	b.n	800312e <HAL_TIM_IC_Start_IT+0x18a>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68da      	ldr	r2, [r3, #12]
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f042 0210 	orr.w	r2, r2, #16
 8003128:	60da      	str	r2, [r3, #12]
      break;
 800312a:	e000      	b.n	800312e <HAL_TIM_IC_Start_IT+0x18a>
    }

    default:
      break;
 800312c:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	2201      	movs	r2, #1
 8003134:	6839      	ldr	r1, [r7, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f000 ffa6 	bl	8004088 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a22      	ldr	r2, [pc, #136]	; (80031cc <HAL_TIM_IC_Start_IT+0x228>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d022      	beq.n	800318c <HAL_TIM_IC_Start_IT+0x1e8>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800314e:	d01d      	beq.n	800318c <HAL_TIM_IC_Start_IT+0x1e8>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1e      	ldr	r2, [pc, #120]	; (80031d0 <HAL_TIM_IC_Start_IT+0x22c>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d018      	beq.n	800318c <HAL_TIM_IC_Start_IT+0x1e8>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1d      	ldr	r2, [pc, #116]	; (80031d4 <HAL_TIM_IC_Start_IT+0x230>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d013      	beq.n	800318c <HAL_TIM_IC_Start_IT+0x1e8>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a1b      	ldr	r2, [pc, #108]	; (80031d8 <HAL_TIM_IC_Start_IT+0x234>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d00e      	beq.n	800318c <HAL_TIM_IC_Start_IT+0x1e8>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1a      	ldr	r2, [pc, #104]	; (80031dc <HAL_TIM_IC_Start_IT+0x238>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d009      	beq.n	800318c <HAL_TIM_IC_Start_IT+0x1e8>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a18      	ldr	r2, [pc, #96]	; (80031e0 <HAL_TIM_IC_Start_IT+0x23c>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d004      	beq.n	800318c <HAL_TIM_IC_Start_IT+0x1e8>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	4a17      	ldr	r2, [pc, #92]	; (80031e4 <HAL_TIM_IC_Start_IT+0x240>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d111      	bne.n	80031b0 <HAL_TIM_IC_Start_IT+0x20c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	689b      	ldr	r3, [r3, #8]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	2b06      	cmp	r3, #6
 800319c:	d010      	beq.n	80031c0 <HAL_TIM_IC_Start_IT+0x21c>
    {
      __HAL_TIM_ENABLE(htim);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	681a      	ldr	r2, [r3, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f042 0201 	orr.w	r2, r2, #1
 80031ac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80031ae:	e007      	b.n	80031c0 <HAL_TIM_IC_Start_IT+0x21c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f042 0201 	orr.w	r2, r2, #1
 80031be:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3710      	adds	r7, #16
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	40010000 	.word	0x40010000
 80031d0:	40000400 	.word	0x40000400
 80031d4:	40000800 	.word	0x40000800
 80031d8:	40000c00 	.word	0x40000c00
 80031dc:	40010400 	.word	0x40010400
 80031e0:	40014000 	.word	0x40014000
 80031e4:	40001800 	.word	0x40001800

080031e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	b082      	sub	sp, #8
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	691b      	ldr	r3, [r3, #16]
 80031f6:	f003 0302 	and.w	r3, r3, #2
 80031fa:	2b02      	cmp	r3, #2
 80031fc:	d122      	bne.n	8003244 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	68db      	ldr	r3, [r3, #12]
 8003204:	f003 0302 	and.w	r3, r3, #2
 8003208:	2b02      	cmp	r3, #2
 800320a:	d11b      	bne.n	8003244 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f06f 0202 	mvn.w	r2, #2
 8003214:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	2201      	movs	r2, #1
 800321a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699b      	ldr	r3, [r3, #24]
 8003222:	f003 0303 	and.w	r3, r3, #3
 8003226:	2b00      	cmp	r3, #0
 8003228:	d003      	beq.n	8003232 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800322a:	6878      	ldr	r0, [r7, #4]
 800322c:	f7fd fb1c 	bl	8000868 <HAL_TIM_IC_CaptureCallback>
 8003230:	e005      	b.n	800323e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003232:	6878      	ldr	r0, [r7, #4]
 8003234:	f000 faf6 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f000 fafd 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	2200      	movs	r2, #0
 8003242:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	691b      	ldr	r3, [r3, #16]
 800324a:	f003 0304 	and.w	r3, r3, #4
 800324e:	2b04      	cmp	r3, #4
 8003250:	d122      	bne.n	8003298 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68db      	ldr	r3, [r3, #12]
 8003258:	f003 0304 	and.w	r3, r3, #4
 800325c:	2b04      	cmp	r3, #4
 800325e:	d11b      	bne.n	8003298 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f06f 0204 	mvn.w	r2, #4
 8003268:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2202      	movs	r2, #2
 800326e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800327a:	2b00      	cmp	r3, #0
 800327c:	d003      	beq.n	8003286 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800327e:	6878      	ldr	r0, [r7, #4]
 8003280:	f7fd faf2 	bl	8000868 <HAL_TIM_IC_CaptureCallback>
 8003284:	e005      	b.n	8003292 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 facc 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800328c:	6878      	ldr	r0, [r7, #4]
 800328e:	f000 fad3 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	f003 0308 	and.w	r3, r3, #8
 80032a2:	2b08      	cmp	r3, #8
 80032a4:	d122      	bne.n	80032ec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	f003 0308 	and.w	r3, r3, #8
 80032b0:	2b08      	cmp	r3, #8
 80032b2:	d11b      	bne.n	80032ec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0208 	mvn.w	r2, #8
 80032bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2204      	movs	r2, #4
 80032c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	69db      	ldr	r3, [r3, #28]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7fd fac8 	bl	8000868 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 faa2 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 faa9 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	f003 0310 	and.w	r3, r3, #16
 80032f6:	2b10      	cmp	r3, #16
 80032f8:	d122      	bne.n	8003340 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	f003 0310 	and.w	r3, r3, #16
 8003304:	2b10      	cmp	r3, #16
 8003306:	d11b      	bne.n	8003340 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	f06f 0210 	mvn.w	r2, #16
 8003310:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2208      	movs	r2, #8
 8003316:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	2b00      	cmp	r3, #0
 8003324:	d003      	beq.n	800332e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f7fd fa9e 	bl	8000868 <HAL_TIM_IC_CaptureCallback>
 800332c:	e005      	b.n	800333a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800332e:	6878      	ldr	r0, [r7, #4]
 8003330:	f000 fa78 	bl	8003824 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003334:	6878      	ldr	r0, [r7, #4]
 8003336:	f000 fa7f 	bl	8003838 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2200      	movs	r2, #0
 800333e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b01      	cmp	r3, #1
 800334c:	d10e      	bne.n	800336c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	68db      	ldr	r3, [r3, #12]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	2b01      	cmp	r3, #1
 800335a:	d107      	bne.n	800336c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f06f 0201 	mvn.w	r2, #1
 8003364:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003366:	6878      	ldr	r0, [r7, #4]
 8003368:	f7fd fb3a 	bl	80009e0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	691b      	ldr	r3, [r3, #16]
 8003372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003376:	2b80      	cmp	r3, #128	; 0x80
 8003378:	d10e      	bne.n	8003398 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003384:	2b80      	cmp	r3, #128	; 0x80
 8003386:	d107      	bne.n	8003398 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003390:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 ff24 	bl	80041e0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691b      	ldr	r3, [r3, #16]
 800339e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a2:	2b40      	cmp	r3, #64	; 0x40
 80033a4:	d10e      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033b0:	2b40      	cmp	r3, #64	; 0x40
 80033b2:	d107      	bne.n	80033c4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80033bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa44 	bl	800384c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	f003 0320 	and.w	r3, r3, #32
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	d10e      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	68db      	ldr	r3, [r3, #12]
 80033d8:	f003 0320 	and.w	r3, r3, #32
 80033dc:	2b20      	cmp	r3, #32
 80033de:	d107      	bne.n	80033f0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f06f 0220 	mvn.w	r2, #32
 80033e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80033ea:	6878      	ldr	r0, [r7, #4]
 80033ec:	f000 feee 	bl	80041cc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	60f8      	str	r0, [r7, #12]
 8003400:	60b9      	str	r1, [r7, #8]
 8003402:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800340a:	2b01      	cmp	r3, #1
 800340c:	d101      	bne.n	8003412 <HAL_TIM_IC_ConfigChannel+0x1a>
 800340e:	2302      	movs	r3, #2
 8003410:	e082      	b.n	8003518 <HAL_TIM_IC_ConfigChannel+0x120>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2201      	movs	r2, #1
 8003416:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2b00      	cmp	r3, #0
 800341e:	d11b      	bne.n	8003458 <HAL_TIM_IC_ConfigChannel+0x60>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	6818      	ldr	r0, [r3, #0]
 8003424:	68bb      	ldr	r3, [r7, #8]
 8003426:	6819      	ldr	r1, [r3, #0]
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	685a      	ldr	r2, [r3, #4]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	68db      	ldr	r3, [r3, #12]
 8003430:	f000 fc66 	bl	8003d00 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	699a      	ldr	r2, [r3, #24]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f022 020c 	bic.w	r2, r2, #12
 8003442:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6999      	ldr	r1, [r3, #24]
 800344a:	68bb      	ldr	r3, [r7, #8]
 800344c:	689a      	ldr	r2, [r3, #8]
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	430a      	orrs	r2, r1
 8003454:	619a      	str	r2, [r3, #24]
 8003456:	e05a      	b.n	800350e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2b04      	cmp	r3, #4
 800345c:	d11c      	bne.n	8003498 <HAL_TIM_IC_ConfigChannel+0xa0>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	68bb      	ldr	r3, [r7, #8]
 8003464:	6819      	ldr	r1, [r3, #0]
 8003466:	68bb      	ldr	r3, [r7, #8]
 8003468:	685a      	ldr	r2, [r3, #4]
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	68db      	ldr	r3, [r3, #12]
 800346e:	f000 fcea 	bl	8003e46 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	699a      	ldr	r2, [r3, #24]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003480:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	6999      	ldr	r1, [r3, #24]
 8003488:	68bb      	ldr	r3, [r7, #8]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	021a      	lsls	r2, r3, #8
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	430a      	orrs	r2, r1
 8003494:	619a      	str	r2, [r3, #24]
 8003496:	e03a      	b.n	800350e <HAL_TIM_IC_ConfigChannel+0x116>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2b08      	cmp	r3, #8
 800349c:	d11b      	bne.n	80034d6 <HAL_TIM_IC_ConfigChannel+0xde>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	6818      	ldr	r0, [r3, #0]
 80034a2:	68bb      	ldr	r3, [r7, #8]
 80034a4:	6819      	ldr	r1, [r3, #0]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	685a      	ldr	r2, [r3, #4]
 80034aa:	68bb      	ldr	r3, [r7, #8]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f000 fd37 	bl	8003f20 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	69da      	ldr	r2, [r3, #28]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f022 020c 	bic.w	r2, r2, #12
 80034c0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	69d9      	ldr	r1, [r3, #28]
 80034c8:	68bb      	ldr	r3, [r7, #8]
 80034ca:	689a      	ldr	r2, [r3, #8]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	430a      	orrs	r2, r1
 80034d2:	61da      	str	r2, [r3, #28]
 80034d4:	e01b      	b.n	800350e <HAL_TIM_IC_ConfigChannel+0x116>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	6818      	ldr	r0, [r3, #0]
 80034da:	68bb      	ldr	r3, [r7, #8]
 80034dc:	6819      	ldr	r1, [r3, #0]
 80034de:	68bb      	ldr	r3, [r7, #8]
 80034e0:	685a      	ldr	r2, [r3, #4]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	68db      	ldr	r3, [r3, #12]
 80034e6:	f000 fd57 	bl	8003f98 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	69da      	ldr	r2, [r3, #28]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80034f8:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	69d9      	ldr	r1, [r3, #28]
 8003500:	68bb      	ldr	r3, [r7, #8]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	021a      	lsls	r2, r3, #8
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	61da      	str	r2, [r3, #28]
  }

  __HAL_UNLOCK(htim);
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003516:	2300      	movs	r3, #0
}
 8003518:	4618      	mov	r0, r3
 800351a:	3710      	adds	r7, #16
 800351c:	46bd      	mov	sp, r7
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b084      	sub	sp, #16
 8003524:	af00      	add	r7, sp, #0
 8003526:	60f8      	str	r0, [r7, #12]
 8003528:	60b9      	str	r1, [r7, #8]
 800352a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003532:	2b01      	cmp	r3, #1
 8003534:	d101      	bne.n	800353a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003536:	2302      	movs	r3, #2
 8003538:	e0ac      	b.n	8003694 <HAL_TIM_PWM_ConfigChannel+0x174>
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2201      	movs	r2, #1
 800353e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b0c      	cmp	r3, #12
 8003546:	f200 809f 	bhi.w	8003688 <HAL_TIM_PWM_ConfigChannel+0x168>
 800354a:	a201      	add	r2, pc, #4	; (adr r2, 8003550 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800354c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003550:	08003585 	.word	0x08003585
 8003554:	08003689 	.word	0x08003689
 8003558:	08003689 	.word	0x08003689
 800355c:	08003689 	.word	0x08003689
 8003560:	080035c5 	.word	0x080035c5
 8003564:	08003689 	.word	0x08003689
 8003568:	08003689 	.word	0x08003689
 800356c:	08003689 	.word	0x08003689
 8003570:	08003607 	.word	0x08003607
 8003574:	08003689 	.word	0x08003689
 8003578:	08003689 	.word	0x08003689
 800357c:	08003689 	.word	0x08003689
 8003580:	08003647 	.word	0x08003647
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	68b9      	ldr	r1, [r7, #8]
 800358a:	4618      	mov	r0, r3
 800358c:	f000 fa08 	bl	80039a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	699a      	ldr	r2, [r3, #24]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f042 0208 	orr.w	r2, r2, #8
 800359e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	699a      	ldr	r2, [r3, #24]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f022 0204 	bic.w	r2, r2, #4
 80035ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6999      	ldr	r1, [r3, #24]
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	691a      	ldr	r2, [r3, #16]
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	430a      	orrs	r2, r1
 80035c0:	619a      	str	r2, [r3, #24]
      break;
 80035c2:	e062      	b.n	800368a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	68b9      	ldr	r1, [r7, #8]
 80035ca:	4618      	mov	r0, r3
 80035cc:	f000 fa58 	bl	8003a80 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	699a      	ldr	r2, [r3, #24]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	699a      	ldr	r2, [r3, #24]
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80035ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6999      	ldr	r1, [r3, #24]
 80035f6:	68bb      	ldr	r3, [r7, #8]
 80035f8:	691b      	ldr	r3, [r3, #16]
 80035fa:	021a      	lsls	r2, r3, #8
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	430a      	orrs	r2, r1
 8003602:	619a      	str	r2, [r3, #24]
      break;
 8003604:	e041      	b.n	800368a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	68b9      	ldr	r1, [r7, #8]
 800360c:	4618      	mov	r0, r3
 800360e:	f000 faad 	bl	8003b6c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	69da      	ldr	r2, [r3, #28]
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f042 0208 	orr.w	r2, r2, #8
 8003620:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	69da      	ldr	r2, [r3, #28]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0204 	bic.w	r2, r2, #4
 8003630:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	69d9      	ldr	r1, [r3, #28]
 8003638:	68bb      	ldr	r3, [r7, #8]
 800363a:	691a      	ldr	r2, [r3, #16]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	430a      	orrs	r2, r1
 8003642:	61da      	str	r2, [r3, #28]
      break;
 8003644:	e021      	b.n	800368a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	68b9      	ldr	r1, [r7, #8]
 800364c:	4618      	mov	r0, r3
 800364e:	f000 fb01 	bl	8003c54 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	69da      	ldr	r2, [r3, #28]
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003660:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	69da      	ldr	r2, [r3, #28]
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003670:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	69d9      	ldr	r1, [r3, #28]
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	691b      	ldr	r3, [r3, #16]
 800367c:	021a      	lsls	r2, r3, #8
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	430a      	orrs	r2, r1
 8003684:	61da      	str	r2, [r3, #28]
      break;
 8003686:	e000      	b.n	800368a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8003688:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	2200      	movs	r2, #0
 800368e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	3710      	adds	r7, #16
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}

0800369c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b084      	sub	sp, #16
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
 80036a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d101      	bne.n	80036b4 <HAL_TIM_ConfigClockSource+0x18>
 80036b0:	2302      	movs	r3, #2
 80036b2:	e0b3      	b.n	800381c <HAL_TIM_ConfigClockSource+0x180>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2202      	movs	r2, #2
 80036c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80036d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80036da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	68fa      	ldr	r2, [r7, #12]
 80036e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036ec:	d03e      	beq.n	800376c <HAL_TIM_ConfigClockSource+0xd0>
 80036ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80036f2:	f200 8087 	bhi.w	8003804 <HAL_TIM_ConfigClockSource+0x168>
 80036f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036fa:	f000 8085 	beq.w	8003808 <HAL_TIM_ConfigClockSource+0x16c>
 80036fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003702:	d87f      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x168>
 8003704:	2b70      	cmp	r3, #112	; 0x70
 8003706:	d01a      	beq.n	800373e <HAL_TIM_ConfigClockSource+0xa2>
 8003708:	2b70      	cmp	r3, #112	; 0x70
 800370a:	d87b      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x168>
 800370c:	2b60      	cmp	r3, #96	; 0x60
 800370e:	d050      	beq.n	80037b2 <HAL_TIM_ConfigClockSource+0x116>
 8003710:	2b60      	cmp	r3, #96	; 0x60
 8003712:	d877      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x168>
 8003714:	2b50      	cmp	r3, #80	; 0x50
 8003716:	d03c      	beq.n	8003792 <HAL_TIM_ConfigClockSource+0xf6>
 8003718:	2b50      	cmp	r3, #80	; 0x50
 800371a:	d873      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x168>
 800371c:	2b40      	cmp	r3, #64	; 0x40
 800371e:	d058      	beq.n	80037d2 <HAL_TIM_ConfigClockSource+0x136>
 8003720:	2b40      	cmp	r3, #64	; 0x40
 8003722:	d86f      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x168>
 8003724:	2b30      	cmp	r3, #48	; 0x30
 8003726:	d064      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x156>
 8003728:	2b30      	cmp	r3, #48	; 0x30
 800372a:	d86b      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x168>
 800372c:	2b20      	cmp	r3, #32
 800372e:	d060      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x156>
 8003730:	2b20      	cmp	r3, #32
 8003732:	d867      	bhi.n	8003804 <HAL_TIM_ConfigClockSource+0x168>
 8003734:	2b00      	cmp	r3, #0
 8003736:	d05c      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x156>
 8003738:	2b10      	cmp	r3, #16
 800373a:	d05a      	beq.n	80037f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800373c:	e062      	b.n	8003804 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	6818      	ldr	r0, [r3, #0]
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	6899      	ldr	r1, [r3, #8]
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	68db      	ldr	r3, [r3, #12]
 800374e:	f000 fc7b 	bl	8004048 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003760:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	609a      	str	r2, [r3, #8]
      break;
 800376a:	e04e      	b.n	800380a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	6818      	ldr	r0, [r3, #0]
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	6899      	ldr	r1, [r3, #8]
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	685a      	ldr	r2, [r3, #4]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	68db      	ldr	r3, [r3, #12]
 800377c:	f000 fc64 	bl	8004048 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	689a      	ldr	r2, [r3, #8]
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800378e:	609a      	str	r2, [r3, #8]
      break;
 8003790:	e03b      	b.n	800380a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6818      	ldr	r0, [r3, #0]
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	6859      	ldr	r1, [r3, #4]
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	68db      	ldr	r3, [r3, #12]
 800379e:	461a      	mov	r2, r3
 80037a0:	f000 fb22 	bl	8003de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	2150      	movs	r1, #80	; 0x50
 80037aa:	4618      	mov	r0, r3
 80037ac:	f000 fc31 	bl	8004012 <TIM_ITRx_SetConfig>
      break;
 80037b0:	e02b      	b.n	800380a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6818      	ldr	r0, [r3, #0]
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	6859      	ldr	r1, [r3, #4]
 80037ba:	683b      	ldr	r3, [r7, #0]
 80037bc:	68db      	ldr	r3, [r3, #12]
 80037be:	461a      	mov	r2, r3
 80037c0:	f000 fb7e 	bl	8003ec0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2160      	movs	r1, #96	; 0x60
 80037ca:	4618      	mov	r0, r3
 80037cc:	f000 fc21 	bl	8004012 <TIM_ITRx_SetConfig>
      break;
 80037d0:	e01b      	b.n	800380a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6818      	ldr	r0, [r3, #0]
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	6859      	ldr	r1, [r3, #4]
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	461a      	mov	r2, r3
 80037e0:	f000 fb02 	bl	8003de8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	2140      	movs	r1, #64	; 0x40
 80037ea:	4618      	mov	r0, r3
 80037ec:	f000 fc11 	bl	8004012 <TIM_ITRx_SetConfig>
      break;
 80037f0:	e00b      	b.n	800380a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681a      	ldr	r2, [r3, #0]
 80037f6:	683b      	ldr	r3, [r7, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4619      	mov	r1, r3
 80037fc:	4610      	mov	r0, r2
 80037fe:	f000 fc08 	bl	8004012 <TIM_ITRx_SetConfig>
        break;
 8003802:	e002      	b.n	800380a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003804:	bf00      	nop
 8003806:	e000      	b.n	800380a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003808:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2201      	movs	r2, #1
 800380e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3710      	adds	r7, #16
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003824:	b480      	push	{r7}
 8003826:	b083      	sub	sp, #12
 8003828:	af00      	add	r7, sp, #0
 800382a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800382c:	bf00      	nop
 800382e:	370c      	adds	r7, #12
 8003830:	46bd      	mov	sp, r7
 8003832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003836:	4770      	bx	lr

08003838 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003838:	b480      	push	{r7}
 800383a:	b083      	sub	sp, #12
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003840:	bf00      	nop
 8003842:	370c      	adds	r7, #12
 8003844:	46bd      	mov	sp, r7
 8003846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384a:	4770      	bx	lr

0800384c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003854:	bf00      	nop
 8003856:	370c      	adds	r7, #12
 8003858:	46bd      	mov	sp, r7
 800385a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385e:	4770      	bx	lr

08003860 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003860:	b480      	push	{r7}
 8003862:	b085      	sub	sp, #20
 8003864:	af00      	add	r7, sp, #0
 8003866:	6078      	str	r0, [r7, #4]
 8003868:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a40      	ldr	r2, [pc, #256]	; (8003974 <TIM_Base_SetConfig+0x114>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d013      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800387e:	d00f      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a3d      	ldr	r2, [pc, #244]	; (8003978 <TIM_Base_SetConfig+0x118>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d00b      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a3c      	ldr	r2, [pc, #240]	; (800397c <TIM_Base_SetConfig+0x11c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d007      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a3b      	ldr	r2, [pc, #236]	; (8003980 <TIM_Base_SetConfig+0x120>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_Base_SetConfig+0x40>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a3a      	ldr	r2, [pc, #232]	; (8003984 <TIM_Base_SetConfig+0x124>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d108      	bne.n	80038b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	68fa      	ldr	r2, [r7, #12]
 80038ae:	4313      	orrs	r3, r2
 80038b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a2f      	ldr	r2, [pc, #188]	; (8003974 <TIM_Base_SetConfig+0x114>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d02b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c0:	d027      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a2c      	ldr	r2, [pc, #176]	; (8003978 <TIM_Base_SetConfig+0x118>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d023      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2b      	ldr	r2, [pc, #172]	; (800397c <TIM_Base_SetConfig+0x11c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d01f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <TIM_Base_SetConfig+0x120>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d01b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <TIM_Base_SetConfig+0x124>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d017      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a28      	ldr	r2, [pc, #160]	; (8003988 <TIM_Base_SetConfig+0x128>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d013      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a27      	ldr	r2, [pc, #156]	; (800398c <TIM_Base_SetConfig+0x12c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d00f      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a26      	ldr	r2, [pc, #152]	; (8003990 <TIM_Base_SetConfig+0x130>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d00b      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a25      	ldr	r2, [pc, #148]	; (8003994 <TIM_Base_SetConfig+0x134>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d007      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a24      	ldr	r2, [pc, #144]	; (8003998 <TIM_Base_SetConfig+0x138>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d003      	beq.n	8003912 <TIM_Base_SetConfig+0xb2>
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	4a23      	ldr	r2, [pc, #140]	; (800399c <TIM_Base_SetConfig+0x13c>)
 800390e:	4293      	cmp	r3, r2
 8003910:	d108      	bne.n	8003924 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003918:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	68db      	ldr	r3, [r3, #12]
 800391e:	68fa      	ldr	r2, [r7, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800392a:	683b      	ldr	r3, [r7, #0]
 800392c:	695b      	ldr	r3, [r3, #20]
 800392e:	4313      	orrs	r3, r2
 8003930:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68fa      	ldr	r2, [r7, #12]
 8003936:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	689a      	ldr	r2, [r3, #8]
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681a      	ldr	r2, [r3, #0]
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0a      	ldr	r2, [pc, #40]	; (8003974 <TIM_Base_SetConfig+0x114>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d003      	beq.n	8003958 <TIM_Base_SetConfig+0xf8>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a0c      	ldr	r2, [pc, #48]	; (8003984 <TIM_Base_SetConfig+0x124>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d103      	bne.n	8003960 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	691a      	ldr	r2, [r3, #16]
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	2201      	movs	r2, #1
 8003964:	615a      	str	r2, [r3, #20]
}
 8003966:	bf00      	nop
 8003968:	3714      	adds	r7, #20
 800396a:	46bd      	mov	sp, r7
 800396c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003970:	4770      	bx	lr
 8003972:	bf00      	nop
 8003974:	40010000 	.word	0x40010000
 8003978:	40000400 	.word	0x40000400
 800397c:	40000800 	.word	0x40000800
 8003980:	40000c00 	.word	0x40000c00
 8003984:	40010400 	.word	0x40010400
 8003988:	40014000 	.word	0x40014000
 800398c:	40014400 	.word	0x40014400
 8003990:	40014800 	.word	0x40014800
 8003994:	40001800 	.word	0x40001800
 8003998:	40001c00 	.word	0x40001c00
 800399c:	40002000 	.word	0x40002000

080039a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	f023 0201 	bic.w	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6a1b      	ldr	r3, [r3, #32]
 80039ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	699b      	ldr	r3, [r3, #24]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0303 	bic.w	r3, r3, #3
 80039d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	68fa      	ldr	r2, [r7, #12]
 80039de:	4313      	orrs	r3, r2
 80039e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f023 0302 	bic.w	r3, r3, #2
 80039e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	697a      	ldr	r2, [r7, #20]
 80039f0:	4313      	orrs	r3, r2
 80039f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a20      	ldr	r2, [pc, #128]	; (8003a78 <TIM_OC1_SetConfig+0xd8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_OC1_SetConfig+0x64>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a1f      	ldr	r2, [pc, #124]	; (8003a7c <TIM_OC1_SetConfig+0xdc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d10c      	bne.n	8003a1e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	f023 0308 	bic.w	r3, r3, #8
 8003a0a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	697a      	ldr	r2, [r7, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a16:	697b      	ldr	r3, [r7, #20]
 8003a18:	f023 0304 	bic.w	r3, r3, #4
 8003a1c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	4a15      	ldr	r2, [pc, #84]	; (8003a78 <TIM_OC1_SetConfig+0xd8>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d003      	beq.n	8003a2e <TIM_OC1_SetConfig+0x8e>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a14      	ldr	r2, [pc, #80]	; (8003a7c <TIM_OC1_SetConfig+0xdc>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d111      	bne.n	8003a52 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a34:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003a3c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	695b      	ldr	r3, [r3, #20]
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	4313      	orrs	r3, r2
 8003a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	699b      	ldr	r3, [r3, #24]
 8003a4c:	693a      	ldr	r2, [r7, #16]
 8003a4e:	4313      	orrs	r3, r2
 8003a50:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	68fa      	ldr	r2, [r7, #12]
 8003a5c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685a      	ldr	r2, [r3, #4]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	697a      	ldr	r2, [r7, #20]
 8003a6a:	621a      	str	r2, [r3, #32]
}
 8003a6c:	bf00      	nop
 8003a6e:	371c      	adds	r7, #28
 8003a70:	46bd      	mov	sp, r7
 8003a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a76:	4770      	bx	lr
 8003a78:	40010000 	.word	0x40010000
 8003a7c:	40010400 	.word	0x40010400

08003a80 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b087      	sub	sp, #28
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6a1b      	ldr	r3, [r3, #32]
 8003a8e:	f023 0210 	bic.w	r2, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	699b      	ldr	r3, [r3, #24]
 8003aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003aae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ab6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ab8:	683b      	ldr	r3, [r7, #0]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	021b      	lsls	r3, r3, #8
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003ac4:	697b      	ldr	r3, [r7, #20]
 8003ac6:	f023 0320 	bic.w	r3, r3, #32
 8003aca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	011b      	lsls	r3, r3, #4
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	4313      	orrs	r3, r2
 8003ad6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	4a22      	ldr	r2, [pc, #136]	; (8003b64 <TIM_OC2_SetConfig+0xe4>)
 8003adc:	4293      	cmp	r3, r2
 8003ade:	d003      	beq.n	8003ae8 <TIM_OC2_SetConfig+0x68>
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a21      	ldr	r2, [pc, #132]	; (8003b68 <TIM_OC2_SetConfig+0xe8>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d10d      	bne.n	8003b04 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003ae8:	697b      	ldr	r3, [r7, #20]
 8003aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	011b      	lsls	r3, r3, #4
 8003af6:	697a      	ldr	r2, [r7, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	4a17      	ldr	r2, [pc, #92]	; (8003b64 <TIM_OC2_SetConfig+0xe4>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d003      	beq.n	8003b14 <TIM_OC2_SetConfig+0x94>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a16      	ldr	r2, [pc, #88]	; (8003b68 <TIM_OC2_SetConfig+0xe8>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d113      	bne.n	8003b3c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b14:	693b      	ldr	r3, [r7, #16]
 8003b16:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003b1a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003b22:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	695b      	ldr	r3, [r3, #20]
 8003b28:	009b      	lsls	r3, r3, #2
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	4313      	orrs	r3, r2
 8003b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	699b      	ldr	r3, [r3, #24]
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	4313      	orrs	r3, r2
 8003b3a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b48:	683b      	ldr	r3, [r7, #0]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	697a      	ldr	r2, [r7, #20]
 8003b54:	621a      	str	r2, [r3, #32]
}
 8003b56:	bf00      	nop
 8003b58:	371c      	adds	r7, #28
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
 8003b62:	bf00      	nop
 8003b64:	40010000 	.word	0x40010000
 8003b68:	40010400 	.word	0x40010400

08003b6c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003b6c:	b480      	push	{r7}
 8003b6e:	b087      	sub	sp, #28
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
 8003b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6a1b      	ldr	r3, [r3, #32]
 8003b7a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	69db      	ldr	r3, [r3, #28]
 8003b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0303 	bic.w	r3, r3, #3
 8003ba2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	68fa      	ldr	r2, [r7, #12]
 8003baa:	4313      	orrs	r3, r2
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bae:	697b      	ldr	r3, [r7, #20]
 8003bb0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003bb4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	021b      	lsls	r3, r3, #8
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	4a21      	ldr	r2, [pc, #132]	; (8003c4c <TIM_OC3_SetConfig+0xe0>)
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d003      	beq.n	8003bd2 <TIM_OC3_SetConfig+0x66>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a20      	ldr	r2, [pc, #128]	; (8003c50 <TIM_OC3_SetConfig+0xe4>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d10d      	bne.n	8003bee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bd2:	697b      	ldr	r3, [r7, #20]
 8003bd4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003bd8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
 8003bde:	021b      	lsls	r3, r3, #8
 8003be0:	697a      	ldr	r2, [r7, #20]
 8003be2:	4313      	orrs	r3, r2
 8003be4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003be6:	697b      	ldr	r3, [r7, #20]
 8003be8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003bec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	4a16      	ldr	r2, [pc, #88]	; (8003c4c <TIM_OC3_SetConfig+0xe0>)
 8003bf2:	4293      	cmp	r3, r2
 8003bf4:	d003      	beq.n	8003bfe <TIM_OC3_SetConfig+0x92>
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <TIM_OC3_SetConfig+0xe4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d113      	bne.n	8003c26 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	695b      	ldr	r3, [r3, #20]
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	693a      	ldr	r2, [r7, #16]
 8003c16:	4313      	orrs	r3, r2
 8003c18:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	699b      	ldr	r3, [r3, #24]
 8003c1e:	011b      	lsls	r3, r3, #4
 8003c20:	693a      	ldr	r2, [r7, #16]
 8003c22:	4313      	orrs	r3, r2
 8003c24:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	68fa      	ldr	r2, [r7, #12]
 8003c30:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685a      	ldr	r2, [r3, #4]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	697a      	ldr	r2, [r7, #20]
 8003c3e:	621a      	str	r2, [r3, #32]
}
 8003c40:	bf00      	nop
 8003c42:	371c      	adds	r7, #28
 8003c44:	46bd      	mov	sp, r7
 8003c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4a:	4770      	bx	lr
 8003c4c:	40010000 	.word	0x40010000
 8003c50:	40010400 	.word	0x40010400

08003c54 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b087      	sub	sp, #28
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a1b      	ldr	r3, [r3, #32]
 8003c62:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6a1b      	ldr	r3, [r3, #32]
 8003c6e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	69db      	ldr	r3, [r3, #28]
 8003c7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003c82:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	021b      	lsls	r3, r3, #8
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	4313      	orrs	r3, r2
 8003c96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003c98:	693b      	ldr	r3, [r7, #16]
 8003c9a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003c9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	031b      	lsls	r3, r3, #12
 8003ca6:	693a      	ldr	r2, [r7, #16]
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	4a12      	ldr	r2, [pc, #72]	; (8003cf8 <TIM_OC4_SetConfig+0xa4>)
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <TIM_OC4_SetConfig+0x68>
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a11      	ldr	r2, [pc, #68]	; (8003cfc <TIM_OC4_SetConfig+0xa8>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d109      	bne.n	8003cd0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cc2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003cc4:	683b      	ldr	r3, [r7, #0]
 8003cc6:	695b      	ldr	r3, [r3, #20]
 8003cc8:	019b      	lsls	r3, r3, #6
 8003cca:	697a      	ldr	r2, [r7, #20]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	685a      	ldr	r2, [r3, #4]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	693a      	ldr	r2, [r7, #16]
 8003ce8:	621a      	str	r2, [r3, #32]
}
 8003cea:	bf00      	nop
 8003cec:	371c      	adds	r7, #28
 8003cee:	46bd      	mov	sp, r7
 8003cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf4:	4770      	bx	lr
 8003cf6:	bf00      	nop
 8003cf8:	40010000 	.word	0x40010000
 8003cfc:	40010400 	.word	0x40010400

08003d00 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	6a1b      	ldr	r3, [r3, #32]
 8003d12:	f023 0201 	bic.w	r2, r3, #1
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	699b      	ldr	r3, [r3, #24]
 8003d1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	6a1b      	ldr	r3, [r3, #32]
 8003d24:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	4a28      	ldr	r2, [pc, #160]	; (8003dcc <TIM_TI1_SetConfig+0xcc>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d01b      	beq.n	8003d66 <TIM_TI1_SetConfig+0x66>
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d34:	d017      	beq.n	8003d66 <TIM_TI1_SetConfig+0x66>
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	4a25      	ldr	r2, [pc, #148]	; (8003dd0 <TIM_TI1_SetConfig+0xd0>)
 8003d3a:	4293      	cmp	r3, r2
 8003d3c:	d013      	beq.n	8003d66 <TIM_TI1_SetConfig+0x66>
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	4a24      	ldr	r2, [pc, #144]	; (8003dd4 <TIM_TI1_SetConfig+0xd4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d00f      	beq.n	8003d66 <TIM_TI1_SetConfig+0x66>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	4a23      	ldr	r2, [pc, #140]	; (8003dd8 <TIM_TI1_SetConfig+0xd8>)
 8003d4a:	4293      	cmp	r3, r2
 8003d4c:	d00b      	beq.n	8003d66 <TIM_TI1_SetConfig+0x66>
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <TIM_TI1_SetConfig+0xdc>)
 8003d52:	4293      	cmp	r3, r2
 8003d54:	d007      	beq.n	8003d66 <TIM_TI1_SetConfig+0x66>
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	4a21      	ldr	r2, [pc, #132]	; (8003de0 <TIM_TI1_SetConfig+0xe0>)
 8003d5a:	4293      	cmp	r3, r2
 8003d5c:	d003      	beq.n	8003d66 <TIM_TI1_SetConfig+0x66>
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	4a20      	ldr	r2, [pc, #128]	; (8003de4 <TIM_TI1_SetConfig+0xe4>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d101      	bne.n	8003d6a <TIM_TI1_SetConfig+0x6a>
 8003d66:	2301      	movs	r3, #1
 8003d68:	e000      	b.n	8003d6c <TIM_TI1_SetConfig+0x6c>
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d008      	beq.n	8003d82 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	f023 0303 	bic.w	r3, r3, #3
 8003d76:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	4313      	orrs	r3, r2
 8003d7e:	617b      	str	r3, [r7, #20]
 8003d80:	e003      	b.n	8003d8a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	f043 0301 	orr.w	r3, r3, #1
 8003d88:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	011b      	lsls	r3, r3, #4
 8003d96:	b2db      	uxtb	r3, r3
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003d9e:	693b      	ldr	r3, [r7, #16]
 8003da0:	f023 030a 	bic.w	r3, r3, #10
 8003da4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f003 030a 	and.w	r3, r3, #10
 8003dac:	693a      	ldr	r2, [r7, #16]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	697a      	ldr	r2, [r7, #20]
 8003db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	693a      	ldr	r2, [r7, #16]
 8003dbc:	621a      	str	r2, [r3, #32]
}
 8003dbe:	bf00      	nop
 8003dc0:	371c      	adds	r7, #28
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc8:	4770      	bx	lr
 8003dca:	bf00      	nop
 8003dcc:	40010000 	.word	0x40010000
 8003dd0:	40000400 	.word	0x40000400
 8003dd4:	40000800 	.word	0x40000800
 8003dd8:	40000c00 	.word	0x40000c00
 8003ddc:	40010400 	.word	0x40010400
 8003de0:	40014000 	.word	0x40014000
 8003de4:	40001800 	.word	0x40001800

08003de8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de8:	b480      	push	{r7}
 8003dea:	b087      	sub	sp, #28
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	60f8      	str	r0, [r7, #12]
 8003df0:	60b9      	str	r1, [r7, #8]
 8003df2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	6a1b      	ldr	r3, [r3, #32]
 8003df8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	f023 0201 	bic.w	r2, r3, #1
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e0c:	693b      	ldr	r3, [r7, #16]
 8003e0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	693a      	ldr	r2, [r7, #16]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e1e:	697b      	ldr	r3, [r7, #20]
 8003e20:	f023 030a 	bic.w	r3, r3, #10
 8003e24:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	621a      	str	r2, [r3, #32]
}
 8003e3a:	bf00      	nop
 8003e3c:	371c      	adds	r7, #28
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e44:	4770      	bx	lr

08003e46 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003e46:	b480      	push	{r7}
 8003e48:	b087      	sub	sp, #28
 8003e4a:	af00      	add	r7, sp, #0
 8003e4c:	60f8      	str	r0, [r7, #12]
 8003e4e:	60b9      	str	r1, [r7, #8]
 8003e50:	607a      	str	r2, [r7, #4]
 8003e52:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	6a1b      	ldr	r3, [r3, #32]
 8003e58:	f023 0210 	bic.w	r2, r3, #16
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	699b      	ldr	r3, [r3, #24]
 8003e64:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6a1b      	ldr	r3, [r3, #32]
 8003e6a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003e6c:	697b      	ldr	r3, [r7, #20]
 8003e6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003e72:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	021b      	lsls	r3, r3, #8
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e84:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	031b      	lsls	r3, r3, #12
 8003e8a:	b29b      	uxth	r3, r3
 8003e8c:	697a      	ldr	r2, [r7, #20]
 8003e8e:	4313      	orrs	r3, r2
 8003e90:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e98:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003e9a:	68bb      	ldr	r3, [r7, #8]
 8003e9c:	011b      	lsls	r3, r3, #4
 8003e9e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003ea2:	693a      	ldr	r2, [r7, #16]
 8003ea4:	4313      	orrs	r3, r2
 8003ea6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	697a      	ldr	r2, [r7, #20]
 8003eac:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	693a      	ldr	r2, [r7, #16]
 8003eb2:	621a      	str	r2, [r3, #32]
}
 8003eb4:	bf00      	nop
 8003eb6:	371c      	adds	r7, #28
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebe:	4770      	bx	lr

08003ec0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ec0:	b480      	push	{r7}
 8003ec2:	b087      	sub	sp, #28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a1b      	ldr	r3, [r3, #32]
 8003ed0:	f023 0210 	bic.w	r2, r3, #16
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	699b      	ldr	r3, [r3, #24]
 8003edc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a1b      	ldr	r3, [r3, #32]
 8003ee2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ee4:	697b      	ldr	r3, [r7, #20]
 8003ee6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003eea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	031b      	lsls	r3, r3, #12
 8003ef0:	697a      	ldr	r2, [r7, #20]
 8003ef2:	4313      	orrs	r3, r2
 8003ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ef6:	693b      	ldr	r3, [r7, #16]
 8003ef8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003efc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	011b      	lsls	r3, r3, #4
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	693a      	ldr	r2, [r7, #16]
 8003f12:	621a      	str	r2, [r3, #32]
}
 8003f14:	bf00      	nop
 8003f16:	371c      	adds	r7, #28
 8003f18:	46bd      	mov	sp, r7
 8003f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1e:	4770      	bx	lr

08003f20 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b087      	sub	sp, #28
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
 8003f2c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	6a1b      	ldr	r3, [r3, #32]
 8003f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	69db      	ldr	r3, [r3, #28]
 8003f3e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	6a1b      	ldr	r3, [r3, #32]
 8003f44:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	f023 0303 	bic.w	r3, r3, #3
 8003f4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	4313      	orrs	r3, r2
 8003f54:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003f56:	697b      	ldr	r3, [r7, #20]
 8003f58:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003f5c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	011b      	lsls	r3, r3, #4
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	697a      	ldr	r2, [r7, #20]
 8003f66:	4313      	orrs	r3, r2
 8003f68:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003f70:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	021b      	lsls	r3, r3, #8
 8003f76:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003f7a:	693a      	ldr	r2, [r7, #16]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	621a      	str	r2, [r3, #32]
}
 8003f8c:	bf00      	nop
 8003f8e:	371c      	adds	r7, #28
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b087      	sub	sp, #28
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
 8003fa4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6a1b      	ldr	r3, [r3, #32]
 8003faa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	6a1b      	ldr	r3, [r3, #32]
 8003fbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003fbe:	697b      	ldr	r3, [r7, #20]
 8003fc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	021b      	lsls	r3, r3, #8
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	4313      	orrs	r3, r2
 8003fce:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003fd6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003fd8:	683b      	ldr	r3, [r7, #0]
 8003fda:	031b      	lsls	r3, r3, #12
 8003fdc:	b29b      	uxth	r3, r3
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003fea:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003fec:	68bb      	ldr	r3, [r7, #8]
 8003fee:	031b      	lsls	r3, r3, #12
 8003ff0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003ff4:	693a      	ldr	r2, [r7, #16]
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	697a      	ldr	r2, [r7, #20]
 8003ffe:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	693a      	ldr	r2, [r7, #16]
 8004004:	621a      	str	r2, [r3, #32]
}
 8004006:	bf00      	nop
 8004008:	371c      	adds	r7, #28
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr

08004012 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004012:	b480      	push	{r7}
 8004014:	b085      	sub	sp, #20
 8004016:	af00      	add	r7, sp, #0
 8004018:	6078      	str	r0, [r7, #4]
 800401a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004028:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800402a:	683a      	ldr	r2, [r7, #0]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4313      	orrs	r3, r2
 8004030:	f043 0307 	orr.w	r3, r3, #7
 8004034:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	68fa      	ldr	r2, [r7, #12]
 800403a:	609a      	str	r2, [r3, #8]
}
 800403c:	bf00      	nop
 800403e:	3714      	adds	r7, #20
 8004040:	46bd      	mov	sp, r7
 8004042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004046:	4770      	bx	lr

08004048 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004048:	b480      	push	{r7}
 800404a:	b087      	sub	sp, #28
 800404c:	af00      	add	r7, sp, #0
 800404e:	60f8      	str	r0, [r7, #12]
 8004050:	60b9      	str	r1, [r7, #8]
 8004052:	607a      	str	r2, [r7, #4]
 8004054:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800405c:	697b      	ldr	r3, [r7, #20]
 800405e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004062:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004064:	683b      	ldr	r3, [r7, #0]
 8004066:	021a      	lsls	r2, r3, #8
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	431a      	orrs	r2, r3
 800406c:	68bb      	ldr	r3, [r7, #8]
 800406e:	4313      	orrs	r3, r2
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	4313      	orrs	r3, r2
 8004074:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	697a      	ldr	r2, [r7, #20]
 800407a:	609a      	str	r2, [r3, #8]
}
 800407c:	bf00      	nop
 800407e:	371c      	adds	r7, #28
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	f003 031f 	and.w	r3, r3, #31
 800409a:	2201      	movs	r2, #1
 800409c:	fa02 f303 	lsl.w	r3, r2, r3
 80040a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	6a1a      	ldr	r2, [r3, #32]
 80040a6:	697b      	ldr	r3, [r7, #20]
 80040a8:	43db      	mvns	r3, r3
 80040aa:	401a      	ands	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	6a1a      	ldr	r2, [r3, #32]
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	f003 031f 	and.w	r3, r3, #31
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	fa01 f303 	lsl.w	r3, r1, r3
 80040c0:	431a      	orrs	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	621a      	str	r2, [r3, #32]
}
 80040c6:	bf00      	nop
 80040c8:	371c      	adds	r7, #28
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
	...

080040d4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80040d4:	b480      	push	{r7}
 80040d6:	b085      	sub	sp, #20
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
 80040dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040e4:	2b01      	cmp	r3, #1
 80040e6:	d101      	bne.n	80040ec <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80040e8:	2302      	movs	r3, #2
 80040ea:	e05a      	b.n	80041a2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2202      	movs	r2, #2
 80040f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004112:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68fa      	ldr	r2, [r7, #12]
 800411a:	4313      	orrs	r3, r2
 800411c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	68fa      	ldr	r2, [r7, #12]
 8004124:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a21      	ldr	r2, [pc, #132]	; (80041b0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800412c:	4293      	cmp	r3, r2
 800412e:	d022      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004138:	d01d      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	4a1d      	ldr	r2, [pc, #116]	; (80041b4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004140:	4293      	cmp	r3, r2
 8004142:	d018      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	4a1b      	ldr	r2, [pc, #108]	; (80041b8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	4a1a      	ldr	r2, [pc, #104]	; (80041bc <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004154:	4293      	cmp	r3, r2
 8004156:	d00e      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	4a18      	ldr	r2, [pc, #96]	; (80041c0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800415e:	4293      	cmp	r3, r2
 8004160:	d009      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	4a17      	ldr	r2, [pc, #92]	; (80041c4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004168:	4293      	cmp	r3, r2
 800416a:	d004      	beq.n	8004176 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	4a15      	ldr	r2, [pc, #84]	; (80041c8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d10c      	bne.n	8004190 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800417c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	68ba      	ldr	r2, [r7, #8]
 8004184:	4313      	orrs	r3, r2
 8004186:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	68ba      	ldr	r2, [r7, #8]
 800418e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2200      	movs	r2, #0
 800419c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80041a0:	2300      	movs	r3, #0
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	40010000 	.word	0x40010000
 80041b4:	40000400 	.word	0x40000400
 80041b8:	40000800 	.word	0x40000800
 80041bc:	40000c00 	.word	0x40000c00
 80041c0:	40010400 	.word	0x40010400
 80041c4:	40014000 	.word	0x40014000
 80041c8:	40001800 	.word	0x40001800

080041cc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b082      	sub	sp, #8
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d101      	bne.n	8004206 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004202:	2301      	movs	r3, #1
 8004204:	e03f      	b.n	8004286 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800420c:	b2db      	uxtb	r3, r3
 800420e:	2b00      	cmp	r3, #0
 8004210:	d106      	bne.n	8004220 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	2200      	movs	r2, #0
 8004216:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800421a:	6878      	ldr	r0, [r7, #4]
 800421c:	f7fc ff5a 	bl	80010d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2224      	movs	r2, #36	; 0x24
 8004224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	68da      	ldr	r2, [r3, #12]
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004236:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 fb83 	bl	8004944 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800424c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800425c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	68da      	ldr	r2, [r3, #12]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800426c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2220      	movs	r2, #32
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2220      	movs	r2, #32
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}

0800428e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800428e:	b480      	push	{r7}
 8004290:	b085      	sub	sp, #20
 8004292:	af00      	add	r7, sp, #0
 8004294:	60f8      	str	r0, [r7, #12]
 8004296:	60b9      	str	r1, [r7, #8]
 8004298:	4613      	mov	r3, r2
 800429a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042a2:	b2db      	uxtb	r3, r3
 80042a4:	2b20      	cmp	r3, #32
 80042a6:	d130      	bne.n	800430a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d002      	beq.n	80042b4 <HAL_UART_Transmit_IT+0x26>
 80042ae:	88fb      	ldrh	r3, [r7, #6]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80042b4:	2301      	movs	r3, #1
 80042b6:	e029      	b.n	800430c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042be:	2b01      	cmp	r3, #1
 80042c0:	d101      	bne.n	80042c6 <HAL_UART_Transmit_IT+0x38>
 80042c2:	2302      	movs	r3, #2
 80042c4:	e022      	b.n	800430c <HAL_UART_Transmit_IT+0x7e>
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2201      	movs	r2, #1
 80042ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	68ba      	ldr	r2, [r7, #8]
 80042d2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	88fa      	ldrh	r2, [r7, #6]
 80042d8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	88fa      	ldrh	r2, [r7, #6]
 80042de:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2200      	movs	r2, #0
 80042e4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	2221      	movs	r2, #33	; 0x21
 80042ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	2200      	movs	r2, #0
 80042f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	68da      	ldr	r2, [r3, #12]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004304:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8004306:	2300      	movs	r3, #0
 8004308:	e000      	b.n	800430c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800430a:	2302      	movs	r3, #2
  }
}
 800430c:	4618      	mov	r0, r3
 800430e:	3714      	adds	r7, #20
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b08a      	sub	sp, #40	; 0x28
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	68db      	ldr	r3, [r3, #12]
 800432e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	695b      	ldr	r3, [r3, #20]
 8004336:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800433c:	2300      	movs	r3, #0
 800433e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004342:	f003 030f 	and.w	r3, r3, #15
 8004346:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8004348:	69bb      	ldr	r3, [r7, #24]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d10d      	bne.n	800436a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	f003 0320 	and.w	r3, r3, #32
 8004354:	2b00      	cmp	r3, #0
 8004356:	d008      	beq.n	800436a <HAL_UART_IRQHandler+0x52>
 8004358:	6a3b      	ldr	r3, [r7, #32]
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d003      	beq.n	800436a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8004362:	6878      	ldr	r0, [r7, #4]
 8004364:	f000 fa57 	bl	8004816 <UART_Receive_IT>
      return;
 8004368:	e17c      	b.n	8004664 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	f000 80b1 	beq.w	80044d4 <HAL_UART_IRQHandler+0x1bc>
 8004372:	69fb      	ldr	r3, [r7, #28]
 8004374:	f003 0301 	and.w	r3, r3, #1
 8004378:	2b00      	cmp	r3, #0
 800437a:	d105      	bne.n	8004388 <HAL_UART_IRQHandler+0x70>
 800437c:	6a3b      	ldr	r3, [r7, #32]
 800437e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004382:	2b00      	cmp	r3, #0
 8004384:	f000 80a6 	beq.w	80044d4 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800438a:	f003 0301 	and.w	r3, r3, #1
 800438e:	2b00      	cmp	r3, #0
 8004390:	d00a      	beq.n	80043a8 <HAL_UART_IRQHandler+0x90>
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004398:	2b00      	cmp	r3, #0
 800439a:	d005      	beq.n	80043a8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	f043 0201 	orr.w	r2, r3, #1
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043aa:	f003 0304 	and.w	r3, r3, #4
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d00a      	beq.n	80043c8 <HAL_UART_IRQHandler+0xb0>
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d005      	beq.n	80043c8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043c0:	f043 0202 	orr.w	r2, r3, #2
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ca:	f003 0302 	and.w	r3, r3, #2
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d00a      	beq.n	80043e8 <HAL_UART_IRQHandler+0xd0>
 80043d2:	69fb      	ldr	r3, [r7, #28]
 80043d4:	f003 0301 	and.w	r3, r3, #1
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043e0:	f043 0204 	orr.w	r2, r3, #4
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80043e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ea:	f003 0308 	and.w	r3, r3, #8
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00f      	beq.n	8004412 <HAL_UART_IRQHandler+0xfa>
 80043f2:	6a3b      	ldr	r3, [r7, #32]
 80043f4:	f003 0320 	and.w	r3, r3, #32
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	d104      	bne.n	8004406 <HAL_UART_IRQHandler+0xee>
 80043fc:	69fb      	ldr	r3, [r7, #28]
 80043fe:	f003 0301 	and.w	r3, r3, #1
 8004402:	2b00      	cmp	r3, #0
 8004404:	d005      	beq.n	8004412 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800440a:	f043 0208 	orr.w	r2, r3, #8
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004416:	2b00      	cmp	r3, #0
 8004418:	f000 811f 	beq.w	800465a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800441c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441e:	f003 0320 	and.w	r3, r3, #32
 8004422:	2b00      	cmp	r3, #0
 8004424:	d007      	beq.n	8004436 <HAL_UART_IRQHandler+0x11e>
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	f003 0320 	and.w	r3, r3, #32
 800442c:	2b00      	cmp	r3, #0
 800442e:	d002      	beq.n	8004436 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8004430:	6878      	ldr	r0, [r7, #4]
 8004432:	f000 f9f0 	bl	8004816 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	695b      	ldr	r3, [r3, #20]
 800443c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004440:	2b40      	cmp	r3, #64	; 0x40
 8004442:	bf0c      	ite	eq
 8004444:	2301      	moveq	r3, #1
 8004446:	2300      	movne	r3, #0
 8004448:	b2db      	uxtb	r3, r3
 800444a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	f003 0308 	and.w	r3, r3, #8
 8004454:	2b00      	cmp	r3, #0
 8004456:	d102      	bne.n	800445e <HAL_UART_IRQHandler+0x146>
 8004458:	697b      	ldr	r3, [r7, #20]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d031      	beq.n	80044c2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f000 f930 	bl	80046c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	695b      	ldr	r3, [r3, #20]
 800446a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800446e:	2b40      	cmp	r3, #64	; 0x40
 8004470:	d123      	bne.n	80044ba <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	695a      	ldr	r2, [r3, #20]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004480:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004486:	2b00      	cmp	r3, #0
 8004488:	d013      	beq.n	80044b2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800448e:	4a77      	ldr	r2, [pc, #476]	; (800466c <HAL_UART_IRQHandler+0x354>)
 8004490:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004496:	4618      	mov	r0, r3
 8004498:	f7fd f96a 	bl	8001770 <HAL_DMA_Abort_IT>
 800449c:	4603      	mov	r3, r0
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d016      	beq.n	80044d0 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044a8:	687a      	ldr	r2, [r7, #4]
 80044aa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80044ac:	4610      	mov	r0, r2
 80044ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b0:	e00e      	b.n	80044d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80044b2:	6878      	ldr	r0, [r7, #4]
 80044b4:	f000 f8f0 	bl	8004698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b8:	e00a      	b.n	80044d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f000 f8ec 	bl	8004698 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044c0:	e006      	b.n	80044d0 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 f8e8 	bl	8004698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2200      	movs	r2, #0
 80044cc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80044ce:	e0c4      	b.n	800465a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044d0:	bf00      	nop
    return;
 80044d2:	e0c2      	b.n	800465a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044d8:	2b01      	cmp	r3, #1
 80044da:	f040 80a2 	bne.w	8004622 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80044de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044e0:	f003 0310 	and.w	r3, r3, #16
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	f000 809c 	beq.w	8004622 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80044ea:	6a3b      	ldr	r3, [r7, #32]
 80044ec:	f003 0310 	and.w	r3, r3, #16
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f000 8096 	beq.w	8004622 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044f6:	2300      	movs	r3, #0
 80044f8:	60fb      	str	r3, [r7, #12]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	60fb      	str	r3, [r7, #12]
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	60fb      	str	r3, [r7, #12]
 800450a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004516:	2b40      	cmp	r3, #64	; 0x40
 8004518:	d14f      	bne.n	80045ba <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8004524:	8a3b      	ldrh	r3, [r7, #16]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f000 8099 	beq.w	800465e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004530:	8a3a      	ldrh	r2, [r7, #16]
 8004532:	429a      	cmp	r2, r3
 8004534:	f080 8093 	bcs.w	800465e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	8a3a      	ldrh	r2, [r7, #16]
 800453c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004542:	69db      	ldr	r3, [r3, #28]
 8004544:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004548:	d02b      	beq.n	80045a2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	68da      	ldr	r2, [r3, #12]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004558:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	695a      	ldr	r2, [r3, #20]
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f022 0201 	bic.w	r2, r2, #1
 8004568:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	695a      	ldr	r2, [r3, #20]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004578:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	68da      	ldr	r2, [r3, #12]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f022 0210 	bic.w	r2, r2, #16
 8004596:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800459c:	4618      	mov	r0, r3
 800459e:	f7fd f877 	bl	8001690 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045aa:	b29b      	uxth	r3, r3
 80045ac:	1ad3      	subs	r3, r2, r3
 80045ae:	b29b      	uxth	r3, r3
 80045b0:	4619      	mov	r1, r3
 80045b2:	6878      	ldr	r0, [r7, #4]
 80045b4:	f000 f87a 	bl	80046ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80045b8:	e051      	b.n	800465e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045c2:	b29b      	uxth	r3, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80045cc:	b29b      	uxth	r3, r3
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d047      	beq.n	8004662 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80045d2:	8a7b      	ldrh	r3, [r7, #18]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d044      	beq.n	8004662 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	68da      	ldr	r2, [r3, #12]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80045e6:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	695a      	ldr	r2, [r3, #20]
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f022 0201 	bic.w	r2, r2, #1
 80045f6:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2220      	movs	r2, #32
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	68da      	ldr	r2, [r3, #12]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f022 0210 	bic.w	r2, r2, #16
 8004614:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004616:	8a7b      	ldrh	r3, [r7, #18]
 8004618:	4619      	mov	r1, r3
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 f846 	bl	80046ac <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8004620:	e01f      	b.n	8004662 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004622:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004624:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004628:	2b00      	cmp	r3, #0
 800462a:	d008      	beq.n	800463e <HAL_UART_IRQHandler+0x326>
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004632:	2b00      	cmp	r3, #0
 8004634:	d003      	beq.n	800463e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f885 	bl	8004746 <UART_Transmit_IT>
    return;
 800463c:	e012      	b.n	8004664 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00d      	beq.n	8004664 <HAL_UART_IRQHandler+0x34c>
 8004648:	6a3b      	ldr	r3, [r7, #32]
 800464a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800464e:	2b00      	cmp	r3, #0
 8004650:	d008      	beq.n	8004664 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f8c7 	bl	80047e6 <UART_EndTransmit_IT>
    return;
 8004658:	e004      	b.n	8004664 <HAL_UART_IRQHandler+0x34c>
    return;
 800465a:	bf00      	nop
 800465c:	e002      	b.n	8004664 <HAL_UART_IRQHandler+0x34c>
      return;
 800465e:	bf00      	nop
 8004660:	e000      	b.n	8004664 <HAL_UART_IRQHandler+0x34c>
      return;
 8004662:	bf00      	nop
  }
}
 8004664:	3728      	adds	r7, #40	; 0x28
 8004666:	46bd      	mov	sp, r7
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	0800471f 	.word	0x0800471f

08004670 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
 8004676:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004678:	bf00      	nop
 800467a:	370c      	adds	r7, #12
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr

08004684 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004684:	b480      	push	{r7}
 8004686:	b083      	sub	sp, #12
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 800468c:	bf00      	nop
 800468e:	370c      	adds	r7, #12
 8004690:	46bd      	mov	sp, r7
 8004692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004696:	4770      	bx	lr

08004698 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004698:	b480      	push	{r7}
 800469a:	b083      	sub	sp, #12
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80046a0:	bf00      	nop
 80046a2:	370c      	adds	r7, #12
 80046a4:	46bd      	mov	sp, r7
 80046a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046aa:	4770      	bx	lr

080046ac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b083      	sub	sp, #12
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	460b      	mov	r3, r1
 80046b6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80046b8:	bf00      	nop
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr

080046c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80046c4:	b480      	push	{r7}
 80046c6:	b083      	sub	sp, #12
 80046c8:	af00      	add	r7, sp, #0
 80046ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80046da:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	695a      	ldr	r2, [r3, #20]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f022 0201 	bic.w	r2, r2, #1
 80046ea:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046f0:	2b01      	cmp	r3, #1
 80046f2:	d107      	bne.n	8004704 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68da      	ldr	r2, [r3, #12]
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f022 0210 	bic.w	r2, r2, #16
 8004702:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004712:	bf00      	nop
 8004714:	370c      	adds	r7, #12
 8004716:	46bd      	mov	sp, r7
 8004718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471c:	4770      	bx	lr

0800471e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800471e:	b580      	push	{r7, lr}
 8004720:	b084      	sub	sp, #16
 8004722:	af00      	add	r7, sp, #0
 8004724:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800472a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2200      	movs	r2, #0
 8004730:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004738:	68f8      	ldr	r0, [r7, #12]
 800473a:	f7ff ffad 	bl	8004698 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800473e:	bf00      	nop
 8004740:	3710      	adds	r7, #16
 8004742:	46bd      	mov	sp, r7
 8004744:	bd80      	pop	{r7, pc}

08004746 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004746:	b480      	push	{r7}
 8004748:	b085      	sub	sp, #20
 800474a:	af00      	add	r7, sp, #0
 800474c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004754:	b2db      	uxtb	r3, r3
 8004756:	2b21      	cmp	r3, #33	; 0x21
 8004758:	d13e      	bne.n	80047d8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	689b      	ldr	r3, [r3, #8]
 800475e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004762:	d114      	bne.n	800478e <UART_Transmit_IT+0x48>
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	691b      	ldr	r3, [r3, #16]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d110      	bne.n	800478e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6a1b      	ldr	r3, [r3, #32]
 8004770:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	881b      	ldrh	r3, [r3, #0]
 8004776:	461a      	mov	r2, r3
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004780:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6a1b      	ldr	r3, [r3, #32]
 8004786:	1c9a      	adds	r2, r3, #2
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	621a      	str	r2, [r3, #32]
 800478c:	e008      	b.n	80047a0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	6a1b      	ldr	r3, [r3, #32]
 8004792:	1c59      	adds	r1, r3, #1
 8004794:	687a      	ldr	r2, [r7, #4]
 8004796:	6211      	str	r1, [r2, #32]
 8004798:	781a      	ldrb	r2, [r3, #0]
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80047a4:	b29b      	uxth	r3, r3
 80047a6:	3b01      	subs	r3, #1
 80047a8:	b29b      	uxth	r3, r3
 80047aa:	687a      	ldr	r2, [r7, #4]
 80047ac:	4619      	mov	r1, r3
 80047ae:	84d1      	strh	r1, [r2, #38]	; 0x26
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10f      	bne.n	80047d4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	68da      	ldr	r2, [r3, #12]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80047c2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80047d2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80047d4:	2300      	movs	r3, #0
 80047d6:	e000      	b.n	80047da <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80047d8:	2302      	movs	r3, #2
  }
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3714      	adds	r7, #20
 80047de:	46bd      	mov	sp, r7
 80047e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e4:	4770      	bx	lr

080047e6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80047e6:	b580      	push	{r7, lr}
 80047e8:	b082      	sub	sp, #8
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	68da      	ldr	r2, [r3, #12]
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80047fc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2220      	movs	r2, #32
 8004802:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f7ff ff32 	bl	8004670 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800480c:	2300      	movs	r3, #0
}
 800480e:	4618      	mov	r0, r3
 8004810:	3708      	adds	r7, #8
 8004812:	46bd      	mov	sp, r7
 8004814:	bd80      	pop	{r7, pc}

08004816 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b22      	cmp	r3, #34	; 0x22
 8004828:	f040 8087 	bne.w	800493a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004834:	d117      	bne.n	8004866 <UART_Receive_IT+0x50>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d113      	bne.n	8004866 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800483e:	2300      	movs	r3, #0
 8004840:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004846:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	685b      	ldr	r3, [r3, #4]
 800484e:	b29b      	uxth	r3, r3
 8004850:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004854:	b29a      	uxth	r2, r3
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800485e:	1c9a      	adds	r2, r3, #2
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	629a      	str	r2, [r3, #40]	; 0x28
 8004864:	e026      	b.n	80048b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800486a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 800486c:	2300      	movs	r3, #0
 800486e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	689b      	ldr	r3, [r3, #8]
 8004874:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004878:	d007      	beq.n	800488a <UART_Receive_IT+0x74>
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	689b      	ldr	r3, [r3, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d10a      	bne.n	8004898 <UART_Receive_IT+0x82>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	691b      	ldr	r3, [r3, #16]
 8004886:	2b00      	cmp	r3, #0
 8004888:	d106      	bne.n	8004898 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	685b      	ldr	r3, [r3, #4]
 8004890:	b2da      	uxtb	r2, r3
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	701a      	strb	r2, [r3, #0]
 8004896:	e008      	b.n	80048aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	b2db      	uxtb	r3, r3
 80048a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80048a4:	b2da      	uxtb	r2, r3
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ae:	1c5a      	adds	r2, r3, #1
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80048b8:	b29b      	uxth	r3, r3
 80048ba:	3b01      	subs	r3, #1
 80048bc:	b29b      	uxth	r3, r3
 80048be:	687a      	ldr	r2, [r7, #4]
 80048c0:	4619      	mov	r1, r3
 80048c2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d136      	bne.n	8004936 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	68da      	ldr	r2, [r3, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0220 	bic.w	r2, r2, #32
 80048d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80048e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	695a      	ldr	r2, [r3, #20]
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f022 0201 	bic.w	r2, r2, #1
 80048f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004904:	2b01      	cmp	r3, #1
 8004906:	d10e      	bne.n	8004926 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	68da      	ldr	r2, [r3, #12]
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f022 0210 	bic.w	r2, r2, #16
 8004916:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800491c:	4619      	mov	r1, r3
 800491e:	6878      	ldr	r0, [r7, #4]
 8004920:	f7ff fec4 	bl	80046ac <HAL_UARTEx_RxEventCallback>
 8004924:	e002      	b.n	800492c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff feac 	bl	8004684 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2200      	movs	r2, #0
 8004930:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8004932:	2300      	movs	r3, #0
 8004934:	e002      	b.n	800493c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8004936:	2300      	movs	r3, #0
 8004938:	e000      	b.n	800493c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800493a:	2302      	movs	r3, #2
  }
}
 800493c:	4618      	mov	r0, r3
 800493e:	3710      	adds	r7, #16
 8004940:	46bd      	mov	sp, r7
 8004942:	bd80      	pop	{r7, pc}

08004944 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004944:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004948:	b09f      	sub	sp, #124	; 0x7c
 800494a:	af00      	add	r7, sp, #0
 800494c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004958:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495a:	68d9      	ldr	r1, [r3, #12]
 800495c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495e:	681a      	ldr	r2, [r3, #0]
 8004960:	ea40 0301 	orr.w	r3, r0, r1
 8004964:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004966:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004968:	689a      	ldr	r2, [r3, #8]
 800496a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800496c:	691b      	ldr	r3, [r3, #16]
 800496e:	431a      	orrs	r2, r3
 8004970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004972:	695b      	ldr	r3, [r3, #20]
 8004974:	431a      	orrs	r2, r3
 8004976:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	4313      	orrs	r3, r2
 800497c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800497e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004988:	f021 010c 	bic.w	r1, r1, #12
 800498c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004992:	430b      	orrs	r3, r1
 8004994:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004996:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	695b      	ldr	r3, [r3, #20]
 800499c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80049a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a2:	6999      	ldr	r1, [r3, #24]
 80049a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	ea40 0301 	orr.w	r3, r0, r1
 80049ac:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	4bc5      	ldr	r3, [pc, #788]	; (8004cc8 <UART_SetConfig+0x384>)
 80049b4:	429a      	cmp	r2, r3
 80049b6:	d004      	beq.n	80049c2 <UART_SetConfig+0x7e>
 80049b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049ba:	681a      	ldr	r2, [r3, #0]
 80049bc:	4bc3      	ldr	r3, [pc, #780]	; (8004ccc <UART_SetConfig+0x388>)
 80049be:	429a      	cmp	r2, r3
 80049c0:	d103      	bne.n	80049ca <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049c2:	f7fd fbe7 	bl	8002194 <HAL_RCC_GetPCLK2Freq>
 80049c6:	6778      	str	r0, [r7, #116]	; 0x74
 80049c8:	e002      	b.n	80049d0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049ca:	f7fd fbcf 	bl	800216c <HAL_RCC_GetPCLK1Freq>
 80049ce:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049d8:	f040 80b6 	bne.w	8004b48 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049de:	461c      	mov	r4, r3
 80049e0:	f04f 0500 	mov.w	r5, #0
 80049e4:	4622      	mov	r2, r4
 80049e6:	462b      	mov	r3, r5
 80049e8:	1891      	adds	r1, r2, r2
 80049ea:	6439      	str	r1, [r7, #64]	; 0x40
 80049ec:	415b      	adcs	r3, r3
 80049ee:	647b      	str	r3, [r7, #68]	; 0x44
 80049f0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049f4:	1912      	adds	r2, r2, r4
 80049f6:	eb45 0303 	adc.w	r3, r5, r3
 80049fa:	f04f 0000 	mov.w	r0, #0
 80049fe:	f04f 0100 	mov.w	r1, #0
 8004a02:	00d9      	lsls	r1, r3, #3
 8004a04:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a08:	00d0      	lsls	r0, r2, #3
 8004a0a:	4602      	mov	r2, r0
 8004a0c:	460b      	mov	r3, r1
 8004a0e:	1911      	adds	r1, r2, r4
 8004a10:	6639      	str	r1, [r7, #96]	; 0x60
 8004a12:	416b      	adcs	r3, r5
 8004a14:	667b      	str	r3, [r7, #100]	; 0x64
 8004a16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	f04f 0300 	mov.w	r3, #0
 8004a20:	1891      	adds	r1, r2, r2
 8004a22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004a24:	415b      	adcs	r3, r3
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004a2c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8004a30:	f7fb fc46 	bl	80002c0 <__aeabi_uldivmod>
 8004a34:	4602      	mov	r2, r0
 8004a36:	460b      	mov	r3, r1
 8004a38:	4ba5      	ldr	r3, [pc, #660]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004a3a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a3e:	095b      	lsrs	r3, r3, #5
 8004a40:	011e      	lsls	r6, r3, #4
 8004a42:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004a44:	461c      	mov	r4, r3
 8004a46:	f04f 0500 	mov.w	r5, #0
 8004a4a:	4622      	mov	r2, r4
 8004a4c:	462b      	mov	r3, r5
 8004a4e:	1891      	adds	r1, r2, r2
 8004a50:	6339      	str	r1, [r7, #48]	; 0x30
 8004a52:	415b      	adcs	r3, r3
 8004a54:	637b      	str	r3, [r7, #52]	; 0x34
 8004a56:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004a5a:	1912      	adds	r2, r2, r4
 8004a5c:	eb45 0303 	adc.w	r3, r5, r3
 8004a60:	f04f 0000 	mov.w	r0, #0
 8004a64:	f04f 0100 	mov.w	r1, #0
 8004a68:	00d9      	lsls	r1, r3, #3
 8004a6a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a6e:	00d0      	lsls	r0, r2, #3
 8004a70:	4602      	mov	r2, r0
 8004a72:	460b      	mov	r3, r1
 8004a74:	1911      	adds	r1, r2, r4
 8004a76:	65b9      	str	r1, [r7, #88]	; 0x58
 8004a78:	416b      	adcs	r3, r5
 8004a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	461a      	mov	r2, r3
 8004a82:	f04f 0300 	mov.w	r3, #0
 8004a86:	1891      	adds	r1, r2, r2
 8004a88:	62b9      	str	r1, [r7, #40]	; 0x28
 8004a8a:	415b      	adcs	r3, r3
 8004a8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004a92:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8004a96:	f7fb fc13 	bl	80002c0 <__aeabi_uldivmod>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	4b8c      	ldr	r3, [pc, #560]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004aa0:	fba3 1302 	umull	r1, r3, r3, r2
 8004aa4:	095b      	lsrs	r3, r3, #5
 8004aa6:	2164      	movs	r1, #100	; 0x64
 8004aa8:	fb01 f303 	mul.w	r3, r1, r3
 8004aac:	1ad3      	subs	r3, r2, r3
 8004aae:	00db      	lsls	r3, r3, #3
 8004ab0:	3332      	adds	r3, #50	; 0x32
 8004ab2:	4a87      	ldr	r2, [pc, #540]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004ab4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ab8:	095b      	lsrs	r3, r3, #5
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ac0:	441e      	add	r6, r3
 8004ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	f04f 0100 	mov.w	r1, #0
 8004aca:	4602      	mov	r2, r0
 8004acc:	460b      	mov	r3, r1
 8004ace:	1894      	adds	r4, r2, r2
 8004ad0:	623c      	str	r4, [r7, #32]
 8004ad2:	415b      	adcs	r3, r3
 8004ad4:	627b      	str	r3, [r7, #36]	; 0x24
 8004ad6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004ada:	1812      	adds	r2, r2, r0
 8004adc:	eb41 0303 	adc.w	r3, r1, r3
 8004ae0:	f04f 0400 	mov.w	r4, #0
 8004ae4:	f04f 0500 	mov.w	r5, #0
 8004ae8:	00dd      	lsls	r5, r3, #3
 8004aea:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004aee:	00d4      	lsls	r4, r2, #3
 8004af0:	4622      	mov	r2, r4
 8004af2:	462b      	mov	r3, r5
 8004af4:	1814      	adds	r4, r2, r0
 8004af6:	653c      	str	r4, [r7, #80]	; 0x50
 8004af8:	414b      	adcs	r3, r1
 8004afa:	657b      	str	r3, [r7, #84]	; 0x54
 8004afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	461a      	mov	r2, r3
 8004b02:	f04f 0300 	mov.w	r3, #0
 8004b06:	1891      	adds	r1, r2, r2
 8004b08:	61b9      	str	r1, [r7, #24]
 8004b0a:	415b      	adcs	r3, r3
 8004b0c:	61fb      	str	r3, [r7, #28]
 8004b0e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004b12:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8004b16:	f7fb fbd3 	bl	80002c0 <__aeabi_uldivmod>
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	4b6c      	ldr	r3, [pc, #432]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004b20:	fba3 1302 	umull	r1, r3, r3, r2
 8004b24:	095b      	lsrs	r3, r3, #5
 8004b26:	2164      	movs	r1, #100	; 0x64
 8004b28:	fb01 f303 	mul.w	r3, r1, r3
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	00db      	lsls	r3, r3, #3
 8004b30:	3332      	adds	r3, #50	; 0x32
 8004b32:	4a67      	ldr	r2, [pc, #412]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004b34:	fba2 2303 	umull	r2, r3, r2, r3
 8004b38:	095b      	lsrs	r3, r3, #5
 8004b3a:	f003 0207 	and.w	r2, r3, #7
 8004b3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	4432      	add	r2, r6
 8004b44:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b46:	e0b9      	b.n	8004cbc <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b4a:	461c      	mov	r4, r3
 8004b4c:	f04f 0500 	mov.w	r5, #0
 8004b50:	4622      	mov	r2, r4
 8004b52:	462b      	mov	r3, r5
 8004b54:	1891      	adds	r1, r2, r2
 8004b56:	6139      	str	r1, [r7, #16]
 8004b58:	415b      	adcs	r3, r3
 8004b5a:	617b      	str	r3, [r7, #20]
 8004b5c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004b60:	1912      	adds	r2, r2, r4
 8004b62:	eb45 0303 	adc.w	r3, r5, r3
 8004b66:	f04f 0000 	mov.w	r0, #0
 8004b6a:	f04f 0100 	mov.w	r1, #0
 8004b6e:	00d9      	lsls	r1, r3, #3
 8004b70:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004b74:	00d0      	lsls	r0, r2, #3
 8004b76:	4602      	mov	r2, r0
 8004b78:	460b      	mov	r3, r1
 8004b7a:	eb12 0804 	adds.w	r8, r2, r4
 8004b7e:	eb43 0905 	adc.w	r9, r3, r5
 8004b82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004b84:	685b      	ldr	r3, [r3, #4]
 8004b86:	4618      	mov	r0, r3
 8004b88:	f04f 0100 	mov.w	r1, #0
 8004b8c:	f04f 0200 	mov.w	r2, #0
 8004b90:	f04f 0300 	mov.w	r3, #0
 8004b94:	008b      	lsls	r3, r1, #2
 8004b96:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004b9a:	0082      	lsls	r2, r0, #2
 8004b9c:	4640      	mov	r0, r8
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	f7fb fb8e 	bl	80002c0 <__aeabi_uldivmod>
 8004ba4:	4602      	mov	r2, r0
 8004ba6:	460b      	mov	r3, r1
 8004ba8:	4b49      	ldr	r3, [pc, #292]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004baa:	fba3 2302 	umull	r2, r3, r3, r2
 8004bae:	095b      	lsrs	r3, r3, #5
 8004bb0:	011e      	lsls	r6, r3, #4
 8004bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	f04f 0100 	mov.w	r1, #0
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	1894      	adds	r4, r2, r2
 8004bc0:	60bc      	str	r4, [r7, #8]
 8004bc2:	415b      	adcs	r3, r3
 8004bc4:	60fb      	str	r3, [r7, #12]
 8004bc6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004bca:	1812      	adds	r2, r2, r0
 8004bcc:	eb41 0303 	adc.w	r3, r1, r3
 8004bd0:	f04f 0400 	mov.w	r4, #0
 8004bd4:	f04f 0500 	mov.w	r5, #0
 8004bd8:	00dd      	lsls	r5, r3, #3
 8004bda:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004bde:	00d4      	lsls	r4, r2, #3
 8004be0:	4622      	mov	r2, r4
 8004be2:	462b      	mov	r3, r5
 8004be4:	1814      	adds	r4, r2, r0
 8004be6:	64bc      	str	r4, [r7, #72]	; 0x48
 8004be8:	414b      	adcs	r3, r1
 8004bea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004bee:	685b      	ldr	r3, [r3, #4]
 8004bf0:	4618      	mov	r0, r3
 8004bf2:	f04f 0100 	mov.w	r1, #0
 8004bf6:	f04f 0200 	mov.w	r2, #0
 8004bfa:	f04f 0300 	mov.w	r3, #0
 8004bfe:	008b      	lsls	r3, r1, #2
 8004c00:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c04:	0082      	lsls	r2, r0, #2
 8004c06:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c0a:	f7fb fb59 	bl	80002c0 <__aeabi_uldivmod>
 8004c0e:	4602      	mov	r2, r0
 8004c10:	460b      	mov	r3, r1
 8004c12:	4b2f      	ldr	r3, [pc, #188]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004c14:	fba3 1302 	umull	r1, r3, r3, r2
 8004c18:	095b      	lsrs	r3, r3, #5
 8004c1a:	2164      	movs	r1, #100	; 0x64
 8004c1c:	fb01 f303 	mul.w	r3, r1, r3
 8004c20:	1ad3      	subs	r3, r2, r3
 8004c22:	011b      	lsls	r3, r3, #4
 8004c24:	3332      	adds	r3, #50	; 0x32
 8004c26:	4a2a      	ldr	r2, [pc, #168]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004c28:	fba2 2303 	umull	r2, r3, r2, r3
 8004c2c:	095b      	lsrs	r3, r3, #5
 8004c2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004c32:	441e      	add	r6, r3
 8004c34:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004c36:	4618      	mov	r0, r3
 8004c38:	f04f 0100 	mov.w	r1, #0
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	460b      	mov	r3, r1
 8004c40:	1894      	adds	r4, r2, r2
 8004c42:	603c      	str	r4, [r7, #0]
 8004c44:	415b      	adcs	r3, r3
 8004c46:	607b      	str	r3, [r7, #4]
 8004c48:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004c4c:	1812      	adds	r2, r2, r0
 8004c4e:	eb41 0303 	adc.w	r3, r1, r3
 8004c52:	f04f 0400 	mov.w	r4, #0
 8004c56:	f04f 0500 	mov.w	r5, #0
 8004c5a:	00dd      	lsls	r5, r3, #3
 8004c5c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c60:	00d4      	lsls	r4, r2, #3
 8004c62:	4622      	mov	r2, r4
 8004c64:	462b      	mov	r3, r5
 8004c66:	eb12 0a00 	adds.w	sl, r2, r0
 8004c6a:	eb43 0b01 	adc.w	fp, r3, r1
 8004c6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c70:	685b      	ldr	r3, [r3, #4]
 8004c72:	4618      	mov	r0, r3
 8004c74:	f04f 0100 	mov.w	r1, #0
 8004c78:	f04f 0200 	mov.w	r2, #0
 8004c7c:	f04f 0300 	mov.w	r3, #0
 8004c80:	008b      	lsls	r3, r1, #2
 8004c82:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004c86:	0082      	lsls	r2, r0, #2
 8004c88:	4650      	mov	r0, sl
 8004c8a:	4659      	mov	r1, fp
 8004c8c:	f7fb fb18 	bl	80002c0 <__aeabi_uldivmod>
 8004c90:	4602      	mov	r2, r0
 8004c92:	460b      	mov	r3, r1
 8004c94:	4b0e      	ldr	r3, [pc, #56]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004c96:	fba3 1302 	umull	r1, r3, r3, r2
 8004c9a:	095b      	lsrs	r3, r3, #5
 8004c9c:	2164      	movs	r1, #100	; 0x64
 8004c9e:	fb01 f303 	mul.w	r3, r1, r3
 8004ca2:	1ad3      	subs	r3, r2, r3
 8004ca4:	011b      	lsls	r3, r3, #4
 8004ca6:	3332      	adds	r3, #50	; 0x32
 8004ca8:	4a09      	ldr	r2, [pc, #36]	; (8004cd0 <UART_SetConfig+0x38c>)
 8004caa:	fba2 2303 	umull	r2, r3, r2, r3
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	f003 020f 	and.w	r2, r3, #15
 8004cb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	4432      	add	r2, r6
 8004cba:	609a      	str	r2, [r3, #8]
}
 8004cbc:	bf00      	nop
 8004cbe:	377c      	adds	r7, #124	; 0x7c
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cc6:	bf00      	nop
 8004cc8:	40011000 	.word	0x40011000
 8004ccc:	40011400 	.word	0x40011400
 8004cd0:	51eb851f 	.word	0x51eb851f

08004cd4 <__errno>:
 8004cd4:	4b01      	ldr	r3, [pc, #4]	; (8004cdc <__errno+0x8>)
 8004cd6:	6818      	ldr	r0, [r3, #0]
 8004cd8:	4770      	bx	lr
 8004cda:	bf00      	nop
 8004cdc:	20000014 	.word	0x20000014

08004ce0 <__libc_init_array>:
 8004ce0:	b570      	push	{r4, r5, r6, lr}
 8004ce2:	4d0d      	ldr	r5, [pc, #52]	; (8004d18 <__libc_init_array+0x38>)
 8004ce4:	4c0d      	ldr	r4, [pc, #52]	; (8004d1c <__libc_init_array+0x3c>)
 8004ce6:	1b64      	subs	r4, r4, r5
 8004ce8:	10a4      	asrs	r4, r4, #2
 8004cea:	2600      	movs	r6, #0
 8004cec:	42a6      	cmp	r6, r4
 8004cee:	d109      	bne.n	8004d04 <__libc_init_array+0x24>
 8004cf0:	4d0b      	ldr	r5, [pc, #44]	; (8004d20 <__libc_init_array+0x40>)
 8004cf2:	4c0c      	ldr	r4, [pc, #48]	; (8004d24 <__libc_init_array+0x44>)
 8004cf4:	f000 fc4e 	bl	8005594 <_init>
 8004cf8:	1b64      	subs	r4, r4, r5
 8004cfa:	10a4      	asrs	r4, r4, #2
 8004cfc:	2600      	movs	r6, #0
 8004cfe:	42a6      	cmp	r6, r4
 8004d00:	d105      	bne.n	8004d0e <__libc_init_array+0x2e>
 8004d02:	bd70      	pop	{r4, r5, r6, pc}
 8004d04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d08:	4798      	blx	r3
 8004d0a:	3601      	adds	r6, #1
 8004d0c:	e7ee      	b.n	8004cec <__libc_init_array+0xc>
 8004d0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d12:	4798      	blx	r3
 8004d14:	3601      	adds	r6, #1
 8004d16:	e7f2      	b.n	8004cfe <__libc_init_array+0x1e>
 8004d18:	08005620 	.word	0x08005620
 8004d1c:	08005620 	.word	0x08005620
 8004d20:	08005620 	.word	0x08005620
 8004d24:	08005624 	.word	0x08005624

08004d28 <memset>:
 8004d28:	4402      	add	r2, r0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d100      	bne.n	8004d32 <memset+0xa>
 8004d30:	4770      	bx	lr
 8004d32:	f803 1b01 	strb.w	r1, [r3], #1
 8004d36:	e7f9      	b.n	8004d2c <memset+0x4>

08004d38 <siprintf>:
 8004d38:	b40e      	push	{r1, r2, r3}
 8004d3a:	b500      	push	{lr}
 8004d3c:	b09c      	sub	sp, #112	; 0x70
 8004d3e:	ab1d      	add	r3, sp, #116	; 0x74
 8004d40:	9002      	str	r0, [sp, #8]
 8004d42:	9006      	str	r0, [sp, #24]
 8004d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004d48:	4809      	ldr	r0, [pc, #36]	; (8004d70 <siprintf+0x38>)
 8004d4a:	9107      	str	r1, [sp, #28]
 8004d4c:	9104      	str	r1, [sp, #16]
 8004d4e:	4909      	ldr	r1, [pc, #36]	; (8004d74 <siprintf+0x3c>)
 8004d50:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d54:	9105      	str	r1, [sp, #20]
 8004d56:	6800      	ldr	r0, [r0, #0]
 8004d58:	9301      	str	r3, [sp, #4]
 8004d5a:	a902      	add	r1, sp, #8
 8004d5c:	f000 f868 	bl	8004e30 <_svfiprintf_r>
 8004d60:	9b02      	ldr	r3, [sp, #8]
 8004d62:	2200      	movs	r2, #0
 8004d64:	701a      	strb	r2, [r3, #0]
 8004d66:	b01c      	add	sp, #112	; 0x70
 8004d68:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d6c:	b003      	add	sp, #12
 8004d6e:	4770      	bx	lr
 8004d70:	20000014 	.word	0x20000014
 8004d74:	ffff0208 	.word	0xffff0208

08004d78 <__ssputs_r>:
 8004d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d7c:	688e      	ldr	r6, [r1, #8]
 8004d7e:	429e      	cmp	r6, r3
 8004d80:	4682      	mov	sl, r0
 8004d82:	460c      	mov	r4, r1
 8004d84:	4690      	mov	r8, r2
 8004d86:	461f      	mov	r7, r3
 8004d88:	d838      	bhi.n	8004dfc <__ssputs_r+0x84>
 8004d8a:	898a      	ldrh	r2, [r1, #12]
 8004d8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d90:	d032      	beq.n	8004df8 <__ssputs_r+0x80>
 8004d92:	6825      	ldr	r5, [r4, #0]
 8004d94:	6909      	ldr	r1, [r1, #16]
 8004d96:	eba5 0901 	sub.w	r9, r5, r1
 8004d9a:	6965      	ldr	r5, [r4, #20]
 8004d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004da0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004da4:	3301      	adds	r3, #1
 8004da6:	444b      	add	r3, r9
 8004da8:	106d      	asrs	r5, r5, #1
 8004daa:	429d      	cmp	r5, r3
 8004dac:	bf38      	it	cc
 8004dae:	461d      	movcc	r5, r3
 8004db0:	0553      	lsls	r3, r2, #21
 8004db2:	d531      	bpl.n	8004e18 <__ssputs_r+0xa0>
 8004db4:	4629      	mov	r1, r5
 8004db6:	f000 fb47 	bl	8005448 <_malloc_r>
 8004dba:	4606      	mov	r6, r0
 8004dbc:	b950      	cbnz	r0, 8004dd4 <__ssputs_r+0x5c>
 8004dbe:	230c      	movs	r3, #12
 8004dc0:	f8ca 3000 	str.w	r3, [sl]
 8004dc4:	89a3      	ldrh	r3, [r4, #12]
 8004dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dca:	81a3      	strh	r3, [r4, #12]
 8004dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8004dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dd4:	6921      	ldr	r1, [r4, #16]
 8004dd6:	464a      	mov	r2, r9
 8004dd8:	f000 fabe 	bl	8005358 <memcpy>
 8004ddc:	89a3      	ldrh	r3, [r4, #12]
 8004dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004de6:	81a3      	strh	r3, [r4, #12]
 8004de8:	6126      	str	r6, [r4, #16]
 8004dea:	6165      	str	r5, [r4, #20]
 8004dec:	444e      	add	r6, r9
 8004dee:	eba5 0509 	sub.w	r5, r5, r9
 8004df2:	6026      	str	r6, [r4, #0]
 8004df4:	60a5      	str	r5, [r4, #8]
 8004df6:	463e      	mov	r6, r7
 8004df8:	42be      	cmp	r6, r7
 8004dfa:	d900      	bls.n	8004dfe <__ssputs_r+0x86>
 8004dfc:	463e      	mov	r6, r7
 8004dfe:	4632      	mov	r2, r6
 8004e00:	6820      	ldr	r0, [r4, #0]
 8004e02:	4641      	mov	r1, r8
 8004e04:	f000 fab6 	bl	8005374 <memmove>
 8004e08:	68a3      	ldr	r3, [r4, #8]
 8004e0a:	6822      	ldr	r2, [r4, #0]
 8004e0c:	1b9b      	subs	r3, r3, r6
 8004e0e:	4432      	add	r2, r6
 8004e10:	60a3      	str	r3, [r4, #8]
 8004e12:	6022      	str	r2, [r4, #0]
 8004e14:	2000      	movs	r0, #0
 8004e16:	e7db      	b.n	8004dd0 <__ssputs_r+0x58>
 8004e18:	462a      	mov	r2, r5
 8004e1a:	f000 fb6f 	bl	80054fc <_realloc_r>
 8004e1e:	4606      	mov	r6, r0
 8004e20:	2800      	cmp	r0, #0
 8004e22:	d1e1      	bne.n	8004de8 <__ssputs_r+0x70>
 8004e24:	6921      	ldr	r1, [r4, #16]
 8004e26:	4650      	mov	r0, sl
 8004e28:	f000 fabe 	bl	80053a8 <_free_r>
 8004e2c:	e7c7      	b.n	8004dbe <__ssputs_r+0x46>
	...

08004e30 <_svfiprintf_r>:
 8004e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e34:	4698      	mov	r8, r3
 8004e36:	898b      	ldrh	r3, [r1, #12]
 8004e38:	061b      	lsls	r3, r3, #24
 8004e3a:	b09d      	sub	sp, #116	; 0x74
 8004e3c:	4607      	mov	r7, r0
 8004e3e:	460d      	mov	r5, r1
 8004e40:	4614      	mov	r4, r2
 8004e42:	d50e      	bpl.n	8004e62 <_svfiprintf_r+0x32>
 8004e44:	690b      	ldr	r3, [r1, #16]
 8004e46:	b963      	cbnz	r3, 8004e62 <_svfiprintf_r+0x32>
 8004e48:	2140      	movs	r1, #64	; 0x40
 8004e4a:	f000 fafd 	bl	8005448 <_malloc_r>
 8004e4e:	6028      	str	r0, [r5, #0]
 8004e50:	6128      	str	r0, [r5, #16]
 8004e52:	b920      	cbnz	r0, 8004e5e <_svfiprintf_r+0x2e>
 8004e54:	230c      	movs	r3, #12
 8004e56:	603b      	str	r3, [r7, #0]
 8004e58:	f04f 30ff 	mov.w	r0, #4294967295
 8004e5c:	e0d1      	b.n	8005002 <_svfiprintf_r+0x1d2>
 8004e5e:	2340      	movs	r3, #64	; 0x40
 8004e60:	616b      	str	r3, [r5, #20]
 8004e62:	2300      	movs	r3, #0
 8004e64:	9309      	str	r3, [sp, #36]	; 0x24
 8004e66:	2320      	movs	r3, #32
 8004e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e70:	2330      	movs	r3, #48	; 0x30
 8004e72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800501c <_svfiprintf_r+0x1ec>
 8004e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e7a:	f04f 0901 	mov.w	r9, #1
 8004e7e:	4623      	mov	r3, r4
 8004e80:	469a      	mov	sl, r3
 8004e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e86:	b10a      	cbz	r2, 8004e8c <_svfiprintf_r+0x5c>
 8004e88:	2a25      	cmp	r2, #37	; 0x25
 8004e8a:	d1f9      	bne.n	8004e80 <_svfiprintf_r+0x50>
 8004e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8004e90:	d00b      	beq.n	8004eaa <_svfiprintf_r+0x7a>
 8004e92:	465b      	mov	r3, fp
 8004e94:	4622      	mov	r2, r4
 8004e96:	4629      	mov	r1, r5
 8004e98:	4638      	mov	r0, r7
 8004e9a:	f7ff ff6d 	bl	8004d78 <__ssputs_r>
 8004e9e:	3001      	adds	r0, #1
 8004ea0:	f000 80aa 	beq.w	8004ff8 <_svfiprintf_r+0x1c8>
 8004ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ea6:	445a      	add	r2, fp
 8004ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8004eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	f000 80a2 	beq.w	8004ff8 <_svfiprintf_r+0x1c8>
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8004eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ebe:	f10a 0a01 	add.w	sl, sl, #1
 8004ec2:	9304      	str	r3, [sp, #16]
 8004ec4:	9307      	str	r3, [sp, #28]
 8004ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004eca:	931a      	str	r3, [sp, #104]	; 0x68
 8004ecc:	4654      	mov	r4, sl
 8004ece:	2205      	movs	r2, #5
 8004ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ed4:	4851      	ldr	r0, [pc, #324]	; (800501c <_svfiprintf_r+0x1ec>)
 8004ed6:	f7fb f9a3 	bl	8000220 <memchr>
 8004eda:	9a04      	ldr	r2, [sp, #16]
 8004edc:	b9d8      	cbnz	r0, 8004f16 <_svfiprintf_r+0xe6>
 8004ede:	06d0      	lsls	r0, r2, #27
 8004ee0:	bf44      	itt	mi
 8004ee2:	2320      	movmi	r3, #32
 8004ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ee8:	0711      	lsls	r1, r2, #28
 8004eea:	bf44      	itt	mi
 8004eec:	232b      	movmi	r3, #43	; 0x2b
 8004eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8004ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8004ef8:	d015      	beq.n	8004f26 <_svfiprintf_r+0xf6>
 8004efa:	9a07      	ldr	r2, [sp, #28]
 8004efc:	4654      	mov	r4, sl
 8004efe:	2000      	movs	r0, #0
 8004f00:	f04f 0c0a 	mov.w	ip, #10
 8004f04:	4621      	mov	r1, r4
 8004f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f0a:	3b30      	subs	r3, #48	; 0x30
 8004f0c:	2b09      	cmp	r3, #9
 8004f0e:	d94e      	bls.n	8004fae <_svfiprintf_r+0x17e>
 8004f10:	b1b0      	cbz	r0, 8004f40 <_svfiprintf_r+0x110>
 8004f12:	9207      	str	r2, [sp, #28]
 8004f14:	e014      	b.n	8004f40 <_svfiprintf_r+0x110>
 8004f16:	eba0 0308 	sub.w	r3, r0, r8
 8004f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	9304      	str	r3, [sp, #16]
 8004f22:	46a2      	mov	sl, r4
 8004f24:	e7d2      	b.n	8004ecc <_svfiprintf_r+0x9c>
 8004f26:	9b03      	ldr	r3, [sp, #12]
 8004f28:	1d19      	adds	r1, r3, #4
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	9103      	str	r1, [sp, #12]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bfbb      	ittet	lt
 8004f32:	425b      	neglt	r3, r3
 8004f34:	f042 0202 	orrlt.w	r2, r2, #2
 8004f38:	9307      	strge	r3, [sp, #28]
 8004f3a:	9307      	strlt	r3, [sp, #28]
 8004f3c:	bfb8      	it	lt
 8004f3e:	9204      	strlt	r2, [sp, #16]
 8004f40:	7823      	ldrb	r3, [r4, #0]
 8004f42:	2b2e      	cmp	r3, #46	; 0x2e
 8004f44:	d10c      	bne.n	8004f60 <_svfiprintf_r+0x130>
 8004f46:	7863      	ldrb	r3, [r4, #1]
 8004f48:	2b2a      	cmp	r3, #42	; 0x2a
 8004f4a:	d135      	bne.n	8004fb8 <_svfiprintf_r+0x188>
 8004f4c:	9b03      	ldr	r3, [sp, #12]
 8004f4e:	1d1a      	adds	r2, r3, #4
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	9203      	str	r2, [sp, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	bfb8      	it	lt
 8004f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f5c:	3402      	adds	r4, #2
 8004f5e:	9305      	str	r3, [sp, #20]
 8004f60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800502c <_svfiprintf_r+0x1fc>
 8004f64:	7821      	ldrb	r1, [r4, #0]
 8004f66:	2203      	movs	r2, #3
 8004f68:	4650      	mov	r0, sl
 8004f6a:	f7fb f959 	bl	8000220 <memchr>
 8004f6e:	b140      	cbz	r0, 8004f82 <_svfiprintf_r+0x152>
 8004f70:	2340      	movs	r3, #64	; 0x40
 8004f72:	eba0 000a 	sub.w	r0, r0, sl
 8004f76:	fa03 f000 	lsl.w	r0, r3, r0
 8004f7a:	9b04      	ldr	r3, [sp, #16]
 8004f7c:	4303      	orrs	r3, r0
 8004f7e:	3401      	adds	r4, #1
 8004f80:	9304      	str	r3, [sp, #16]
 8004f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f86:	4826      	ldr	r0, [pc, #152]	; (8005020 <_svfiprintf_r+0x1f0>)
 8004f88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f8c:	2206      	movs	r2, #6
 8004f8e:	f7fb f947 	bl	8000220 <memchr>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	d038      	beq.n	8005008 <_svfiprintf_r+0x1d8>
 8004f96:	4b23      	ldr	r3, [pc, #140]	; (8005024 <_svfiprintf_r+0x1f4>)
 8004f98:	bb1b      	cbnz	r3, 8004fe2 <_svfiprintf_r+0x1b2>
 8004f9a:	9b03      	ldr	r3, [sp, #12]
 8004f9c:	3307      	adds	r3, #7
 8004f9e:	f023 0307 	bic.w	r3, r3, #7
 8004fa2:	3308      	adds	r3, #8
 8004fa4:	9303      	str	r3, [sp, #12]
 8004fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004fa8:	4433      	add	r3, r6
 8004faa:	9309      	str	r3, [sp, #36]	; 0x24
 8004fac:	e767      	b.n	8004e7e <_svfiprintf_r+0x4e>
 8004fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fb2:	460c      	mov	r4, r1
 8004fb4:	2001      	movs	r0, #1
 8004fb6:	e7a5      	b.n	8004f04 <_svfiprintf_r+0xd4>
 8004fb8:	2300      	movs	r3, #0
 8004fba:	3401      	adds	r4, #1
 8004fbc:	9305      	str	r3, [sp, #20]
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	f04f 0c0a 	mov.w	ip, #10
 8004fc4:	4620      	mov	r0, r4
 8004fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fca:	3a30      	subs	r2, #48	; 0x30
 8004fcc:	2a09      	cmp	r2, #9
 8004fce:	d903      	bls.n	8004fd8 <_svfiprintf_r+0x1a8>
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d0c5      	beq.n	8004f60 <_svfiprintf_r+0x130>
 8004fd4:	9105      	str	r1, [sp, #20]
 8004fd6:	e7c3      	b.n	8004f60 <_svfiprintf_r+0x130>
 8004fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fdc:	4604      	mov	r4, r0
 8004fde:	2301      	movs	r3, #1
 8004fe0:	e7f0      	b.n	8004fc4 <_svfiprintf_r+0x194>
 8004fe2:	ab03      	add	r3, sp, #12
 8004fe4:	9300      	str	r3, [sp, #0]
 8004fe6:	462a      	mov	r2, r5
 8004fe8:	4b0f      	ldr	r3, [pc, #60]	; (8005028 <_svfiprintf_r+0x1f8>)
 8004fea:	a904      	add	r1, sp, #16
 8004fec:	4638      	mov	r0, r7
 8004fee:	f3af 8000 	nop.w
 8004ff2:	1c42      	adds	r2, r0, #1
 8004ff4:	4606      	mov	r6, r0
 8004ff6:	d1d6      	bne.n	8004fa6 <_svfiprintf_r+0x176>
 8004ff8:	89ab      	ldrh	r3, [r5, #12]
 8004ffa:	065b      	lsls	r3, r3, #25
 8004ffc:	f53f af2c 	bmi.w	8004e58 <_svfiprintf_r+0x28>
 8005000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005002:	b01d      	add	sp, #116	; 0x74
 8005004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005008:	ab03      	add	r3, sp, #12
 800500a:	9300      	str	r3, [sp, #0]
 800500c:	462a      	mov	r2, r5
 800500e:	4b06      	ldr	r3, [pc, #24]	; (8005028 <_svfiprintf_r+0x1f8>)
 8005010:	a904      	add	r1, sp, #16
 8005012:	4638      	mov	r0, r7
 8005014:	f000 f87a 	bl	800510c <_printf_i>
 8005018:	e7eb      	b.n	8004ff2 <_svfiprintf_r+0x1c2>
 800501a:	bf00      	nop
 800501c:	080055e4 	.word	0x080055e4
 8005020:	080055ee 	.word	0x080055ee
 8005024:	00000000 	.word	0x00000000
 8005028:	08004d79 	.word	0x08004d79
 800502c:	080055ea 	.word	0x080055ea

08005030 <_printf_common>:
 8005030:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005034:	4616      	mov	r6, r2
 8005036:	4699      	mov	r9, r3
 8005038:	688a      	ldr	r2, [r1, #8]
 800503a:	690b      	ldr	r3, [r1, #16]
 800503c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005040:	4293      	cmp	r3, r2
 8005042:	bfb8      	it	lt
 8005044:	4613      	movlt	r3, r2
 8005046:	6033      	str	r3, [r6, #0]
 8005048:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800504c:	4607      	mov	r7, r0
 800504e:	460c      	mov	r4, r1
 8005050:	b10a      	cbz	r2, 8005056 <_printf_common+0x26>
 8005052:	3301      	adds	r3, #1
 8005054:	6033      	str	r3, [r6, #0]
 8005056:	6823      	ldr	r3, [r4, #0]
 8005058:	0699      	lsls	r1, r3, #26
 800505a:	bf42      	ittt	mi
 800505c:	6833      	ldrmi	r3, [r6, #0]
 800505e:	3302      	addmi	r3, #2
 8005060:	6033      	strmi	r3, [r6, #0]
 8005062:	6825      	ldr	r5, [r4, #0]
 8005064:	f015 0506 	ands.w	r5, r5, #6
 8005068:	d106      	bne.n	8005078 <_printf_common+0x48>
 800506a:	f104 0a19 	add.w	sl, r4, #25
 800506e:	68e3      	ldr	r3, [r4, #12]
 8005070:	6832      	ldr	r2, [r6, #0]
 8005072:	1a9b      	subs	r3, r3, r2
 8005074:	42ab      	cmp	r3, r5
 8005076:	dc26      	bgt.n	80050c6 <_printf_common+0x96>
 8005078:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800507c:	1e13      	subs	r3, r2, #0
 800507e:	6822      	ldr	r2, [r4, #0]
 8005080:	bf18      	it	ne
 8005082:	2301      	movne	r3, #1
 8005084:	0692      	lsls	r2, r2, #26
 8005086:	d42b      	bmi.n	80050e0 <_printf_common+0xb0>
 8005088:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800508c:	4649      	mov	r1, r9
 800508e:	4638      	mov	r0, r7
 8005090:	47c0      	blx	r8
 8005092:	3001      	adds	r0, #1
 8005094:	d01e      	beq.n	80050d4 <_printf_common+0xa4>
 8005096:	6823      	ldr	r3, [r4, #0]
 8005098:	68e5      	ldr	r5, [r4, #12]
 800509a:	6832      	ldr	r2, [r6, #0]
 800509c:	f003 0306 	and.w	r3, r3, #6
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	bf08      	it	eq
 80050a4:	1aad      	subeq	r5, r5, r2
 80050a6:	68a3      	ldr	r3, [r4, #8]
 80050a8:	6922      	ldr	r2, [r4, #16]
 80050aa:	bf0c      	ite	eq
 80050ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050b0:	2500      	movne	r5, #0
 80050b2:	4293      	cmp	r3, r2
 80050b4:	bfc4      	itt	gt
 80050b6:	1a9b      	subgt	r3, r3, r2
 80050b8:	18ed      	addgt	r5, r5, r3
 80050ba:	2600      	movs	r6, #0
 80050bc:	341a      	adds	r4, #26
 80050be:	42b5      	cmp	r5, r6
 80050c0:	d11a      	bne.n	80050f8 <_printf_common+0xc8>
 80050c2:	2000      	movs	r0, #0
 80050c4:	e008      	b.n	80050d8 <_printf_common+0xa8>
 80050c6:	2301      	movs	r3, #1
 80050c8:	4652      	mov	r2, sl
 80050ca:	4649      	mov	r1, r9
 80050cc:	4638      	mov	r0, r7
 80050ce:	47c0      	blx	r8
 80050d0:	3001      	adds	r0, #1
 80050d2:	d103      	bne.n	80050dc <_printf_common+0xac>
 80050d4:	f04f 30ff 	mov.w	r0, #4294967295
 80050d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050dc:	3501      	adds	r5, #1
 80050de:	e7c6      	b.n	800506e <_printf_common+0x3e>
 80050e0:	18e1      	adds	r1, r4, r3
 80050e2:	1c5a      	adds	r2, r3, #1
 80050e4:	2030      	movs	r0, #48	; 0x30
 80050e6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050ea:	4422      	add	r2, r4
 80050ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050f4:	3302      	adds	r3, #2
 80050f6:	e7c7      	b.n	8005088 <_printf_common+0x58>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4622      	mov	r2, r4
 80050fc:	4649      	mov	r1, r9
 80050fe:	4638      	mov	r0, r7
 8005100:	47c0      	blx	r8
 8005102:	3001      	adds	r0, #1
 8005104:	d0e6      	beq.n	80050d4 <_printf_common+0xa4>
 8005106:	3601      	adds	r6, #1
 8005108:	e7d9      	b.n	80050be <_printf_common+0x8e>
	...

0800510c <_printf_i>:
 800510c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005110:	460c      	mov	r4, r1
 8005112:	4691      	mov	r9, r2
 8005114:	7e27      	ldrb	r7, [r4, #24]
 8005116:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005118:	2f78      	cmp	r7, #120	; 0x78
 800511a:	4680      	mov	r8, r0
 800511c:	469a      	mov	sl, r3
 800511e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005122:	d807      	bhi.n	8005134 <_printf_i+0x28>
 8005124:	2f62      	cmp	r7, #98	; 0x62
 8005126:	d80a      	bhi.n	800513e <_printf_i+0x32>
 8005128:	2f00      	cmp	r7, #0
 800512a:	f000 80d8 	beq.w	80052de <_printf_i+0x1d2>
 800512e:	2f58      	cmp	r7, #88	; 0x58
 8005130:	f000 80a3 	beq.w	800527a <_printf_i+0x16e>
 8005134:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8005138:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800513c:	e03a      	b.n	80051b4 <_printf_i+0xa8>
 800513e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005142:	2b15      	cmp	r3, #21
 8005144:	d8f6      	bhi.n	8005134 <_printf_i+0x28>
 8005146:	a001      	add	r0, pc, #4	; (adr r0, 800514c <_printf_i+0x40>)
 8005148:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800514c:	080051a5 	.word	0x080051a5
 8005150:	080051b9 	.word	0x080051b9
 8005154:	08005135 	.word	0x08005135
 8005158:	08005135 	.word	0x08005135
 800515c:	08005135 	.word	0x08005135
 8005160:	08005135 	.word	0x08005135
 8005164:	080051b9 	.word	0x080051b9
 8005168:	08005135 	.word	0x08005135
 800516c:	08005135 	.word	0x08005135
 8005170:	08005135 	.word	0x08005135
 8005174:	08005135 	.word	0x08005135
 8005178:	080052c5 	.word	0x080052c5
 800517c:	080051e9 	.word	0x080051e9
 8005180:	080052a7 	.word	0x080052a7
 8005184:	08005135 	.word	0x08005135
 8005188:	08005135 	.word	0x08005135
 800518c:	080052e7 	.word	0x080052e7
 8005190:	08005135 	.word	0x08005135
 8005194:	080051e9 	.word	0x080051e9
 8005198:	08005135 	.word	0x08005135
 800519c:	08005135 	.word	0x08005135
 80051a0:	080052af 	.word	0x080052af
 80051a4:	680b      	ldr	r3, [r1, #0]
 80051a6:	1d1a      	adds	r2, r3, #4
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	600a      	str	r2, [r1, #0]
 80051ac:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80051b0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80051b4:	2301      	movs	r3, #1
 80051b6:	e0a3      	b.n	8005300 <_printf_i+0x1f4>
 80051b8:	6825      	ldr	r5, [r4, #0]
 80051ba:	6808      	ldr	r0, [r1, #0]
 80051bc:	062e      	lsls	r6, r5, #24
 80051be:	f100 0304 	add.w	r3, r0, #4
 80051c2:	d50a      	bpl.n	80051da <_printf_i+0xce>
 80051c4:	6805      	ldr	r5, [r0, #0]
 80051c6:	600b      	str	r3, [r1, #0]
 80051c8:	2d00      	cmp	r5, #0
 80051ca:	da03      	bge.n	80051d4 <_printf_i+0xc8>
 80051cc:	232d      	movs	r3, #45	; 0x2d
 80051ce:	426d      	negs	r5, r5
 80051d0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051d4:	485e      	ldr	r0, [pc, #376]	; (8005350 <_printf_i+0x244>)
 80051d6:	230a      	movs	r3, #10
 80051d8:	e019      	b.n	800520e <_printf_i+0x102>
 80051da:	f015 0f40 	tst.w	r5, #64	; 0x40
 80051de:	6805      	ldr	r5, [r0, #0]
 80051e0:	600b      	str	r3, [r1, #0]
 80051e2:	bf18      	it	ne
 80051e4:	b22d      	sxthne	r5, r5
 80051e6:	e7ef      	b.n	80051c8 <_printf_i+0xbc>
 80051e8:	680b      	ldr	r3, [r1, #0]
 80051ea:	6825      	ldr	r5, [r4, #0]
 80051ec:	1d18      	adds	r0, r3, #4
 80051ee:	6008      	str	r0, [r1, #0]
 80051f0:	0628      	lsls	r0, r5, #24
 80051f2:	d501      	bpl.n	80051f8 <_printf_i+0xec>
 80051f4:	681d      	ldr	r5, [r3, #0]
 80051f6:	e002      	b.n	80051fe <_printf_i+0xf2>
 80051f8:	0669      	lsls	r1, r5, #25
 80051fa:	d5fb      	bpl.n	80051f4 <_printf_i+0xe8>
 80051fc:	881d      	ldrh	r5, [r3, #0]
 80051fe:	4854      	ldr	r0, [pc, #336]	; (8005350 <_printf_i+0x244>)
 8005200:	2f6f      	cmp	r7, #111	; 0x6f
 8005202:	bf0c      	ite	eq
 8005204:	2308      	moveq	r3, #8
 8005206:	230a      	movne	r3, #10
 8005208:	2100      	movs	r1, #0
 800520a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800520e:	6866      	ldr	r6, [r4, #4]
 8005210:	60a6      	str	r6, [r4, #8]
 8005212:	2e00      	cmp	r6, #0
 8005214:	bfa2      	ittt	ge
 8005216:	6821      	ldrge	r1, [r4, #0]
 8005218:	f021 0104 	bicge.w	r1, r1, #4
 800521c:	6021      	strge	r1, [r4, #0]
 800521e:	b90d      	cbnz	r5, 8005224 <_printf_i+0x118>
 8005220:	2e00      	cmp	r6, #0
 8005222:	d04d      	beq.n	80052c0 <_printf_i+0x1b4>
 8005224:	4616      	mov	r6, r2
 8005226:	fbb5 f1f3 	udiv	r1, r5, r3
 800522a:	fb03 5711 	mls	r7, r3, r1, r5
 800522e:	5dc7      	ldrb	r7, [r0, r7]
 8005230:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005234:	462f      	mov	r7, r5
 8005236:	42bb      	cmp	r3, r7
 8005238:	460d      	mov	r5, r1
 800523a:	d9f4      	bls.n	8005226 <_printf_i+0x11a>
 800523c:	2b08      	cmp	r3, #8
 800523e:	d10b      	bne.n	8005258 <_printf_i+0x14c>
 8005240:	6823      	ldr	r3, [r4, #0]
 8005242:	07df      	lsls	r7, r3, #31
 8005244:	d508      	bpl.n	8005258 <_printf_i+0x14c>
 8005246:	6923      	ldr	r3, [r4, #16]
 8005248:	6861      	ldr	r1, [r4, #4]
 800524a:	4299      	cmp	r1, r3
 800524c:	bfde      	ittt	le
 800524e:	2330      	movle	r3, #48	; 0x30
 8005250:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005254:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005258:	1b92      	subs	r2, r2, r6
 800525a:	6122      	str	r2, [r4, #16]
 800525c:	f8cd a000 	str.w	sl, [sp]
 8005260:	464b      	mov	r3, r9
 8005262:	aa03      	add	r2, sp, #12
 8005264:	4621      	mov	r1, r4
 8005266:	4640      	mov	r0, r8
 8005268:	f7ff fee2 	bl	8005030 <_printf_common>
 800526c:	3001      	adds	r0, #1
 800526e:	d14c      	bne.n	800530a <_printf_i+0x1fe>
 8005270:	f04f 30ff 	mov.w	r0, #4294967295
 8005274:	b004      	add	sp, #16
 8005276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800527a:	4835      	ldr	r0, [pc, #212]	; (8005350 <_printf_i+0x244>)
 800527c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8005280:	6823      	ldr	r3, [r4, #0]
 8005282:	680e      	ldr	r6, [r1, #0]
 8005284:	061f      	lsls	r7, r3, #24
 8005286:	f856 5b04 	ldr.w	r5, [r6], #4
 800528a:	600e      	str	r6, [r1, #0]
 800528c:	d514      	bpl.n	80052b8 <_printf_i+0x1ac>
 800528e:	07d9      	lsls	r1, r3, #31
 8005290:	bf44      	itt	mi
 8005292:	f043 0320 	orrmi.w	r3, r3, #32
 8005296:	6023      	strmi	r3, [r4, #0]
 8005298:	b91d      	cbnz	r5, 80052a2 <_printf_i+0x196>
 800529a:	6823      	ldr	r3, [r4, #0]
 800529c:	f023 0320 	bic.w	r3, r3, #32
 80052a0:	6023      	str	r3, [r4, #0]
 80052a2:	2310      	movs	r3, #16
 80052a4:	e7b0      	b.n	8005208 <_printf_i+0xfc>
 80052a6:	6823      	ldr	r3, [r4, #0]
 80052a8:	f043 0320 	orr.w	r3, r3, #32
 80052ac:	6023      	str	r3, [r4, #0]
 80052ae:	2378      	movs	r3, #120	; 0x78
 80052b0:	4828      	ldr	r0, [pc, #160]	; (8005354 <_printf_i+0x248>)
 80052b2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80052b6:	e7e3      	b.n	8005280 <_printf_i+0x174>
 80052b8:	065e      	lsls	r6, r3, #25
 80052ba:	bf48      	it	mi
 80052bc:	b2ad      	uxthmi	r5, r5
 80052be:	e7e6      	b.n	800528e <_printf_i+0x182>
 80052c0:	4616      	mov	r6, r2
 80052c2:	e7bb      	b.n	800523c <_printf_i+0x130>
 80052c4:	680b      	ldr	r3, [r1, #0]
 80052c6:	6826      	ldr	r6, [r4, #0]
 80052c8:	6960      	ldr	r0, [r4, #20]
 80052ca:	1d1d      	adds	r5, r3, #4
 80052cc:	600d      	str	r5, [r1, #0]
 80052ce:	0635      	lsls	r5, r6, #24
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	d501      	bpl.n	80052d8 <_printf_i+0x1cc>
 80052d4:	6018      	str	r0, [r3, #0]
 80052d6:	e002      	b.n	80052de <_printf_i+0x1d2>
 80052d8:	0671      	lsls	r1, r6, #25
 80052da:	d5fb      	bpl.n	80052d4 <_printf_i+0x1c8>
 80052dc:	8018      	strh	r0, [r3, #0]
 80052de:	2300      	movs	r3, #0
 80052e0:	6123      	str	r3, [r4, #16]
 80052e2:	4616      	mov	r6, r2
 80052e4:	e7ba      	b.n	800525c <_printf_i+0x150>
 80052e6:	680b      	ldr	r3, [r1, #0]
 80052e8:	1d1a      	adds	r2, r3, #4
 80052ea:	600a      	str	r2, [r1, #0]
 80052ec:	681e      	ldr	r6, [r3, #0]
 80052ee:	6862      	ldr	r2, [r4, #4]
 80052f0:	2100      	movs	r1, #0
 80052f2:	4630      	mov	r0, r6
 80052f4:	f7fa ff94 	bl	8000220 <memchr>
 80052f8:	b108      	cbz	r0, 80052fe <_printf_i+0x1f2>
 80052fa:	1b80      	subs	r0, r0, r6
 80052fc:	6060      	str	r0, [r4, #4]
 80052fe:	6863      	ldr	r3, [r4, #4]
 8005300:	6123      	str	r3, [r4, #16]
 8005302:	2300      	movs	r3, #0
 8005304:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005308:	e7a8      	b.n	800525c <_printf_i+0x150>
 800530a:	6923      	ldr	r3, [r4, #16]
 800530c:	4632      	mov	r2, r6
 800530e:	4649      	mov	r1, r9
 8005310:	4640      	mov	r0, r8
 8005312:	47d0      	blx	sl
 8005314:	3001      	adds	r0, #1
 8005316:	d0ab      	beq.n	8005270 <_printf_i+0x164>
 8005318:	6823      	ldr	r3, [r4, #0]
 800531a:	079b      	lsls	r3, r3, #30
 800531c:	d413      	bmi.n	8005346 <_printf_i+0x23a>
 800531e:	68e0      	ldr	r0, [r4, #12]
 8005320:	9b03      	ldr	r3, [sp, #12]
 8005322:	4298      	cmp	r0, r3
 8005324:	bfb8      	it	lt
 8005326:	4618      	movlt	r0, r3
 8005328:	e7a4      	b.n	8005274 <_printf_i+0x168>
 800532a:	2301      	movs	r3, #1
 800532c:	4632      	mov	r2, r6
 800532e:	4649      	mov	r1, r9
 8005330:	4640      	mov	r0, r8
 8005332:	47d0      	blx	sl
 8005334:	3001      	adds	r0, #1
 8005336:	d09b      	beq.n	8005270 <_printf_i+0x164>
 8005338:	3501      	adds	r5, #1
 800533a:	68e3      	ldr	r3, [r4, #12]
 800533c:	9903      	ldr	r1, [sp, #12]
 800533e:	1a5b      	subs	r3, r3, r1
 8005340:	42ab      	cmp	r3, r5
 8005342:	dcf2      	bgt.n	800532a <_printf_i+0x21e>
 8005344:	e7eb      	b.n	800531e <_printf_i+0x212>
 8005346:	2500      	movs	r5, #0
 8005348:	f104 0619 	add.w	r6, r4, #25
 800534c:	e7f5      	b.n	800533a <_printf_i+0x22e>
 800534e:	bf00      	nop
 8005350:	080055f5 	.word	0x080055f5
 8005354:	08005606 	.word	0x08005606

08005358 <memcpy>:
 8005358:	440a      	add	r2, r1
 800535a:	4291      	cmp	r1, r2
 800535c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005360:	d100      	bne.n	8005364 <memcpy+0xc>
 8005362:	4770      	bx	lr
 8005364:	b510      	push	{r4, lr}
 8005366:	f811 4b01 	ldrb.w	r4, [r1], #1
 800536a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800536e:	4291      	cmp	r1, r2
 8005370:	d1f9      	bne.n	8005366 <memcpy+0xe>
 8005372:	bd10      	pop	{r4, pc}

08005374 <memmove>:
 8005374:	4288      	cmp	r0, r1
 8005376:	b510      	push	{r4, lr}
 8005378:	eb01 0402 	add.w	r4, r1, r2
 800537c:	d902      	bls.n	8005384 <memmove+0x10>
 800537e:	4284      	cmp	r4, r0
 8005380:	4623      	mov	r3, r4
 8005382:	d807      	bhi.n	8005394 <memmove+0x20>
 8005384:	1e43      	subs	r3, r0, #1
 8005386:	42a1      	cmp	r1, r4
 8005388:	d008      	beq.n	800539c <memmove+0x28>
 800538a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800538e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005392:	e7f8      	b.n	8005386 <memmove+0x12>
 8005394:	4402      	add	r2, r0
 8005396:	4601      	mov	r1, r0
 8005398:	428a      	cmp	r2, r1
 800539a:	d100      	bne.n	800539e <memmove+0x2a>
 800539c:	bd10      	pop	{r4, pc}
 800539e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80053a2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80053a6:	e7f7      	b.n	8005398 <memmove+0x24>

080053a8 <_free_r>:
 80053a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80053aa:	2900      	cmp	r1, #0
 80053ac:	d048      	beq.n	8005440 <_free_r+0x98>
 80053ae:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053b2:	9001      	str	r0, [sp, #4]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f1a1 0404 	sub.w	r4, r1, #4
 80053ba:	bfb8      	it	lt
 80053bc:	18e4      	addlt	r4, r4, r3
 80053be:	f000 f8d3 	bl	8005568 <__malloc_lock>
 80053c2:	4a20      	ldr	r2, [pc, #128]	; (8005444 <_free_r+0x9c>)
 80053c4:	9801      	ldr	r0, [sp, #4]
 80053c6:	6813      	ldr	r3, [r2, #0]
 80053c8:	4615      	mov	r5, r2
 80053ca:	b933      	cbnz	r3, 80053da <_free_r+0x32>
 80053cc:	6063      	str	r3, [r4, #4]
 80053ce:	6014      	str	r4, [r2, #0]
 80053d0:	b003      	add	sp, #12
 80053d2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053d6:	f000 b8cd 	b.w	8005574 <__malloc_unlock>
 80053da:	42a3      	cmp	r3, r4
 80053dc:	d90b      	bls.n	80053f6 <_free_r+0x4e>
 80053de:	6821      	ldr	r1, [r4, #0]
 80053e0:	1862      	adds	r2, r4, r1
 80053e2:	4293      	cmp	r3, r2
 80053e4:	bf04      	itt	eq
 80053e6:	681a      	ldreq	r2, [r3, #0]
 80053e8:	685b      	ldreq	r3, [r3, #4]
 80053ea:	6063      	str	r3, [r4, #4]
 80053ec:	bf04      	itt	eq
 80053ee:	1852      	addeq	r2, r2, r1
 80053f0:	6022      	streq	r2, [r4, #0]
 80053f2:	602c      	str	r4, [r5, #0]
 80053f4:	e7ec      	b.n	80053d0 <_free_r+0x28>
 80053f6:	461a      	mov	r2, r3
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	b10b      	cbz	r3, 8005400 <_free_r+0x58>
 80053fc:	42a3      	cmp	r3, r4
 80053fe:	d9fa      	bls.n	80053f6 <_free_r+0x4e>
 8005400:	6811      	ldr	r1, [r2, #0]
 8005402:	1855      	adds	r5, r2, r1
 8005404:	42a5      	cmp	r5, r4
 8005406:	d10b      	bne.n	8005420 <_free_r+0x78>
 8005408:	6824      	ldr	r4, [r4, #0]
 800540a:	4421      	add	r1, r4
 800540c:	1854      	adds	r4, r2, r1
 800540e:	42a3      	cmp	r3, r4
 8005410:	6011      	str	r1, [r2, #0]
 8005412:	d1dd      	bne.n	80053d0 <_free_r+0x28>
 8005414:	681c      	ldr	r4, [r3, #0]
 8005416:	685b      	ldr	r3, [r3, #4]
 8005418:	6053      	str	r3, [r2, #4]
 800541a:	4421      	add	r1, r4
 800541c:	6011      	str	r1, [r2, #0]
 800541e:	e7d7      	b.n	80053d0 <_free_r+0x28>
 8005420:	d902      	bls.n	8005428 <_free_r+0x80>
 8005422:	230c      	movs	r3, #12
 8005424:	6003      	str	r3, [r0, #0]
 8005426:	e7d3      	b.n	80053d0 <_free_r+0x28>
 8005428:	6825      	ldr	r5, [r4, #0]
 800542a:	1961      	adds	r1, r4, r5
 800542c:	428b      	cmp	r3, r1
 800542e:	bf04      	itt	eq
 8005430:	6819      	ldreq	r1, [r3, #0]
 8005432:	685b      	ldreq	r3, [r3, #4]
 8005434:	6063      	str	r3, [r4, #4]
 8005436:	bf04      	itt	eq
 8005438:	1949      	addeq	r1, r1, r5
 800543a:	6021      	streq	r1, [r4, #0]
 800543c:	6054      	str	r4, [r2, #4]
 800543e:	e7c7      	b.n	80053d0 <_free_r+0x28>
 8005440:	b003      	add	sp, #12
 8005442:	bd30      	pop	{r4, r5, pc}
 8005444:	200000cc 	.word	0x200000cc

08005448 <_malloc_r>:
 8005448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800544a:	1ccd      	adds	r5, r1, #3
 800544c:	f025 0503 	bic.w	r5, r5, #3
 8005450:	3508      	adds	r5, #8
 8005452:	2d0c      	cmp	r5, #12
 8005454:	bf38      	it	cc
 8005456:	250c      	movcc	r5, #12
 8005458:	2d00      	cmp	r5, #0
 800545a:	4606      	mov	r6, r0
 800545c:	db01      	blt.n	8005462 <_malloc_r+0x1a>
 800545e:	42a9      	cmp	r1, r5
 8005460:	d903      	bls.n	800546a <_malloc_r+0x22>
 8005462:	230c      	movs	r3, #12
 8005464:	6033      	str	r3, [r6, #0]
 8005466:	2000      	movs	r0, #0
 8005468:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800546a:	f000 f87d 	bl	8005568 <__malloc_lock>
 800546e:	4921      	ldr	r1, [pc, #132]	; (80054f4 <_malloc_r+0xac>)
 8005470:	680a      	ldr	r2, [r1, #0]
 8005472:	4614      	mov	r4, r2
 8005474:	b99c      	cbnz	r4, 800549e <_malloc_r+0x56>
 8005476:	4f20      	ldr	r7, [pc, #128]	; (80054f8 <_malloc_r+0xb0>)
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	b923      	cbnz	r3, 8005486 <_malloc_r+0x3e>
 800547c:	4621      	mov	r1, r4
 800547e:	4630      	mov	r0, r6
 8005480:	f000 f862 	bl	8005548 <_sbrk_r>
 8005484:	6038      	str	r0, [r7, #0]
 8005486:	4629      	mov	r1, r5
 8005488:	4630      	mov	r0, r6
 800548a:	f000 f85d 	bl	8005548 <_sbrk_r>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	d123      	bne.n	80054da <_malloc_r+0x92>
 8005492:	230c      	movs	r3, #12
 8005494:	6033      	str	r3, [r6, #0]
 8005496:	4630      	mov	r0, r6
 8005498:	f000 f86c 	bl	8005574 <__malloc_unlock>
 800549c:	e7e3      	b.n	8005466 <_malloc_r+0x1e>
 800549e:	6823      	ldr	r3, [r4, #0]
 80054a0:	1b5b      	subs	r3, r3, r5
 80054a2:	d417      	bmi.n	80054d4 <_malloc_r+0x8c>
 80054a4:	2b0b      	cmp	r3, #11
 80054a6:	d903      	bls.n	80054b0 <_malloc_r+0x68>
 80054a8:	6023      	str	r3, [r4, #0]
 80054aa:	441c      	add	r4, r3
 80054ac:	6025      	str	r5, [r4, #0]
 80054ae:	e004      	b.n	80054ba <_malloc_r+0x72>
 80054b0:	6863      	ldr	r3, [r4, #4]
 80054b2:	42a2      	cmp	r2, r4
 80054b4:	bf0c      	ite	eq
 80054b6:	600b      	streq	r3, [r1, #0]
 80054b8:	6053      	strne	r3, [r2, #4]
 80054ba:	4630      	mov	r0, r6
 80054bc:	f000 f85a 	bl	8005574 <__malloc_unlock>
 80054c0:	f104 000b 	add.w	r0, r4, #11
 80054c4:	1d23      	adds	r3, r4, #4
 80054c6:	f020 0007 	bic.w	r0, r0, #7
 80054ca:	1ac2      	subs	r2, r0, r3
 80054cc:	d0cc      	beq.n	8005468 <_malloc_r+0x20>
 80054ce:	1a1b      	subs	r3, r3, r0
 80054d0:	50a3      	str	r3, [r4, r2]
 80054d2:	e7c9      	b.n	8005468 <_malloc_r+0x20>
 80054d4:	4622      	mov	r2, r4
 80054d6:	6864      	ldr	r4, [r4, #4]
 80054d8:	e7cc      	b.n	8005474 <_malloc_r+0x2c>
 80054da:	1cc4      	adds	r4, r0, #3
 80054dc:	f024 0403 	bic.w	r4, r4, #3
 80054e0:	42a0      	cmp	r0, r4
 80054e2:	d0e3      	beq.n	80054ac <_malloc_r+0x64>
 80054e4:	1a21      	subs	r1, r4, r0
 80054e6:	4630      	mov	r0, r6
 80054e8:	f000 f82e 	bl	8005548 <_sbrk_r>
 80054ec:	3001      	adds	r0, #1
 80054ee:	d1dd      	bne.n	80054ac <_malloc_r+0x64>
 80054f0:	e7cf      	b.n	8005492 <_malloc_r+0x4a>
 80054f2:	bf00      	nop
 80054f4:	200000cc 	.word	0x200000cc
 80054f8:	200000d0 	.word	0x200000d0

080054fc <_realloc_r>:
 80054fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054fe:	4607      	mov	r7, r0
 8005500:	4614      	mov	r4, r2
 8005502:	460e      	mov	r6, r1
 8005504:	b921      	cbnz	r1, 8005510 <_realloc_r+0x14>
 8005506:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800550a:	4611      	mov	r1, r2
 800550c:	f7ff bf9c 	b.w	8005448 <_malloc_r>
 8005510:	b922      	cbnz	r2, 800551c <_realloc_r+0x20>
 8005512:	f7ff ff49 	bl	80053a8 <_free_r>
 8005516:	4625      	mov	r5, r4
 8005518:	4628      	mov	r0, r5
 800551a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800551c:	f000 f830 	bl	8005580 <_malloc_usable_size_r>
 8005520:	42a0      	cmp	r0, r4
 8005522:	d20f      	bcs.n	8005544 <_realloc_r+0x48>
 8005524:	4621      	mov	r1, r4
 8005526:	4638      	mov	r0, r7
 8005528:	f7ff ff8e 	bl	8005448 <_malloc_r>
 800552c:	4605      	mov	r5, r0
 800552e:	2800      	cmp	r0, #0
 8005530:	d0f2      	beq.n	8005518 <_realloc_r+0x1c>
 8005532:	4631      	mov	r1, r6
 8005534:	4622      	mov	r2, r4
 8005536:	f7ff ff0f 	bl	8005358 <memcpy>
 800553a:	4631      	mov	r1, r6
 800553c:	4638      	mov	r0, r7
 800553e:	f7ff ff33 	bl	80053a8 <_free_r>
 8005542:	e7e9      	b.n	8005518 <_realloc_r+0x1c>
 8005544:	4635      	mov	r5, r6
 8005546:	e7e7      	b.n	8005518 <_realloc_r+0x1c>

08005548 <_sbrk_r>:
 8005548:	b538      	push	{r3, r4, r5, lr}
 800554a:	4d06      	ldr	r5, [pc, #24]	; (8005564 <_sbrk_r+0x1c>)
 800554c:	2300      	movs	r3, #0
 800554e:	4604      	mov	r4, r0
 8005550:	4608      	mov	r0, r1
 8005552:	602b      	str	r3, [r5, #0]
 8005554:	f7fb fb06 	bl	8000b64 <_sbrk>
 8005558:	1c43      	adds	r3, r0, #1
 800555a:	d102      	bne.n	8005562 <_sbrk_r+0x1a>
 800555c:	682b      	ldr	r3, [r5, #0]
 800555e:	b103      	cbz	r3, 8005562 <_sbrk_r+0x1a>
 8005560:	6023      	str	r3, [r4, #0]
 8005562:	bd38      	pop	{r3, r4, r5, pc}
 8005564:	20000360 	.word	0x20000360

08005568 <__malloc_lock>:
 8005568:	4801      	ldr	r0, [pc, #4]	; (8005570 <__malloc_lock+0x8>)
 800556a:	f000 b811 	b.w	8005590 <__retarget_lock_acquire_recursive>
 800556e:	bf00      	nop
 8005570:	20000368 	.word	0x20000368

08005574 <__malloc_unlock>:
 8005574:	4801      	ldr	r0, [pc, #4]	; (800557c <__malloc_unlock+0x8>)
 8005576:	f000 b80c 	b.w	8005592 <__retarget_lock_release_recursive>
 800557a:	bf00      	nop
 800557c:	20000368 	.word	0x20000368

08005580 <_malloc_usable_size_r>:
 8005580:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005584:	1f18      	subs	r0, r3, #4
 8005586:	2b00      	cmp	r3, #0
 8005588:	bfbc      	itt	lt
 800558a:	580b      	ldrlt	r3, [r1, r0]
 800558c:	18c0      	addlt	r0, r0, r3
 800558e:	4770      	bx	lr

08005590 <__retarget_lock_acquire_recursive>:
 8005590:	4770      	bx	lr

08005592 <__retarget_lock_release_recursive>:
 8005592:	4770      	bx	lr

08005594 <_init>:
 8005594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005596:	bf00      	nop
 8005598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800559a:	bc08      	pop	{r3}
 800559c:	469e      	mov	lr, r3
 800559e:	4770      	bx	lr

080055a0 <_fini>:
 80055a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055a2:	bf00      	nop
 80055a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055a6:	bc08      	pop	{r3}
 80055a8:	469e      	mov	lr, r3
 80055aa:	4770      	bx	lr
